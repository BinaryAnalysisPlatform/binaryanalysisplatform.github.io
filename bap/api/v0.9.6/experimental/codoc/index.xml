<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8"/>
    <link rel="stylesheet" type="text/css" href="../../../../../codoc.css"/>
    <title>Bap</title>
  </head>
  <body>

  <div class="module codoc-doc">
      <a href="../../../../index.html">Up</a>
      <div class="intro"><h1 class="title"><span class="keyword">module</span> <a href="">Bap</a></h1> : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Binary Analysis Platform API.</p>
      <div class="region">
    <h1 class="section level_1">Overview</h1>
    </div>
      <p>BAP has a layered architecture currently consisting of four
layers:</p>
      <ul><li>[root:types] - defines Binary Intermidiate Language
(BIL) as well as some common basic types, commonly usable for
binary analysis.</li></ul><ul><li>[root:image] - loads and represents binary in the
memory;</li></ul><ul><li>[root:disasm] - the first pass of the analysis -
disassembles and lifts binary to BIL.</li></ul><ul><li>[root:sema] - the seconds pass of decompilation,
that performs lifting to IR and provides useful analysis.</li></ul><div class="region">
    <h2 class="section level_2">How to use the library</h2>
    </div>
      <p>You should start any code relying on <code>bap-types</code> library with a</p>
      
      <p><code>open Bap.Std</code></p>
      
      <p>It is a good idea, to open <code>Core_kenel.Std</code> before.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std">
  <a href="index.html#/module:Std" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Std : <span class="keyword">sig</span></div>
      
      <div class="doc">
        <div class="region">
    <h1 class="section level_1">BAP API</h1>
    </div>
        
      </div>
    
      
    <div class="sig">
      <div class="doc">
        
  <div class="region" id="/module:Std/label:types">
  <a href="index.html#/module:Std/label:types" class="anchor">#</a>
  
    <h1 class="section level_1">Bap core types</h1>
    
  </div>
  
      <p>Library provides 7 core types, namely:</p>
      <ul><li><code>arch</code> - computer architecture</li><li><code>size</code> - word or addresses size</li><li><code>var</code> - a typed variable</li><li><code>typ</code> - types of expressions</li><li><code>exp</code> - bil expression</li><li><code>stmt</code> - bil statement</li><li><code>addr</code>, <code>word</code> - represents imidiate data,
this types are indeed synonyms to <code>Bitvector.t</code>.</li></ul>
      <p>Every type implements <code>Regular</code> interface. This interface is
very similiar to core's <code>Identifiable</code>, and is supposed to
represent a type that is as common as built-in type. One should
expect to find any function that is implemented for such types as
<code>int</code>, <code>string</code>, <code>char</code>, etc. To name a few, this interface
includes:</p>
      <ul><li>comparison functions: (<code>&lt;, &gt;, &lt;= , &gt;= , compare, between, ...</code>);</li><li>each type defines a polymorphic <code>Map</code> with keys of type <code>t</code>;</li><li>each type provides a <code>Set</code> with values of type <code>t</code>;</li><li>hashtable is exposed via <code>Table</code> module;</li><li>hashset is available under <code>Hash_set</code> name</li><li>sexpable and binable interface;</li><li><code>to_string</code>, <code>str</code>, <code>pp</code>, <code>ppo</code>, <code>pps</code> functions
for pretty-printing.</li></ul>
      <p>And most types usually provides much more.</p>
      
      <p>For each exported type, there is a module with the same name
(module capitalization), that implements its interface. For
example, type <code>exp</code> is indeed a type abbreviation for <code>Exp.t</code>,
and module <code>Exp</code> contains all functions and types related to type
<code>exp</code>. For example, to create a hashtable of statements, just
type:</p>
      
      <p><code>let table = Stmt.Table.create ()</code></p>
      
      <p>If a type is a variant type, and most types in <code>bap-types</code>
library, are variant, then for each contructor named <code>Name</code>, you
will find a corresponding function named <code>name</code> that will accept
the same number of arguments as the arity of the constructor. For
example, type <code>exp</code> has a contructor <code>Extract int * int * t)</code>, and
there is a corresponding function named <code>extract</code>, that has type
<code>int -&gt; int -&gt; t -&gt; t</code>. See <code>variantslib</code> for more information about,
variants interface.</p>
      
        
      </div>
    
  <div class="region" id="/module:Std/type:printer">
  <a href="index.html#/module:Std/type:printer" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a printer = <a href="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html">Format</a>.<a href="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html#/type:formatter">formatter</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> unit
    
      <div class="doc">
        
      <p><code>'a printer</code> defines a type for pretty-printers for a value of
type <code>'a</code>. This is the type, that is required by <code>%a</code> specifier,
for <code>Format.printf</code>-family of functions. Also, this is the type,
that can be installed into OCaml toplevel or debugger.</p>
      
      <p>Note: `bap.top` library automatically installs all printers.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:tc">
  <a href="index.html#/module:Std/label:tc" class="anchor">#</a>
  
    <h2 class="section level_2">Basic signatures</h2>
    
  </div>
  
        
      </div>
    
  <div class="region" id="/module:Std/modtype:Printable">
  <a href="index.html#/module:Std/modtype:Printable" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Printable = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Printable interface is implemented by a significant amount of
BAP types.</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:Printable/type:t">
  <a href="index.html#/module:Std/modtype:Printable/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Printable/val:to_string">
  <a href="index.html#/module:Std/modtype:Printable/val:to_string" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_string : <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Printable/val:str">
  <a href="index.html#/module:Std/modtype:Printable/val:str" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> str : unit <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p><code>str () t</code> is formatted output function that matches &quot;%a&quot;
conversion format specifier in functions, that prints to string,
e.g., <code>sprintf</code>, <code>failwithf</code>, <code>errorf</code> and, suprisingly all
<code>Lwt</code> printing function, including <code>Lwt_io.printf</code> and logging
(or any other function with type ('a,unit,string,...)
formatN`. Example:</p>
      
      <p><code>Or_error.errorf &quot;type %a is not valid for %a&quot;
          Type.str ty Exp.str exp</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Printable/val:pps">
  <a href="index.html#/module:Std/modtype:Printable/val:pps" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pps : unit <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p>synonym for <code>str</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Printable/val:ppo">
  <a href="index.html#/module:Std/modtype:Printable/val:ppo" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ppo : <a href="../../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html">Pervasives</a>.<a href="../../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html#/type:out_channel">out_channel</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> unit
    
      <div class="doc">
        
      <p>will print to a standard <code>output_channel</code>, useful for using in
<code>printf</code>, <code>fprintf</code>, etc.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Pretty_printer.S <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular">
  <a href="index.html#/module:Std/modtype:Regular" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Regular = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Regular types models a general concept of value, i.e., something
that can be used in way similiar to regular <code>int</code>, <code>string</code>,
<code>char</code> and other built in types. So that it can be compared, used
in maps, sets, hashtables, printer, etc.</p>
      
      <p>Note: this signature is pretty similiar to core's <code>Identifiable</code>,
but doesn't require <code>of_string</code> function, that is usually much
harder to implement in comparison with <code>to_string</code> function. Also,
instead of <code>to_string</code> it requires <code>pp</code> function that can be
implemented much more efficiently and elegantly. From the <code>pp</code>
function the whole plethora of printing functions are derived:
<code>str</code>, <code>pps</code>, <code>ppo</code>.</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:Regular/type:t">
  <a href="index.html#/module:Std/modtype:Regular/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Printable">Printable</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> := <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Comparable.S_binable <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Hashable.S_binable <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:compare">
  <a href="index.html#/module:Std/modtype:Regular/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:t_of_sexp">
  <a href="index.html#/module:Std/modtype:Regular/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:sexp_of_t">
  <a href="index.html#/module:Std/modtype:Regular/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:bin_t">
  <a href="index.html#/module:Std/modtype:Regular/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:bin_read_t">
  <a href="index.html#/module:Std/modtype:Regular/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:__bin_read_t__">
  <a href="index.html#/module:Std/modtype:Regular/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:bin_reader_t">
  <a href="index.html#/module:Std/modtype:Regular/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:bin_size_t">
  <a href="index.html#/module:Std/modtype:Regular/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:bin_write_t">
  <a href="index.html#/module:Std/modtype:Regular/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Regular/val:bin_writer_t">
  <a href="index.html#/module:Std/modtype:Regular/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer">
  <a href="index.html#/module:Std/modtype:Integer" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Integer = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Signature for integral type.</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:Integer/type:t">
  <a href="index.html#/module:Std/modtype:Integer/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:zero">
  <a href="index.html#/module:Std/modtype:Integer/val:zero" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> zero : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:one">
  <a href="index.html#/module:Std/modtype:Integer/val:one" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> one : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:succ">
  <a href="index.html#/module:Std/modtype:Integer/val:succ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> succ : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:pred">
  <a href="index.html#/module:Std/modtype:Integer/val:pred" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pred : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:abs">
  <a href="index.html#/module:Std/modtype:Integer/val:abs" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> abs : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:neg">
  <a href="index.html#/module:Std/modtype:Integer/val:neg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> neg : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:add">
  <a href="index.html#/module:Std/modtype:Integer/val:add" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> add : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:sub">
  <a href="index.html#/module:Std/modtype:Integer/val:sub" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sub : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:mul">
  <a href="index.html#/module:Std/modtype:Integer/val:mul" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mul : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:div">
  <a href="index.html#/module:Std/modtype:Integer/val:div" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> div : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:modulo">
  <a href="index.html#/module:Std/modtype:Integer/val:modulo" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> modulo : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:lnot">
  <a href="index.html#/module:Std/modtype:Integer/val:lnot" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lnot : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:logand">
  <a href="index.html#/module:Std/modtype:Integer/val:logand" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> logand : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:logor">
  <a href="index.html#/module:Std/modtype:Integer/val:logor" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> logor : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:logxor">
  <a href="index.html#/module:Std/modtype:Integer/val:logxor" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> logxor : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:lshift">
  <a href="index.html#/module:Std/modtype:Integer/val:lshift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lshift : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:rshift">
  <a href="index.html#/module:Std/modtype:Integer/val:rshift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rshift : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:arshift">
  <a href="index.html#/module:Std/modtype:Integer/val:arshift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> arshift : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:(~-)">
  <a href="index.html#/module:Std/modtype:Integer/val:(~-)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (~-) : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
      <div class="doc">
        
      <p>A common set of infix operators</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:(+)">
  <a href="index.html#/module:Std/modtype:Integer/val:(%2B)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (+) : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:(-)">
  <a href="index.html#/module:Std/modtype:Integer/val:(-)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (-) : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:(*)">
  <a href="index.html#/module:Std/modtype:Integer/val:(*)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (*) : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:(/)">
  <a href="index.html#/module:Std/modtype:Integer/val:(/)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (/) : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:mod">
  <a href="index.html#/module:Std/modtype:Integer/val:mod" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mod : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:land">
  <a href="index.html#/module:Std/modtype:Integer/val:land" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> land : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:lor">
  <a href="index.html#/module:Std/modtype:Integer/val:lor" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lor : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:lxor">
  <a href="index.html#/module:Std/modtype:Integer/val:lxor" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lxor : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:lsl">
  <a href="index.html#/module:Std/modtype:Integer/val:lsl" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lsl : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:lsr">
  <a href="index.html#/module:Std/modtype:Integer/val:lsr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lsr : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Integer/val:asr">
  <a href="index.html#/module:Std/modtype:Integer/val:asr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> asr : <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie">
  <a href="index.html#/module:Std/modtype:Trie" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Trie = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Prefix tries.</p>
      
      <p>Trie is a mutable table, that can be seen as a specialized
form of a hash table.</p>
      
      <p>Use <code>Trie.Make</code> functor to create modules, implementing this
signature. Also look at already predefined modules, like
<code>String</code> (see below), <code>Bitvector.Trie</code>, <code>Bil.Trie</code>,
<code>Insn.Trie</code>, etc.</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:Trie/type:t">
  <a href="index.html#/module:Std/modtype:Trie/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a t
    
      <div class="doc">
        
      <p>trie can store arbitrary data</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/type:key">
  <a href="index.html#/module:Std/modtype:Trie/type:key" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> key
    
      <div class="doc">
        
      <p>a key type that is used to lookup data</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:create">
  <a href="index.html#/module:Std/modtype:Trie/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : unit <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a>
    
      <div class="doc">
        
      <p><code>create ()</code> creates new empty trie</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:add">
  <a href="index.html#/module:Std/modtype:Trie/val:add" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> add : 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> key:<a href="index.html#/module:Std/modtype:Trie/type:key">key</a> <span class="rarr"><span>-&gt;</span></span> data:'a <span class="rarr"><span>-&gt;</span></span> unit
    
      <div class="doc">
        
      <p><code>add trie ~key ~data</code> adds <code>data</code> associated with <code>key</code>, if
<code>trie</code> already has some data associated with the <code>key</code>, then
it will be overwritten</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:change">
  <a href="index.html#/module:Std/modtype:Trie/val:change" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> change : 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> <span class="rarr"><span>-&gt;</span></span> ('a option <span class="rarr"><span>-&gt;</span></span> 'a option) <span class="rarr"><span>-&gt;</span></span> unit
    
      <div class="doc">
        
      <p><code>change trie key f</code> if trie has <code>data</code> associated with <code>key</code> then
<code>f</code> will be called with <code>Some data</code>, otherwise it will be called
with <code>None</code>. If <code>f</code> returns <code>None</code> then there will be no data
associated with <code>key</code>, if <code>f</code> returns <code>Some thing</code>, then <code>thing</code>
will be bound to <code>key</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:find">
  <a href="index.html#/module:Std/modtype:Trie/val:find" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find : 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> <span class="rarr"><span>-&gt;</span></span> 'a option
    
      <div class="doc">
        
      <p><code>find trie key</code> finds data associated with <code>key</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:remove">
  <a href="index.html#/module:Std/modtype:Trie/val:remove" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> remove : 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> <span class="rarr"><span>-&gt;</span></span> unit
    
      <div class="doc">
        
      <p><code>remove trie key</code> removes value bound with <code>key</code> if any.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:longest_match">
  <a href="index.html#/module:Std/modtype:Trie/val:longest_match" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> longest_match : 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> <span class="rarr"><span>-&gt;</span></span> (int * 'a) option
    
      <div class="doc">
        
      <p><code>longest_match trie key</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:length">
  <a href="index.html#/module:Std/modtype:Trie/val:length" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> length : 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:pp">
  <a href="index.html#/module:Std/modtype:Trie/val:pp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pp : 'a <a href="index.html#/module:Std/type:printer">printer</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> <a href="index.html#/module:Std/type:printer">printer</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:t_of_sexp">
  <a href="index.html#/module:Std/modtype:Trie/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : (Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> 'a) <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:sexp_of_t">
  <a href="index.html#/module:Std/modtype:Trie/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : ('a <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:bin_t">
  <a href="index.html#/module:Std/modtype:Trie/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : 'a Core_kernel.Std.Bin_prot.Type_class.t <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:bin_read_t">
  <a href="index.html#/module:Std/modtype:Trie/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : 'a Core_kernel.Std.Bin_prot.Read.reader <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:__bin_read_t__">
  <a href="index.html#/module:Std/modtype:Trie/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : 'a Core_kernel.Std.Bin_prot.Read.reader <span class="rarr"><span>-&gt;</span></span> (int <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:bin_reader_t">
  <a href="index.html#/module:Std/modtype:Trie/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : 'a Core_kernel.Std.Bin_prot.Type_class.reader <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:bin_size_t">
  <a href="index.html#/module:Std/modtype:Trie/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : 'a Core_kernel.Std.Bin_prot.Size.sizer <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:bin_write_t">
  <a href="index.html#/module:Std/modtype:Trie/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : 'a Core_kernel.Std.Bin_prot.Write.writer <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Trie/val:bin_writer_t">
  <a href="index.html#/module:Std/modtype:Trie/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : 'a Core_kernel.Std.Bin_prot.Type_class.writer <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/modtype:Trie/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:functors">
  <a href="index.html#/module:Std/label:functors" class="anchor">#</a>
  
    <h2 class="section level_2">Functors</h2>
    
  </div>
  
        
      </div>
    
  <div class="region" id="/module:Std/module:Regular">
  <a href="index.html#/module:Std/module:Regular" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Regular : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>In order to implement <code>Regular</code> interface you need to provide a
minimum implementation <code>M</code></p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Regular/module:Make">
  <a href="index.html#/module:Std/module:Regular/module:Make" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Make : <span class="keyword">functor</span> (M : <span class="keyword">sig</span>
    <div class="sig">
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/type:t">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
      <div class="doc">
        
      <p>type t should be binable, sexpable and provide compare function</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Pretty_printer.S <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:hash">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:hash" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> hash : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:module_name">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:module_name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> module_name : string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:compare">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_t">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_read_t">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_size_t">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_write_t">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    ) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M">M</a>.<a href="index.html#/module:Std/module:Regular/module:Make/modarg:1:M/type:t">t</a></div>
      
      
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie">
  <a href="index.html#/module:Std/module:Trie" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Trie : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Constructs a trie</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Trie/modtype:Key">
  <a href="index.html#/module:Std/module:Trie/modtype:Key" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Key = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Key requirements.
Key is a sequence of tokens of the specified length.
It is better to use contiguous data structures, like
arrays as keys, otherwise you can end up with a slow
implementation (i.e., don't use lists or sequences as
keys, use strings, bitstrings, arrays, etc).</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/module:Trie/modtype:Key/type:t">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
      <div class="doc">
        
      <p>the type of key</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/type:token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> token
    
      <div class="doc">
        
      <p>type of token must implement bin_prot, be comparable and
sexpable</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:length">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:length" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> length : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p><code>length key</code> return the amount of tokens in a <code>key</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:nth_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:nth_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> nth_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a>
    
      <div class="doc">
        
      <p><code>nth_token key n</code> the <code>n</code>'th token of key. Should be O(1)</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:token_hash">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:token_hash" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> token_hash : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p><code>hash_token tok</code> efficient hash function for the <code>token</code> type.
If nothing efficient came to mind, just use <code>Hashtbl.hash</code>.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:token_of_sexp">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:token_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> token_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:sexp_of_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:sexp_of_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:compare_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:compare_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:bin_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:bin_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:bin_read_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:bin_read_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:__bin_read_token__">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:__bin_read_token__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_token__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:bin_reader_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:bin_reader_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:bin_size_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:bin_size_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:bin_write_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:bin_write_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/modtype:Key/val:bin_writer_token">
  <a href="index.html#/module:Std/module:Trie/modtype:Key/val:bin_writer_token" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_token : <a href="index.html#/module:Std/module:Trie/modtype:Key/type:token">token</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/module:Make">
  <a href="index.html#/module:Std/module:Trie/module:Make" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Make : <span class="keyword">functor</span> (Key : <a href="index.html#/module:Std/module:Trie/modtype:Key">Key</a>) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Trie/module:Make/modarg:1:Key">Key</a>.<a href="index.html#/module:Std/module:Trie/module:Make/modarg:1:Key/type:t">t</a></div>
      
      <div class="doc">
        
      <p>Create a trie for a given <code>Key</code></p>
      
        
      </div>
    
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Trie/module:String">
  <a href="index.html#/module:Std/module:Trie/module:String" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> String : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = string</div>
      
      <div class="doc">
        
      <p>Predefined trie with <code>String</code> as a <code>Key</code></p>
      
        
      </div>
    
      
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:basic_types">
  <a href="index.html#/module:Std/label:basic_types" class="anchor">#</a>
  
    <h2 class="section level_2">Main types</h2>
    
  </div>
  
        
      </div>
    
  <div class="region" id="/module:Std/type:word">
  <a href="index.html#/module:Std/type:word" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> word
    
      <div class="doc">
        
      <p>Type to represent machine word</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:addr">
  <a href="index.html#/module:Std/type:addr" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> addr = <a href="index.html#/module:Std/type:word">word</a>
    
      <div class="doc">
        
      <p>A synonym for <code>word</code>, that should be used for words
that are addresses</p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:size">
  <a href="index.html#/module:Std/label:size" class="anchor">#</a>
  
    <h2 class="section level_2">Size of operand</h2>
    
  </div>
  
        
      </div>
    
  <div class="region" id="/module:Std/module:Size">
  <a href="index.html#/module:Std/module:Size" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Size : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Type safe operand and register sizes.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Size/type:all">
  <a href="index.html#/module:Std/module:Size/type:all" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> all = [ <div class="cons">| `r8</div><div class="cons">| `r16</div><div class="cons">| `r32</div><div class="cons">| `r64</div> ]
    
      <div class="doc">
        
      <p>Defines possible sizes for operations operands</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:r64">
  <a href="index.html#/module:Std/module:Size/val:r64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r64 : <a href="index.html#/module:Std/module:Size/type:all">all</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:r32">
  <a href="index.html#/module:Std/module:Size/val:r32" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r32 : <a href="index.html#/module:Std/module:Size/type:all">all</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:r16">
  <a href="index.html#/module:Std/module:Size/val:r16" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r16 : <a href="index.html#/module:Std/module:Size/type:all">all</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:r8">
  <a href="index.html#/module:Std/module:Size/val:r8" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r8 : <a href="index.html#/module:Std/module:Size/type:all">all</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/module:Variants">
  <a href="index.html#/module:Std/module:Size/module:Variants" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Variants : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Size/module:Variants/val:r64">
  <a href="index.html#/module:Std/module:Size/module:Variants/val:r64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r64 : <a href="index.html#/module:Std/module:Size/type:all">all</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/module:Variants/val:r32">
  <a href="index.html#/module:Std/module:Size/module:Variants/val:r32" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r32 : <a href="index.html#/module:Std/module:Size/type:all">all</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/module:Variants/val:r16">
  <a href="index.html#/module:Std/module:Size/module:Variants/val:r16" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r16 : <a href="index.html#/module:Std/module:Size/type:all">all</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/module:Variants/val:r8">
  <a href="index.html#/module:Std/module:Size/module:Variants/val:r8" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r8 : <a href="index.html#/module:Std/module:Size/type:all">all</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/type:p">
  <a href="index.html#/module:Std/module:Size/type:p" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a p = 'a <span class="keyword">constraint</span> 'a = [&lt; <div class="cons">| <a href="index.html#/module:Std/module:Size/type:all">all</a></div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/type:t">
  <a href="index.html#/module:Std/module:Size/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/module:Size/type:all">all</a> <a href="index.html#/module:Std/module:Size/type:p">p</a>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h2 class="section level_2">Lifting from int</h2>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Size/val:of_int">
  <a href="index.html#/module:Std/module:Size/val:of_int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>of_int n</code> return <code>Ok `rn</code> if <code>`rn</code> exists, <code>Error</code>
otherwise.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:of_int_exn">
  <a href="index.html#/module:Std/module:Size/val:of_int_exn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int_exn : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:t">t</a>
    
      <div class="doc">
        
      <p><code>of_int_exn n</code> the same as <code>of_int</code>, but raises exception
instead of returning <code>Error</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:of_int_opt">
  <a href="index.html#/module:Std/module:Size/val:of_int_opt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int_opt : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:t">t</a> option
    
      <div class="doc">
        
      <p><code>of_int_opt n</code> the same as <code>of_int</code> but uses <code>option</code> type
instead of <code>Or_error.t</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:addr_of_int">
  <a href="index.html#/module:Std/module:Size/val:addr_of_int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_of_int : int <span class="rarr"><span>-&gt;</span></span> [ <div class="cons">| `r32</div><div class="cons">| `r64</div> ] Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>addr_of_int n</code> return <code>Ok `rn</code> if <code>`rn</code> exists, <code>Error</code>
otherwise.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:addr_of_int_exn">
  <a href="index.html#/module:Std/module:Size/val:addr_of_int_exn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_of_int_exn : int <span class="rarr"><span>-&gt;</span></span> [ <div class="cons">| `r32</div><div class="cons">| `r64</div> ]
    
      <div class="doc">
        
      <p><code>addr_of_int_exn n</code> the same as <code>addr_of_int</code>, but raises exception
instead of returning <code>Error</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:addr_of_int_opt">
  <a href="index.html#/module:Std/module:Size/val:addr_of_int_opt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_of_int_opt : int <span class="rarr"><span>-&gt;</span></span> [ <div class="cons">| `r32</div><div class="cons">| `r64</div> ] option
    
      <div class="doc">
        
      <p><code>addr_of_int_opt n</code> the same as <code>addr_of_int</code> but uses <code>option</code> type
instead of <code>Or_error.t</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:addr_of_word_size">
  <a href="index.html#/module:Std/module:Size/val:addr_of_word_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_of_word_size : Core_kernel.Std.Word_size.t <span class="rarr"><span>-&gt;</span></span> [ <div class="cons">| `r32</div><div class="cons">| `r64</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:word_of_addr_size">
  <a href="index.html#/module:Std/module:Size/val:word_of_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> word_of_addr_size : [ <div class="cons">| `r32</div><div class="cons">| `r64</div> ] <span class="rarr"><span>-&gt;</span></span> Core_kernel.Std.Word_size.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:to_addr_size">
  <a href="index.html#/module:Std/module:Size/val:to_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_addr_size : <a href="index.html#/module:Std/module:Size/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> [ <div class="cons">| `r32</div><div class="cons">| `r64</div> ] Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:to_bits">
  <a href="index.html#/module:Std/module:Size/val:to_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_bits : 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p><code>to_bits size</code> returns the number of bits.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:to_bytes">
  <a href="index.html#/module:Std/module:Size/val:to_bytes" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_bytes : 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Size/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Size/val:all_of_sexp">
  <a href="index.html#/module:Std/module:Size/val:all_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:all">all</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:__all_of_sexp__">
  <a href="index.html#/module:Std/module:Size/val:__all_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __all_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:all">all</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:sexp_of_all">
  <a href="index.html#/module:Std/module:Size/val:sexp_of_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_all : <a href="index.html#/module:Std/module:Size/type:all">all</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:compare_all">
  <a href="index.html#/module:Std/module:Size/val:compare_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_all : <a href="index.html#/module:Std/module:Size/type:all">all</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:all">all</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_all">
  <a href="index.html#/module:Std/module:Size/val:bin_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_all : <a href="index.html#/module:Std/module:Size/type:all">all</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_read_all">
  <a href="index.html#/module:Std/module:Size/val:bin_read_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_all : <a href="index.html#/module:Std/module:Size/type:all">all</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:__bin_read_all__">
  <a href="index.html#/module:Std/module:Size/val:__bin_read_all__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_all__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:all">all</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_reader_all">
  <a href="index.html#/module:Std/module:Size/val:bin_reader_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_all : <a href="index.html#/module:Std/module:Size/type:all">all</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_size_all">
  <a href="index.html#/module:Std/module:Size/val:bin_size_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_all : <a href="index.html#/module:Std/module:Size/type:all">all</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_write_all">
  <a href="index.html#/module:Std/module:Size/val:bin_write_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_all : <a href="index.html#/module:Std/module:Size/type:all">all</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_writer_all">
  <a href="index.html#/module:Std/module:Size/val:bin_writer_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_all : <a href="index.html#/module:Std/module:Size/type:all">all</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:p_of_sexp">
  <a href="index.html#/module:Std/module:Size/val:p_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> p_of_sexp : (Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> 'a) <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:sexp_of_p">
  <a href="index.html#/module:Std/module:Size/val:sexp_of_p" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_p : ('a <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:compare_p">
  <a href="index.html#/module:Std/module:Size/val:compare_p" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_p : ('a <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> int) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_p">
  <a href="index.html#/module:Std/module:Size/val:bin_p" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_p : 'a Core_kernel.Std.Bin_prot.Type_class.t <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_read_p">
  <a href="index.html#/module:Std/module:Size/val:bin_read_p" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_p : 'a Core_kernel.Std.Bin_prot.Read.reader <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:__bin_read_p__">
  <a href="index.html#/module:Std/module:Size/val:__bin_read_p__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_p__ : 'a Core_kernel.Std.Bin_prot.Read.reader <span class="rarr"><span>-&gt;</span></span> (int <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_reader_p">
  <a href="index.html#/module:Std/module:Size/val:bin_reader_p" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_p : 'a Core_kernel.Std.Bin_prot.Type_class.reader <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_size_p">
  <a href="index.html#/module:Std/module:Size/val:bin_size_p" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_p : 'a Core_kernel.Std.Bin_prot.Size.sizer <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_write_p">
  <a href="index.html#/module:Std/module:Size/val:bin_write_p" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_p : 'a Core_kernel.Std.Bin_prot.Write.writer <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_writer_p">
  <a href="index.html#/module:Std/module:Size/val:bin_writer_p" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_p : 'a Core_kernel.Std.Bin_prot.Type_class.writer <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Size/type:p">p</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Size/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Size/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Size/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:compare">
  <a href="index.html#/module:Std/module:Size/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Size/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_t">
  <a href="index.html#/module:Std/module:Size/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Size/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_read_t">
  <a href="index.html#/module:Std/module:Size/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Size/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Size/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Size/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Size/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Size/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_size_t">
  <a href="index.html#/module:Std/module:Size/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Size/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_write_t">
  <a href="index.html#/module:Std/module:Size/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Size/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Size/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Size/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Size/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:size">
  <a href="index.html#/module:Std/type:size" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> size = <a href="index.html#/module:Std/module:Size">Size</a>.<a href="index.html#/module:Std/module:Size/type:t">t</a>
    
      <div class="doc">
        
      <p>size of operand</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:addr_size">
  <a href="index.html#/module:Std/type:addr_size" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> addr_size = [ <div class="cons">| `r32</div><div class="cons">| `r64</div> ] <a href="index.html#/module:Std/module:Size">Size</a>.<a href="index.html#/module:Std/module:Size/type:p">p</a>
    
      <div class="doc">
        
      <p>size of address</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:nat1">
  <a href="index.html#/module:Std/type:nat1" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> nat1 = int
    
      <div class="doc">
        
      <p>just a fancy type abbreviation</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector">
  <a href="index.html#/module:Std/module:Bitvector" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Bitvector : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
  <div class="region" id="/module:Std/label:bitv">
  <a href="index.html#/module:Std/label:bitv" class="anchor">#</a>
  
    <h2 class="section level_2">Bitvector</h2>
    
  </div>
  
      <p>Bitvector -- a type for representing binary values.</p>
      <div class="region">
    <h3 class="section level_3">Overview</h3>
    </div>
      <p>A numeric value with a 2-complement binary representation. It is
good for representing addresses, offsets and other numeric values.</p>
      
      <p>Each value is attributed by a its bit-width. All arithmetic
operations over values are done modulo their widths. It is an
error to apply arithmetic operation to values with different
widths. Default implementations will raise a <code>Width</code> exception,
however there exists a family of modules that provide arithmetic
operations lifted to an <code>Or_error.t</code> monad. It is suggested to use
them, if you know what kind of operands you're expecting.</p>
      <div class="region">
    <h4 class="section level_4">Clarifications endianness and bit-ordering</h4>
    </div>
      <p>Bitvector should be considered as an number with an arbitrary
width. That means, that as with all numbers it is subject to
endianness. When we iterate over bitvector using some container
interface we always start from the byte with the lower
address. Depending on endianness it will be either least
significant bytes (little-endian), or most significant
(big-endian). Sometimes id does matter, sometimes it doesn't. In a
latter case you can just use a default native-endian
interface. But in a former case, please consider using explicit
modules, either <code>Bytes_LE</code> or <code>Bytes_BE</code>, even if you know that
your system is <code>LE</code>. Things change.</p>
      
      <p>Bits are always numbered from right to left, with least
significant bit having a zero index, and most significant having
index equal to <code>width - 1</code>. That means, they're endianness
agnostic.</p>
      <div class="region">
    <h4 class="section level_4">Clarification on size-morphism</h4>
    </div>
      <p>Size-monomorphic operations (as opposed to size-polymorphic
comparison) doesn't allow to compare two operands with different
sizes, and either raise exception or return <code>Error</code>. If we would
have type safe interface, with type <code>t</code> defined as <code>type 'a t</code>,
where <code>'a</code> stands for size, then size-monomorphic operations will
have type <code>'a t -&gt; 'a t -&gt; _</code>, and size-polymorphic <code>'a t -&gt; 'b t -&gt; _</code>.</p>
      
      <p>By default, size-polymorphic comparison is used (for rationale of
this decision look at the implementation of a hash function). To
understand the ordering relation one can think that a lexical
ordering is specified on a tuple <code>(x,n)</code>, where <code>x</code> is the number
and <code>n</code> is the size. For example, the following sequence is in an
ascending order:</p>
      <pre><code>0x0:1, 0x0:32, 0x0:64, 0x1:1, 0x1:32, 0xD:4, 0xDEADBEEF:32</code></pre>
      <p>.</p>
      
      <p>A size-monomorphic interfaced is exposed in a <code>Mono</code> submodule. So
if you want a monomorphic map, then just use <code>Mono.Map</code> module.
Note, <code>Mono</code> submodule doesn't provide <code>Table</code>, since we cannot
guarantee that all keys in a hash-table have equal size.</p>
      <div class="region">
    <h4 class="section level_4">Clarification on signs</h4>
    </div>
      <p>By default all numbers represented by a bitvector are considered
unsigned. This includes comparisons, e.g., <code>of_int (-1) ~width:32</code>
is greater than zero. If you need to perform signed operation, you
can use <code>signed</code> operator to temporary cast your value to signed.
We use temporary to emphasize that, the signedness property won't
propagate to the result of the operation, e.g. result of the
following expression: <code>Int_exn.(signed x / y)</code> will not be signed.</p>
      
      <p>If any operand of a binary operation is signed, then a signed
version of an operation is used.</p>
      
      <p>Remember to use explicit casts, whenever you really need a signed
representation. Examples:
</p>
      <pre><code>        let x = of_int ~-6 ~width:8
        let y = to_int x          (* y = 250 *)
        let z = to_int (signed x) (* z = ~-6 *)
        let zero = of_int 0 ~width:8
        let p = x &lt; zero          (* p = false *)
        let q = signed x &lt; zero   (* p = true *)</code></pre><div class="region">
    <h4 class="section level_4">Clarification on string representation</h4>
    </div>
      <p>As a part of <code>Identifiable</code> interface bitvector provides a pair of
complement functions: <code>to_string</code> and <code>of_string</code>, that provides
facilities to store bitvector as a human readable string, and to
restore it from string. The format of the representation is the
following (in EBNF):
</p>
      <pre><code>        repr  = [sign], base, digit, {digit}, &quot;:&quot;, size | true | false;
        sign  = &quot;+&quot; | &quot;-&quot;;
        base  = &quot;0x&quot; | &quot;0b&quot; | &quot;0o&quot;;
        size  = dec, {dec};
        digit = dec | oct | hex;
        dec   = ?decimal digit?;
        oct   = ?octal digit?;
        hex   = ?hexadecimal digit?;</code></pre>
      <p>Examples:
<code>0x5D:32, 0b0101:16, 5:64, +5:8, +0x5D:16, true, false.</code>.</p>
      
      <p>Form <code>false</code> is a shortcut for <code>0:1</code>, as well as <code>true</code> is <code>1:1</code>.</p>
      
      <p>If <code>base</code> is omitted base-10 is assumed. The output format is
lways <code>&quot;0x&quot;, hex, {hex}</code> in an unsigned form.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bitvector/type:t">
  <a href="index.html#/module:Std/module:Bitvector/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:word">word</a>
    
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Common Interfaces</h4>
    </div>
      <p>Bitvector is a value, first of all, so it supports a common set of
a value interface: it can be stored, compared, it can be a key in
a dictionary, etc. Moreover, being a number it can be compared
with zero and applied to a common set of integer operations.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Comparable.With_zero <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Integer">Integer</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> := <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Mono">
  <a href="index.html#/module:Std/module:Bitvector/module:Mono" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Mono : Core_kernel.Std.Comparable <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/module:Bitvector/type:t">t</a></div>
      
      <div class="doc">
        
      <p>A comparable interface with size-monomorphic comparison.</p>
      
        
      </div>
    
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/exn:Width">
  <a href="index.html#/module:Std/module:Bitvector/exn:Width" class="anchor">#</a>
  
  <div class="exn">
    <span class="keyword">exception</span> Width
    
      <div class="doc">
        
      <p><code>Width</code> exception is raised when size-monomorphic operation is
applied to operands with different sizes.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/type:endian">
  <a href="index.html#/module:Std/module:Bitvector/type:endian" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> endian = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bitvector/type:endian/cons:LittleEndian">
  <a href="index.html#/module:Std/module:Bitvector/type:endian/cons:LittleEndian" class="anchor">#</a>
  | LittleEndian
  </div>
  </td><td>(*</td><td class="doc">least significant byte comes first</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bitvector/type:endian/cons:BigEndian">
  <a href="index.html#/module:Std/module:Bitvector/type:endian/cons:BigEndian" class="anchor">#</a>
  | BigEndian
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
      <div class="doc">
        
      <p>Specifies the order of bytes in a word.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:of_string">
  <a href="index.html#/module:Std/module:Bitvector/val:of_string" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_string : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Constructors</h4>
    </div>
      <p>We provide several conversions from primitive data types.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:of_bool">
  <a href="index.html#/module:Std/module:Bitvector/val:of_bool" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_bool : bool <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:of_int">
  <a href="index.html#/module:Std/module:Bitvector/val:of_int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int : width:int <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:of_int32">
  <a href="index.html#/module:Std/module:Bitvector/val:of_int32" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int32 : ?width:int <span class="rarr"><span>-&gt;</span></span> int32 <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:of_int64">
  <a href="index.html#/module:Std/module:Bitvector/val:of_int64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int64 : ?width:int <span class="rarr"><span>-&gt;</span></span> int64 <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Some predefined constant constructors</h4>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Bitvector/val:b0">
  <a href="index.html#/module:Std/module:Bitvector/val:b0" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> b0 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>b0 = of_bool false</code> is a zero bit</p>
      
      <p><code>b1 = of_bool true</code> is a one bit</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:b1">
  <a href="index.html#/module:Std/module:Bitvector/val:b1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> b1 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Helpful shortcuts</h4>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Bitvector/val:one">
  <a href="index.html#/module:Std/module:Bitvector/val:one" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> one : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>one width</code> number one with a specified <code>width</code>, is a shortcut for
<code>of_int 1 ~width</code></p>
      
      <p><code>zero width</code> zero with a specified <code>width</code>, is a shortcut for
<code>of_int 0 ~width</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:zero">
  <a href="index.html#/module:Std/module:Bitvector/val:zero" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> zero : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:ones">
  <a href="index.html#/module:Std/module:Bitvector/val:ones" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ones : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>ones width</code> is a number with a specified <code>width</code>, and all bits
set to 1. It is a shortcut for <code>of_int (lnot 0) ~width</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:of_binary">
  <a href="index.html#/module:Std/module:Bitvector/val:of_binary" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_binary : ?width:int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>of_binary ?width endian num</code> creates a bitvector from a string
interpreted as a sequence of bytes in a specified order.</p>
      
      <p>The result is always positive.</p>
      
      <p><code>num</code> argument is copied</p>
      
      <p><code>width</code> defaults to <code>String.length num</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:to_int">
  <a href="index.html#/module:Std/module:Bitvector/val:to_int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_int : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int Core_kernel.Std.Or_error.t
    
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Conversions to integers</h4>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:to_int32">
  <a href="index.html#/module:Std/module:Bitvector/val:to_int32" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_int32 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int32 Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:to_int64">
  <a href="index.html#/module:Std/module:Bitvector/val:to_int64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_int64 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int64 Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:string_of_value">
  <a href="index.html#/module:Std/module:Bitvector/val:string_of_value" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> string_of_value : ?hex:bool <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:signed">
  <a href="index.html#/module:Std/module:Bitvector/val:signed" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> signed : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>signed t</code> casts t to a signed type, so that any operations
applied on <code>t</code> will be signed</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:is_zero">
  <a href="index.html#/module:Std/module:Bitvector/val:is_zero" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_zero : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_zero bv</code> is true iff all bits are set to zero.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:is_one">
  <a href="index.html#/module:Std/module:Bitvector/val:is_one" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_one : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_ones bv</code> is true if the least significant bit is equal to one</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:bitwidth">
  <a href="index.html#/module:Std/module:Bitvector/val:bitwidth" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bitwidth : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p><code>bitwidth bv</code> return a bit-width, i.e., the amount of bits</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:extract">
  <a href="index.html#/module:Std/module:Bitvector/val:extract" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> extract : ?hi:int <span class="rarr"><span>-&gt;</span></span> ?lo:int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>extract bv ~hi ~lo</code> extracts a subvector from <code>bv</code>, starting
from bit <code>hi</code> and ending with <code>lo</code>. Bits are enumerated from
right to left (from least significant to most), starting from
zero. <code>hi</code> maybe greater then <code>size</code>.</p>
      
      <p><code>hi</code> defaults to <code>width bv - 1</code>
<code>lo</code> defaults to <code>0</code>.</p>
      
      <p>Example:</p>
      
      <p><code>extract (of_int 17 ~width:8) ~hi:4 ~lo:3</code>
will result in a two bit vector consisting of the forth and
third bits, i.e., equal to a number <code>2</code>.</p>
      
      <p><code>lo</code> and <code>hi</code> should be non-negative numbers. <code>lo</code> must be less
then a <code>width bv</code> and <code>hi &gt;= lo</code>.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:extract_exn">
  <a href="index.html#/module:Std/module:Bitvector/val:extract_exn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> extract_exn : ?hi:int <span class="rarr"><span>-&gt;</span></span> ?lo:int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>extract_exn bv ~hi ~lo</code> is the same as <code>extract</code>, but will raise
an exception on error.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:concat">
  <a href="index.html#/module:Std/module:Bitvector/val:concat" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> concat : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>concat b1 b2</code> concatenates two bitvectors</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:(@.)">
  <a href="index.html#/module:Std/module:Bitvector/val:(@.)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (@.) : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>b1 @. b2</code> is <code>concat b1 b2</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:succ">
  <a href="index.html#/module:Std/module:Bitvector/val:succ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> succ : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>succ n</code> returns next value after <code>n</code>. Of course it is not
guaranteed that <code>succ n &gt; n</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:pred">
  <a href="index.html#/module:Std/module:Bitvector/val:pred" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pred : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>pred n</code> returns a value preceding <code>n</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:nsucc">
  <a href="index.html#/module:Std/module:Bitvector/val:nsucc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> nsucc : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>nsucc m n</code> is <code>Fn.apply_n_times ~n succ m</code>, but more
efficient.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:npred">
  <a href="index.html#/module:Std/module:Bitvector/val:npred" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> npred : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>npred m n</code> is <code>Fn.apply_n_times ~n pred addr</code>, but more
efficient.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:(++)">
  <a href="index.html#/module:Std/module:Bitvector/val:(%2B%2B)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (++) : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>a ++ n</code> is <code>nsucc a n</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:(--)">
  <a href="index.html#/module:Std/module:Bitvector/val:(--)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (--) : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a>
    
      <div class="doc">
        
      <p><code>a -- n</code> is <code>npred a n</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Iteration over bitvector components</h4>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Bitvector/val:to_bytes">
  <a href="index.html#/module:Std/module:Bitvector/val:to_bytes" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_bytes : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Sequence.t
    
      <div class="doc">
        
      <p><code>to_bytes x order</code> returns bytes of <code>x</code> in a specified <code>order</code>.
Each byte is represented as a <code>bitvector</code> itself.</p>
      
      <p><code>to_bytes x order</code> returns bytes of <code>x</code> in a specified <code>order</code>,
with bytes represented by <code>char</code> type</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:to_chars">
  <a href="index.html#/module:Std/module:Bitvector/val:to_chars" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_chars : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> char Core_kernel.Std.Sequence.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:to_bits">
  <a href="index.html#/module:Std/module:Bitvector/val:to_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_bits : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> bool Core_kernel.Std.Sequence.t
    
      <div class="doc">
        
      <p><code>to_bits x order</code> returns bits of <code>x</code> in a specified <code>order</code>.
<code>order</code> defines only the ordering of words in a bitvector, bits
will always be in MSB first order.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Int_err : <span class="keyword">sig</span></div>
      
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Arithmetic raised into <code>Or_error</code> monad</h4>
    </div>
      <p>All binary integer operations are only well defined on operands
with equal sizes.</p>
      
      <p>Module <code>Int</code> provides a set of integer operations that do not
raise exceptions, but return values raised to an Or_error
monad.</p>
      
      <p>Example:</p>
      
      <p><code>Z.(i16 v1 + i16 v2 / int 16 v3)</code>,</p>
      
      <p>or just:</p>
      
      <p><code>Z.(!$v1 + !$v2 / !$v3)</code>.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:(!$)">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:(!$)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (!$) : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>!$v</code> lifts <code>v</code> to an Or_error monad. It is, essentially, the
same as <code>Ok v</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:i1">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:i1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> i1 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p>The following lifter will check that their operand has a
corresponding width.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:i4">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:i4" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> i4 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:i8">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:i8" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> i8 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:i16">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:i16" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> i16 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:i32">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:i32" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> i32 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:i64">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:i64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> i64 : <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:int">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> int : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>int w v</code> will be <code>Ok</code> if <code>v</code> has width <code>w</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_err/val:of_word_size">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_err/val:of_word_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_word_size : Core_kernel.Std.Word_size.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>of_word_size w</code> creates a lifter for a specified word size
<code>w</code>, i.e. either <code>i64</code> or <code>i32</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Integer">Integer</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> = <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> Core_kernel.Std.Or_error.t 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Monad.Infix <span class="keyword">with</span> <span class="keyword">type</span> 'a t := 'a Core_kernel.Std.Or_error.t 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Int_exn">
  <a href="index.html#/module:Std/module:Bitvector/module:Int_exn" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Int_exn : <a href="index.html#/module:Std/modtype:Integer">Integer</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Integer/type:t">t</a> = <a href="index.html#/module:Std/module:Bitvector/type:t">t</a></div>
      
      <div class="doc">
        
      <p>Arithmetics that raise exceptions.</p>
      
      <p>This module exposes a common integer interface with
operations not lifted into <code>Or_error</code> monad, but raising
<code>Width</code> exception if operands sizes mismatch.</p>
      
        
      </div>
    
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Trie">
  <a href="index.html#/module:Std/module:Bitvector/module:Trie" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Trie : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Prefix trees for bitvectors.</p>
      
      <p>Bitvector comes with 4 predefined prefix trees:</p>
      <ul><li><code>Trie.Big.Bits</code> - big endian prefix tree, where each
token is a bit, and bitvector is tokenized from msb to lsb.</li></ul><ul><li><code>Trie.Big.Byte</code> - big endian prefix tree, where each token
is a byte, and bitvector is tokenized from most significant
byte to less significant</li></ul><ul><li><code>Trie.Little.Bits</code> - is a little endian bit tree.</li></ul><ul><li><code>Trie.Little.Byte</code> - is a little endian byte tree.</li></ul>
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bitvector/module:Trie/module:Big">
  <a href="index.html#/module:Std/module:Bitvector/module:Trie/module:Big" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Big : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bitvector/module:Trie/module:Big/module:Bits">
  <a href="index.html#/module:Std/module:Bitvector/module:Trie/module:Big/module:Bits" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Bits : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Bitvector/type:t">t</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Trie/module:Big/module:Bytes">
  <a href="index.html#/module:Std/module:Bitvector/module:Trie/module:Big/module:Bytes" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Bytes : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Bitvector/type:t">t</a></div>
      
      
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Trie/module:Little">
  <a href="index.html#/module:Std/module:Bitvector/module:Trie/module:Little" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Little : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bitvector/module:Trie/module:Little/module:Bits">
  <a href="index.html#/module:Std/module:Bitvector/module:Trie/module:Little/module:Bits" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Bits : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Bitvector/type:t">t</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/module:Trie/module:Little/module:Bytes">
  <a href="index.html#/module:Std/module:Bitvector/module:Trie/module:Little/module:Bytes" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Bytes : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Bitvector/type:t">t</a></div>
      
      
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:endian_of_sexp">
  <a href="index.html#/module:Std/module:Bitvector/val:endian_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> endian_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:sexp_of_endian">
  <a href="index.html#/module:Std/module:Bitvector/val:sexp_of_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_endian : <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:compare_endian">
  <a href="index.html#/module:Std/module:Bitvector/val:compare_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_endian : <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:bin_endian">
  <a href="index.html#/module:Std/module:Bitvector/val:bin_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_endian : <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:bin_read_endian">
  <a href="index.html#/module:Std/module:Bitvector/val:bin_read_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_endian : <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:__bin_read_endian__">
  <a href="index.html#/module:Std/module:Bitvector/val:__bin_read_endian__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_endian__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:bin_reader_endian">
  <a href="index.html#/module:Std/module:Bitvector/val:bin_reader_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_endian : <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:bin_size_endian">
  <a href="index.html#/module:Std/module:Bitvector/val:bin_size_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_endian : <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:bin_write_endian">
  <a href="index.html#/module:Std/module:Bitvector/val:bin_write_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_endian : <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bitvector/val:bin_writer_endian">
  <a href="index.html#/module:Std/module:Bitvector/val:bin_writer_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_endian : <a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:endian">
  <a href="index.html#/module:Std/type:endian" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> endian = <a href="index.html#/module:Std/module:Bitvector">Bitvector</a>.<a href="index.html#/module:Std/module:Bitvector/type:endian">endian</a> = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/type:endian/cons:LittleEndian">
  <a href="index.html#/module:Std/type:endian/cons:LittleEndian" class="anchor">#</a>
  | LittleEndian
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/type:endian/cons:BigEndian">
  <a href="index.html#/module:Std/type:endian/cons:BigEndian" class="anchor">#</a>
  | BigEndian
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
      <div class="doc">
        
      <p>Expose <code>endian</code> constructors to <code>Bap.Std</code> namespace</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Word">
  <a href="index.html#/module:Std/module:Word" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Word : <span class="keyword">module type of</span> <a href="index.html#/module:Std/module:Bitvector">Bitvector</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> = <a href="index.html#/module:Std/type:word">word</a></div>
      
      <div class="doc">
        
      <p>Shortcut for bitvectors that represents words</p>
      
        
      </div>
    
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Addr">
  <a href="index.html#/module:Std/module:Addr" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Addr : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Shortcut for bitvectors that represents addresses</p>
      
        
      </div>
    
      
    <div class="sig">
    <div class="include">
    <span class="keyword">include</span> <span class="keyword">module type of</span> <a href="index.html#/module:Std/module:Bitvector">Bitvector</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Bitvector/type:t">t</a> = <a href="index.html#/module:Std/type:addr">addr</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Addr/val:memref">
  <a href="index.html#/module:Std/module:Addr/val:memref" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> memref : ?disp:int <span class="rarr"><span>-&gt;</span></span> ?index:int <span class="rarr"><span>-&gt;</span></span> ?scale:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:bil">
  <a href="index.html#/module:Std/label:bil" class="anchor">#</a>
  
    <h2 class="section level_2">BIL</h2>
    
  </div>
  
        
      </div>
    
      <div class="doc">
        
  <div class="region" id="/module:Std/label:bil_type">
  <a href="index.html#/module:Std/label:bil_type" class="anchor">#</a>
  
    <h3 class="section level_3">BIL type system</h3>
    
  </div>
  
        
      </div>
    
  <div class="region" id="/module:Std/module:Type">
  <a href="index.html#/module:Std/module:Type" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Type : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>The type of a BIL expression.
Each BIL expression, should evaluate to one the following types.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Type/type:t">
  <a href="index.html#/module:Std/module:Type/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Type/type:t/cons:Imm">
  <a href="index.html#/module:Std/module:Type/type:t/cons:Imm" class="anchor">#</a>
  | Imm <span class="keyword">of</span> <a href="index.html#/module:Std/type:nat1">nat1</a>
  </div>
  </td><td>(*</td><td class="doc"><code>Mem (a,t)</code> memory with a specifed addr_size</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Type/type:t/cons:Mem">
  <a href="index.html#/module:Std/module:Type/type:t/cons:Mem" class="anchor">#</a>
  | Mem <span class="keyword">of</span> <a href="index.html#/module:Std/type:addr_size">addr_size</a> * <a href="index.html#/module:Std/type:size">size</a>
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
      <div class="doc">
        
      <p>type is either an immediate value of memory reference</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:mem">
  <a href="index.html#/module:Std/module:Type/val:mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mem : <a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:imm">
  <a href="index.html#/module:Std/module:Type/val:imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> imm : <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/module:Variants">
  <a href="index.html#/module:Std/module:Type/module:Variants" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Variants : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Type/module:Variants/val:mem">
  <a href="index.html#/module:Std/module:Type/module:Variants/val:mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mem : (<a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/module:Variants/val:imm">
  <a href="index.html#/module:Std/module:Type/module:Variants/val:imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> imm : (<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/module:Variants/val:fold">
  <a href="index.html#/module:Std/module:Type/module:Variants/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> imm:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> mem:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/module:Variants/val:iter">
  <a href="index.html#/module:Std/module:Type/module:Variants/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : imm:((<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> mem:((<a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/module:Variants/val:map">
  <a href="index.html#/module:Std/module:Type/module:Variants/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : <a href="index.html#/module:Std/module:Type/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> imm:((<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> mem:((<a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> 'result__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/module:Variants/val:descriptions">
  <a href="index.html#/module:Std/module:Type/module:Variants/val:descriptions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> descriptions : (string * int) list
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Type/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Type/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Type/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Type/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Type/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:compare">
  <a href="index.html#/module:Std/module:Type/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Type/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:bin_t">
  <a href="index.html#/module:Std/module:Type/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Type/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:bin_read_t">
  <a href="index.html#/module:Std/module:Type/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Type/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Type/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Type/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Type/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Type/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:bin_size_t">
  <a href="index.html#/module:Std/module:Type/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Type/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:bin_write_t">
  <a href="index.html#/module:Std/module:Type/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Type/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Type/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Type/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Type/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:typ">
  <a href="index.html#/module:Std/type:typ" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> typ = <a href="index.html#/module:Std/module:Type">Type</a>.<a href="index.html#/module:Std/module:Type/type:t">t</a>
    
      <div class="doc">
        
      <p>short abbreviation for a type</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bool_t">
  <a href="index.html#/module:Std/val:bool_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bool_t : <a href="index.html#/module:Std/type:typ">typ</a>
    
      <div class="doc">
        
  <div class="region" id="/module:Std/label:type_cons">
  <a href="index.html#/module:Std/label:type_cons" class="anchor">#</a>
  
    <h3 class="section level_3">Predefined type constructors</h3>
    
  </div>
  
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:reg8_t">
  <a href="index.html#/module:Std/val:reg8_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> reg8_t : <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:reg16_t">
  <a href="index.html#/module:Std/val:reg16_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> reg16_t : <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:reg32_t">
  <a href="index.html#/module:Std/val:reg32_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> reg32_t : <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:reg64_t">
  <a href="index.html#/module:Std/val:reg64_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> reg64_t : <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:reg128_t">
  <a href="index.html#/module:Std/val:reg128_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> reg128_t : <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:reg256_t">
  <a href="index.html#/module:Std/val:reg256_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> reg256_t : <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:mem32_t">
  <a href="index.html#/module:Std/val:mem32_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mem32_t : <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:mem64_t">
  <a href="index.html#/module:Std/val:mem64_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mem64_t : <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:bil_var">
  <a href="index.html#/module:Std/label:bil_var" class="anchor">#</a>
  
    <h3 class="section level_3">BIL variables</h3>
    
  </div>
  
      <p>BIL variables are regular values. Every call to <code>create</code> will
create a fresh variable.</p>
      
        
      </div>
    
  <div class="region" id="/module:Std/type:var">
  <a href="index.html#/module:Std/type:var" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> var
    
      <div class="doc">
        
      <p>bil variable</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Var">
  <a href="index.html#/module:Std/module:Var" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Var : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>BIL variable</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Var/type:t">
  <a href="index.html#/module:Std/module:Var/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Var/type:t">t</a> 
    </div>
  
      <div class="doc">
        
      <p><code>create ?tmp name typ</code> creates a fresh new variable with
assosiated <code>name</code> and type <code>typ</code>. The created variable is
absolutely new, and is comparable to true only with itself.</p>
      
        
  <div class="tag param">
    <span class="label">tmp</span> designates variable is temporary, with whatever
meaning assosiated to it by a caller.
  </div>
  
      </div>
    
  <div class="region" id="/module:Std/module:Var/val:create">
  <a href="index.html#/module:Std/module:Var/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : ?tmp:bool <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Var/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Var/val:name">
  <a href="index.html#/module:Std/module:Var/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Var/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p><code>name var</code> returns a name assosiated with variable</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Var/val:typ">
  <a href="index.html#/module:Std/module:Var/val:typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> typ : <a href="index.html#/module:Std/module:Var/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a>
    
      <div class="doc">
        
      <p><code>typ var</code> returns a type assosiated with variable</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Var/val:is_tmp">
  <a href="index.html#/module:Std/module:Var/val:is_tmp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_tmp : <a href="index.html#/module:Std/module:Var/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_tmp</code> true if variable is temporary</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Var/module:V1">
  <a href="index.html#/module:Std/module:Var/module:V1" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> V1 : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Var/module:V1/type:r">
  <a href="index.html#/module:Std/module:Var/module:V1/type:r" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> r = string * int * <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Var/module:V1/val:serialize">
  <a href="index.html#/module:Std/module:Var/module:V1/val:serialize" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> serialize : <a href="index.html#/module:Std/module:Var/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Var/module:V1/type:r">r</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Var/module:V1/val:deserialize">
  <a href="index.html#/module:Std/module:Var/module:V1/val:deserialize" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> deserialize : <a href="index.html#/module:Std/module:Var/module:V1/type:r">r</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Var/type:t">t</a>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil">
  <a href="index.html#/module:Std/module:Bil" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Bil : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
  <div class="region" id="/module:Std/label:bil_main">
  <a href="index.html#/module:Std/label:bil_main" class="anchor">#</a>
  
    <h3 class="section level_3">Main BIL module</h3>
    
  </div>
  
      <p>This module defines BIL language and is useful to write BIL
programs and expressions.</p>
      
      <p>Example: </p>
      <pre><code>Bil.([
          v := exp_of_op src lsr int32 1;
          r := exp_of_op src;
          s := int32 31;
          while_ (var v &lt;&gt; int32 0) [
            r := var r lsl int32 1;
            r := var r lor (var v land int32 1);
            v := var v lsr int32 1;
            s := var s - int32 1;
          ];
          dest := var r lsl var s;
        ]) cond</code></pre>
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bil/module:Types">
  <a href="index.html#/module:Std/module:Bil/module:Types" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Types : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bil/module:Types/type:cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:cast" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> cast = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:cast/cons:UNSIGNED">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:cast/cons:UNSIGNED" class="anchor">#</a>
  | UNSIGNED
  </div>
  </td><td>(*</td><td class="doc">0-padding widening cast.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:cast/cons:SIGNED">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:cast/cons:SIGNED" class="anchor">#</a>
  | SIGNED
  </div>
  </td><td>(*</td><td class="doc">Sign-extending widening cast.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:cast/cons:HIGH">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:cast/cons:HIGH" class="anchor">#</a>
  | HIGH
  </div>
  </td><td>(*</td><td class="doc">Narrowning cast. Keeps the high bits.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:cast/cons:LOW">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:cast/cons:LOW" class="anchor">#</a>
  | LOW
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
      <div class="doc">
        
      <p>Different forms of casting</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> binop = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:PLUS">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:PLUS" class="anchor">#</a>
  | PLUS
  </div>
  </td><td>(*</td><td class="doc">Integer addition. (commutative, associative)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:MINUS">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:MINUS" class="anchor">#</a>
  | MINUS
  </div>
  </td><td>(*</td><td class="doc">Subtract second integer from first.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:TIMES">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:TIMES" class="anchor">#</a>
  | TIMES
  </div>
  </td><td>(*</td><td class="doc">Integer multiplication. (commutative, associative)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:DIVIDE">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:DIVIDE" class="anchor">#</a>
  | DIVIDE
  </div>
  </td><td>(*</td><td class="doc">Unsigned integer division.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:SDIVIDE">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:SDIVIDE" class="anchor">#</a>
  | SDIVIDE
  </div>
  </td><td>(*</td><td class="doc">Signed integer division.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:MOD">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:MOD" class="anchor">#</a>
  | MOD
  </div>
  </td><td>(*</td><td class="doc">Unsigned modulus.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:SMOD">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:SMOD" class="anchor">#</a>
  | SMOD
  </div>
  </td><td>(*</td><td class="doc">Signed modulus.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:LSHIFT">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:LSHIFT" class="anchor">#</a>
  | LSHIFT
  </div>
  </td><td>(*</td><td class="doc">Left shift.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:RSHIFT">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:RSHIFT" class="anchor">#</a>
  | RSHIFT
  </div>
  </td><td>(*</td><td class="doc">Right shift, fill with 0.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:ARSHIFT">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:ARSHIFT" class="anchor">#</a>
  | ARSHIFT
  </div>
  </td><td>(*</td><td class="doc">Right shift, sign extend.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:AND">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:AND" class="anchor">#</a>
  | AND
  </div>
  </td><td>(*</td><td class="doc">Bitwise and. (commutative, associative)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:OR">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:OR" class="anchor">#</a>
  | OR
  </div>
  </td><td>(*</td><td class="doc">Bitwise or. (commutative, associative)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:XOR">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:XOR" class="anchor">#</a>
  | XOR
  </div>
  </td><td>(*</td><td class="doc">Bitwise xor. (commutative, associative)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:EQ">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:EQ" class="anchor">#</a>
  | EQ
  </div>
  </td><td>(*</td><td class="doc">Equals. (commutative) (associative on booleans)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:NEQ">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:NEQ" class="anchor">#</a>
  | NEQ
  </div>
  </td><td>(*</td><td class="doc">Not equals. (commutative) (associative on booleans)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:LT">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:LT" class="anchor">#</a>
  | LT
  </div>
  </td><td>(*</td><td class="doc">Unsigned less than.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:LE">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:LE" class="anchor">#</a>
  | LE
  </div>
  </td><td>(*</td><td class="doc">Unsigned less than or equal to.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:SLT">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:SLT" class="anchor">#</a>
  | SLT
  </div>
  </td><td>(*</td><td class="doc">Signed less than.</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:binop/cons:SLE">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:binop/cons:SLE" class="anchor">#</a>
  | SLE
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
      <div class="doc">
        
      <p>Binary operations implemented in the IR</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/type:unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:unop" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> unop = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:unop/cons:NEG">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:unop/cons:NEG" class="anchor">#</a>
  | NEG
  </div>
  </td><td>(*</td><td class="doc">Negate. (2's complement)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:unop/cons:NOT">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:unop/cons:NOT" class="anchor">#</a>
  | NOT
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
      <div class="doc">
        
      <p>Unary operations implemented in the IR</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> exp = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Load">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Load" class="anchor">#</a>
  | Load <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/type:endian">endian</a> * <a href="index.html#/module:Std/type:size">size</a>
  </div>
  </td><td>(*</td><td class="doc">Store (mem, idx, val, endian, size)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Store">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Store" class="anchor">#</a>
  | Store <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/type:endian">endian</a> * <a href="index.html#/module:Std/type:size">size</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:BinOp">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:BinOp" class="anchor">#</a>
  | BinOp <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:UnOp">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:UnOp" class="anchor">#</a>
  | UnOp <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Var">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Var" class="anchor">#</a>
  | Var <span class="keyword">of</span> <a href="index.html#/module:Std/type:var">var</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Int">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Int" class="anchor">#</a>
  | Int <span class="keyword">of</span> <a href="index.html#/module:Std/type:word">word</a>
  </div>
  </td><td>(*</td><td class="doc">Cast to a new type</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Cast" class="anchor">#</a>
  | Cast <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> * <a href="index.html#/module:Std/type:nat1">nat1</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Let">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Let" class="anchor">#</a>
  | Let <span class="keyword">of</span> <a href="index.html#/module:Std/type:var">var</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Unknown">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Unknown" class="anchor">#</a>
  | Unknown <span class="keyword">of</span> string * <a href="index.html#/module:Std/type:typ">typ</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Ite">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Ite" class="anchor">#</a>
  | Ite <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td>(*</td><td class="doc">Extract hbits to lbits of e (Reg type)</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Extract">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Extract" class="anchor">#</a>
  | Extract <span class="keyword">of</span> <a href="index.html#/module:Std/type:nat1">nat1</a> * <a href="index.html#/module:Std/type:nat1">nat1</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td>(*</td><td class="doc">Concat two reg expressions together</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:exp/cons:Concat">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:exp/cons:Concat" class="anchor">#</a>
  | Concat <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/type:stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> stmt = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:stmt/cons:Move">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt/cons:Move" class="anchor">#</a>
  | Move <span class="keyword">of</span> <a href="index.html#/module:Std/type:var">var</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td>(*</td><td class="doc">Jump to a address</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:stmt/cons:Jmp">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt/cons:Jmp" class="anchor">#</a>
  | Jmp <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
  </div>
  </td><td>(*</td><td class="doc">Statement with semantics not expressible in BIL</td><td>*)</td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:stmt/cons:Special">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt/cons:Special" class="anchor">#</a>
  | Special <span class="keyword">of</span> string
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:stmt/cons:While">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt/cons:While" class="anchor">#</a>
  | While <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> list
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:stmt/cons:If">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt/cons:If" class="anchor">#</a>
  | If <span class="keyword">of</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> list * <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> list
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Bil/module:Types/type:stmt/cons:CpuExn">
  <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt/cons:CpuExn" class="anchor">#</a>
  | CpuExn <span class="keyword">of</span> int
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:cast_of_sexp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:cast_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> cast_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:sexp_of_cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:sexp_of_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_cast : <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:compare_cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:compare_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_cast : <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_cast : <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_read_cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_read_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_cast : <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:__bin_read_cast__">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:__bin_read_cast__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_cast__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_reader_cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_reader_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_cast : <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_size_cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_size_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_cast : <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_write_cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_write_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_cast : <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_writer_cast">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_writer_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_cast : <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:binop_of_sexp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:binop_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> binop_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:sexp_of_binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:sexp_of_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_binop : <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:compare_binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:compare_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_binop : <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_binop : <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_read_binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_read_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_binop : <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:__bin_read_binop__">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:__bin_read_binop__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_binop__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_reader_binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_reader_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_binop : <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_size_binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_size_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_binop : <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_write_binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_write_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_binop : <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_writer_binop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_writer_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_binop : <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:unop_of_sexp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:unop_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unop_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:sexp_of_unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:sexp_of_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_unop : <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:compare_unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:compare_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_unop : <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_unop : <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_read_unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_read_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_unop : <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:__bin_read_unop__">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:__bin_read_unop__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_unop__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_reader_unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_reader_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_unop : <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_size_unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_size_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_unop : <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_write_unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_write_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_unop : <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_writer_unop">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_writer_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_unop : <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:exp_of_sexp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:exp_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exp_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:sexp_of_exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:sexp_of_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_exp : <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:compare_exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:compare_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_exp : <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_exp : <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_read_exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_read_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_exp : <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:__bin_read_exp__">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:__bin_read_exp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_exp__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_reader_exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_reader_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_exp : <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_size_exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_size_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_exp : <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_write_exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_write_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_exp : <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_writer_exp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_writer_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_exp : <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:stmt_of_sexp">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:stmt_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> stmt_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:sexp_of_stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:sexp_of_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_stmt : <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:compare_stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:compare_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_stmt : <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_stmt : <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_read_stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_read_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_stmt : <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:__bin_read_stmt__">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:__bin_read_stmt__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_stmt__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_reader_stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_reader_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_stmt : <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_size_stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_size_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_stmt : <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_write_stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_write_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_stmt : <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Types/val:bin_writer_stmt">
  <a href="index.html#/module:Std/module:Bil/module:Types/val:bin_writer_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_stmt : <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <span class="keyword">module type of</span> <a href="index.html#/module:Std/module:Bil/module:Types">Types</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> = <a href="index.html#/module:Std/module:Bil/module:Types">Types</a>.<a href="index.html#/module:Std/module:Bil/module:Types/type:cast">cast</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> = <a href="index.html#/module:Std/module:Bil/module:Types">Types</a>.<a href="index.html#/module:Std/module:Bil/module:Types/type:binop">binop</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> = <a href="index.html#/module:Std/module:Bil/module:Types">Types</a>.<a href="index.html#/module:Std/module:Bil/module:Types/type:unop">unop</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> = <a href="index.html#/module:Std/module:Bil/module:Types">Types</a>.<a href="index.html#/module:Std/module:Bil/module:Types/type:exp">exp</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> = <a href="index.html#/module:Std/module:Bil/module:Types">Types</a>.<a href="index.html#/module:Std/module:Bil/module:Types/type:stmt">stmt</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Bil/type:t">
  <a href="index.html#/module:Std/module:Bil/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Printable">Printable</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> := <a href="index.html#/module:Std/module:Bil/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix">
  <a href="index.html#/module:Std/module:Bil/module:Infix" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Infix : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Infix operators</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(:=)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(:=)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (:=) : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(+)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%2B)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (+) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
      <div class="doc">
        <div class="region">
    <h5 class="section level_5">Arithmetic operations</h5>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(-)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(-)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (-) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(*)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(*)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (*) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(/)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(/)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (/) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(/$)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(/$)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (/$) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:mod">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:mod" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mod : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(%$)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%25$)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (%$) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:lsl">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:lsl" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lsl : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
      <div class="doc">
        <div class="region">
    <h5 class="section level_5">Bit operations</h5>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:lsr">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:lsr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lsr : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:asr">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:asr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> asr : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:land">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:land" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> land : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:lor">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:lor" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lor : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:lxor">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:lxor" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lxor : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:lnot">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:lnot" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lnot : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(=)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(=)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (=) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
      <div class="doc">
        <div class="region">
    <h5 class="section level_5">Equality tests</h5>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&lt;&gt;)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3C%3E)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&lt;&gt;) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&lt;)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3C)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&lt;) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&gt;)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3E)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&gt;) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&lt;=)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3C=)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&lt;=) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&gt;=)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3E=)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&gt;=) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&lt;$)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3C$)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&lt;$) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&gt;$)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3E$)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&gt;$) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&lt;=$)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3C=$)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&lt;=$) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(&gt;=$)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%3E=$)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (&gt;=$) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h5 class="section level_5">Misc operations</h5>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Bil/module:Infix/val:(^)">
  <a href="index.html#/module:Std/module:Bil/module:Infix/val:(%5E)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (^) : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
      <div class="doc">
        
      <p><code>a ^ b</code> contatenate <code>a</code> and <code>b</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <span class="keyword">module type of</span> <a href="index.html#/module:Std/module:Bil/module:Infix">Infix</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Bil/val:move">
  <a href="index.html#/module:Std/module:Bil/val:move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> move : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a>
    
      <div class="doc">
        <div class="region">
    <h5 class="section level_5">Functional constructors</h5>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:jmp">
  <a href="index.html#/module:Std/module:Bil/val:jmp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> jmp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:special">
  <a href="index.html#/module:Std/module:Bil/val:special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> special : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:while_">
  <a href="index.html#/module:Std/module:Bil/val:while_" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> while_ : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:if_">
  <a href="index.html#/module:Std/module:Bil/val:if_" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> if_ : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:cpuexn">
  <a href="index.html#/module:Std/module:Bil/val:cpuexn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> cpuexn : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:unsigned">
  <a href="index.html#/module:Std/module:Bil/val:unsigned" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unsigned : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:signed">
  <a href="index.html#/module:Std/module:Bil/val:signed" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> signed : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:high">
  <a href="index.html#/module:Std/module:Bil/val:high" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> high : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:low">
  <a href="index.html#/module:Std/module:Bil/val:low" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> low : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:plus">
  <a href="index.html#/module:Std/module:Bil/val:plus" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> plus : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:minus">
  <a href="index.html#/module:Std/module:Bil/val:minus" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> minus : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:times">
  <a href="index.html#/module:Std/module:Bil/val:times" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> times : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:divide">
  <a href="index.html#/module:Std/module:Bil/val:divide" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> divide : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:sdivide">
  <a href="index.html#/module:Std/module:Bil/val:sdivide" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sdivide : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:modulo">
  <a href="index.html#/module:Std/module:Bil/val:modulo" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> modulo : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:smodulo">
  <a href="index.html#/module:Std/module:Bil/val:smodulo" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> smodulo : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:lshift">
  <a href="index.html#/module:Std/module:Bil/val:lshift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lshift : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:rshift">
  <a href="index.html#/module:Std/module:Bil/val:rshift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rshift : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:arshift">
  <a href="index.html#/module:Std/module:Bil/val:arshift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> arshift : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bit_and">
  <a href="index.html#/module:Std/module:Bil/val:bit_and" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bit_and : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bit_or">
  <a href="index.html#/module:Std/module:Bil/val:bit_or" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bit_or : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bit_xor">
  <a href="index.html#/module:Std/module:Bil/val:bit_xor" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bit_xor : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:eq">
  <a href="index.html#/module:Std/module:Bil/val:eq" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> eq : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:neq">
  <a href="index.html#/module:Std/module:Bil/val:neq" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> neq : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:lt">
  <a href="index.html#/module:Std/module:Bil/val:lt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lt : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:le">
  <a href="index.html#/module:Std/module:Bil/val:le" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> le : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:slt">
  <a href="index.html#/module:Std/module:Bil/val:slt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> slt : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:sle">
  <a href="index.html#/module:Std/module:Bil/val:sle" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sle : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:neg">
  <a href="index.html#/module:Std/module:Bil/val:neg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> neg : <a href="index.html#/module:Std/module:Bil/type:unop">unop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:not">
  <a href="index.html#/module:Std/module:Bil/val:not" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> not : <a href="index.html#/module:Std/module:Bil/type:unop">unop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:load">
  <a href="index.html#/module:Std/module:Bil/val:load" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> load : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:store">
  <a href="index.html#/module:Std/module:Bil/val:store" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> store : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:binop">
  <a href="index.html#/module:Std/module:Bil/val:binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> binop : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:unop">
  <a href="index.html#/module:Std/module:Bil/val:unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unop : <a href="index.html#/module:Std/module:Bil/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:var">
  <a href="index.html#/module:Std/module:Bil/val:var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> var : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:int">
  <a href="index.html#/module:Std/module:Bil/val:int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> int : <a href="index.html#/module:Std/module:Bitvector">Bitvector</a>.<a href="index.html#/module:Std/module:Bitvector/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:cast">
  <a href="index.html#/module:Std/module:Bil/val:cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> cast : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:let_">
  <a href="index.html#/module:Std/module:Bil/val:let_" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> let_ : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:unknown">
  <a href="index.html#/module:Std/module:Bil/val:unknown" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unknown : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:ite">
  <a href="index.html#/module:Std/module:Bil/val:ite" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ite : if_:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> then_:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> else_:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:extract">
  <a href="index.html#/module:Std/module:Bil/val:extract" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> extract : hi:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> lo:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:concat">
  <a href="index.html#/module:Std/module:Bil/val:concat" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> concat : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/module:Bil/label:bil_visitor">
  <a href="index.html#/module:Std/module:Bil/label:bil_visitor" class="anchor">#</a>
  
    <h4 class="section level_4">AST Visitors</h4>
    
  </div>
  
      <p>.</p>
      
      <p><code>visitor</code> folds arbitrary value over the AST, <code>finder</code> is a
visitor, that can prematurely finish the traversal, <code>mapper</code>
that maps AST, allowing limited transformation of its
structure.</p>
      
        
      </div>
    
  <div class="region" id="/module:Std/module:Bil/class:state">
  <a href="index.html#/module:Std/module:Bil/class:state" class="anchor">#</a>
  
  <div class="class">
    <span class="keyword">class</span> state : 
  <div class="region" id="/module:Std/module:Bil/class:state/var:preds">
  <a href="index.html#/module:Std/module:Bil/class:state/var:preds" class="anchor">#</a>
  
  <div class="classval">
  <span class="keyword">val</span> preds : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
      <div class="doc">
        
      <p>the stack of stmts that was already visited, with the last on
the top. Not including the currently visiting stmt.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:state/var:succs">
  <a href="index.html#/module:Std/module:Bil/class:state/var:succs" class="anchor">#</a>
  
  <div class="classval">
  <span class="keyword">val</span> succs : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
      <div class="doc">
        
      <p>stmts that are not yet visited</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:state/var:stmts_stack">
  <a href="index.html#/module:Std/module:Bil/class:state/var:stmts_stack" class="anchor">#</a>
  
  <div class="classval">
  <span class="keyword">val</span> stmts_stack : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
      <div class="doc">
        
      <p>a stack of stmts that are parents for the currently visiting
entity. The top one is the one that we're currently visiting.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:state/var:exps_stack">
  <a href="index.html#/module:Std/module:Bil/class:state/var:exps_stack" class="anchor">#</a>
  
  <div class="classval">
  <span class="keyword">val</span> exps_stack : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> list
  
      <div class="doc">
        
      <p>a stack of expr, that are parents for the currenly visiting
expression</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:state/var:in_jmp">
  <a href="index.html#/module:Std/module:Bil/class:state/var:in_jmp" class="anchor">#</a>
  
  <div class="classval">
  <span class="keyword">val</span> in_jmp : bool
  
      <div class="doc">
        
      <p>is <code>true</code> if we're visiting expression that is a jump target</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:state/var:in_move">
  <a href="index.html#/module:Std/module:Bil/class:state/var:in_move" class="anchor">#</a>
  
  <div class="classval">
  <span class="keyword">val</span> in_move : bool
  
      <div class="doc">
        
      <p>is <code>true</code> if we're visiting expression that is on the left or
right side of the assignment.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:state/var:under_condition">
  <a href="index.html#/module:Std/module:Bil/class:state/var:under_condition" class="anchor">#</a>
  
  <div class="classval">
  <span class="keyword">val</span> under_condition : bool
  
      <div class="doc">
        
      <p>is <code>true</code> if currently visiting expression or statement is
executed under condition.</p>
      
      <p>is <code>true</code> if currently visiting expression or statement is
executed under loop.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:state/var:in_loop">
  <a href="index.html#/module:Std/module:Bil/class:state/var:in_loop" class="anchor">#</a>
  
  <div class="classval">
  <span class="keyword">val</span> in_loop : bool
  
  </div>
  
  </div>
  
    
      <div class="doc">
        
      <p>All visitors provides some information about the current
position of the visitor</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor">
  <a href="index.html#/module:Std/module:Bil/class:visitor" class="anchor">#</a>
  
  <div class="class">
    <span class="keyword">class</span> ['a] visitor : 
    <div class="inherit">
    <span class="keyword">inherit</span> <a href="index.html#/module:Std/module:Bil/class:state">state</a>
    </div>
    
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:run">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:run" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> run : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_stmt">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_stmt" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_stmt : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Statements</h6>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_stmt">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_stmt" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_stmt : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_stmt">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_stmt" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_stmt : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_move">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_move" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_move : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Move(var,exp)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_move">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_move" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_move : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_move">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_move" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_move : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_jmp">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_jmp" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_jmp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Jmp exp</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_jmp">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_jmp" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_jmp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_jmp">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_jmp" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_jmp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_while">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_while" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_while : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>While (cond,bil)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_while">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_while" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_while : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_while">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_while" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_while : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_if">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_if" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_if : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> yes:<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> no:<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>If (cond,yes,no)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_if">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_if" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_if : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> yes:<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> no:<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_if">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_if" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_if : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> yes:<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> no:<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_cpuexn">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_cpuexn" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_cpuexn : int <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>CpuExn n</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_cpuexn">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_cpuexn" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_cpuexn : int <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_cpuexn">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_cpuexn" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_cpuexn : int <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_special">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_special" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_special : string <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Special string</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_special">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_special" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_special : string <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_special">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_special" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_special : string <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_exp">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_exp" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_exp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Expressions</h6>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_exp">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_exp" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_exp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_exp">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_exp" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_exp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_load">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_load" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_load : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Load (src,addr,endian,size)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_load">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_load" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_load : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_load">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_load" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_load : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_store">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_store" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_store : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> exp:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Store (dst,addr,src,endian,size)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_store">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_store" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_store : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> exp:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_store">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_store" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_store : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> exp:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_binop">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_binop" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_binop : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>BinOp (op,e1,e2)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_binop">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_binop" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_binop : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_binop">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_binop" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_binop : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_unop">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_unop" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_unop : <a href="index.html#/module:Std/module:Bil/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Unop (op,e)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_unop">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_unop" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_unop : <a href="index.html#/module:Std/module:Bil/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_unop">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_unop" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_unop : <a href="index.html#/module:Std/module:Bil/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_cast">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_cast" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_cast : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Cast(kind,size,e)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_cast">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_cast" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_cast : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_cast">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_cast" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_cast : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_let">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_let" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_let : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> exp:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> body:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Let (v,exp,body)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_let">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_let" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_let : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> exp:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> body:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_let">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_let" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_let : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> exp:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> body:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_ite">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_ite" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_ite : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> yes:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> no:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Ite (cond,yes,no)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_ite">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_ite" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_ite : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> yes:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> no:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_ite">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_ite" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_ite : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> yes:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> no:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_extract">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_extract" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_extract : hi:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> lo:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Extract (hi,lo,e)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_extract">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_extract" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_extract : hi:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> lo:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_extract">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_extract" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_extract : hi:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> lo:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_concat">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_concat" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_concat : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Concat(e1,e2)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_concat">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_concat" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_concat : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_concat">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_concat" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_concat : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Leafs</h6>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_int">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_int" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_int : <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Int w</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_int">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_int" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_int : <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_int">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_int" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_int : <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_var">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_var" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_var : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Var v</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_var">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_var" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_var : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_var">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_var" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_var : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:enter_unknown">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:enter_unknown" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> enter_unknown : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
      <div class="doc">
        
      <p><code>Unknown (str,typ)</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:visit_unknown">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:visit_unknown" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> visit_unknown : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:visitor/method:leave_unknown">
  <a href="index.html#/module:Std/module:Bil/class:visitor/method:leave_unknown" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> leave_unknown : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a
  
  </div>
  
  </div>
  
    
      <div class="doc">
        
      <p>Visitor.
Visits AST providing lots of hooks.</p>
      
      <p>For each AST constructor <code>C</code> the visitor provides three methods:
<code>enter_C</code>, <code>visit_C</code>, <code>leave_C</code>. The default implementation for
<code>enter_C</code> and <code>leave_C</code> is to return its argument. The default
implementation for <code>visit_C</code> is the following:
1. call <code>enter_C</code>
2. visit all children
3. call <code>leave_C</code>.</p>
      
      <p>It is recommended to override <code>enter_C</code> method if you only need
to visit <code>C</code> constructor without changing a way you're visiting
the tree.</p>
      
      <p>For example, to collect all resolved jumps one could write the
following function:</p>
      <pre><code>          let collect_calls bil = (object(self)
            inherit [Word.t list] visitor
            method! enter_int x js = if in_jmp then x :: js else js
          end)#run bil []</code></pre>
      <p>The default entry point of the visitor is method <code>run</code>, but
you can use any other method as well, for example, if you do
not have a statement at all and want to visit expression.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:finder">
  <a href="index.html#/module:Std/module:Bil/class:finder" class="anchor">#</a>
  
  <div class="class">
    <span class="keyword">class</span> ['a] finder : 
    <div class="inherit">
    <span class="keyword">inherit</span> ['a option Core_kernel.Std.return] <a href="index.html#/module:Std/module:Bil/class:visitor">visitor</a>
    </div>
    
  <div class="region" id="/module:Std/module:Bil/class:finder/method:find">
  <a href="index.html#/module:Std/module:Bil/class:finder/method:find" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> find : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a option
  
  </div>
  
  </div>
  
    
      <div class="doc">
        
      <p>A visitor with shortcut.
Finder is a specialization of a visitor, that uses <code>return</code> as its
folding argument. At any time you can stop the traversing by
calling <code>return</code> function of the provided argument (which is by
itself is a record with one field - a function accepting argument
of type <code>'a option</code>).</p>
      
      <p>For example, the following function will check whether <code>x</code>
variable is referenced in the provided scope.
</p>
      <pre><code>          let is_referenced x = find (object(self)
              inherit [unit] finder
              method! enter_var y cc =
                if Var.(x = y) then cc.return (Some ()); cc
            end)</code></pre>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper">
  <a href="index.html#/module:Std/module:Bil/class:mapper" class="anchor">#</a>
  
  <div class="class">
    <span class="keyword">class</span> mapper : 
    <div class="inherit">
    <span class="keyword">inherit</span> <a href="index.html#/module:Std/module:Bil/class:state">state</a>
    </div>
    
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:run">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:run" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> run : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
      <div class="doc">
        
      <p>Default entry point.
But again, you can use any method as an entry</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_stmt">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_stmt" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_stmt : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Statements</h3>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_move">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_move" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_move : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_jmp">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_jmp" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_jmp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_while">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_while" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_while : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_if">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_if" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_if : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> yes:<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> no:<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_cpuexn">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_cpuexn" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_cpuexn : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_special">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_special" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_special : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_exp">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_exp" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_exp : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Expressions</h3>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_load">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_load" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_load : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_store">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_store" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_store : mem:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> addr:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> exp:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_binop">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_binop" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_binop : <a href="index.html#/module:Std/module:Bil/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_unop">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_unop" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_unop : <a href="index.html#/module:Std/module:Bil/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_cast">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_cast" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_cast : <a href="index.html#/module:Std/module:Bil/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_let">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_let" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_let : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> exp:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> body:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_ite">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_ite" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_ite : cond:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> yes:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> no:<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_extract">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_extract" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_extract : hi:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> lo:<a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_concat">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_concat" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_concat : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_int">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_int" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_int : <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_var">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_var" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_var : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_sym">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_sym" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_sym : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:var">var</a>
  
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:mapper/method:map_unknown">
  <a href="index.html#/module:Std/module:Bil/class:mapper/method:map_unknown" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> map_unknown : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
  
  </div>
  
  </div>
  
    
      <div class="doc">
        
      <p>AST transformation.
mapper allows one to map AST, performing some limited
amount of transformations on it. Mapper provides extra
flexibility by mapping <code>stmt</code> to <code>stmt list</code>, thus allowing
to remove statements from the output (by mapping to empty list) or
to map one statement to several. This is particularly useful when
you map <code>if</code> or <code>while</code> statements.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:find_map">
  <a href="index.html#/module:Std/module:Bil/val:find_map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find_map : 'a #<a href="index.html#/module:Std/module:Bil/class:finder">finder</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a option
    
      <div class="doc">
        
      <p><code>find_map finder bil</code> search in the BIL</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:find">
  <a href="index.html#/module:Std/module:Bil/val:find" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find : unit #<a href="index.html#/module:Std/module:Bil/class:finder">finder</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>find finder bil</code> returns true if <code>finder</code> finds
something. Note a better name would be <code>exists</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:iter">
  <a href="index.html#/module:Std/module:Bil/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : unit #<a href="index.html#/module:Std/module:Bil/class:visitor">visitor</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> unit
    
      <div class="doc">
        
      <p><code>iter visitor bil</code> apply a visitor for each node of a BIL
forest.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:fold">
  <a href="index.html#/module:Std/module:Bil/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : 'a #<a href="index.html#/module:Std/module:Bil/class:visitor">visitor</a> <span class="rarr"><span>-&gt;</span></span> init:'a <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> 'a
    
      <div class="doc">
        
      <p><code>fold visitor ~init bil</code> folds visitor over BIL, passing init
value through the tree nodes.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:map">
  <a href="index.html#/module:Std/module:Bil/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : <a href="index.html#/module:Std/module:Bil/class:mapper">mapper</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
    
      <div class="doc">
        
      <p><code>map mapper bil</code> map or transform BIL program.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:is_referenced">
  <a href="index.html#/module:Std/module:Bil/val:is_referenced" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_referenced : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_referenced x p</code> is <code>true</code> if <code>x</code> is referenced in some expression or
statement in program <code>p</code>:
BUG: currently occurrences on the left hand side of the
assignment operator is considered a reference too.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:is_assigned">
  <a href="index.html#/module:Std/module:Bil/val:is_assigned" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_assigned : ?strict:bool <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_assigned x p</code> is <code>true</code> if there exists such <code>Move</code>
statement, that <code>x</code> occures on the left side of it. If <code>strict</code>
is true, then only unconditional assignments. By default,
<code>strict</code> is <code>false</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:prune_unreferenced">
  <a href="index.html#/module:Std/module:Bil/val:prune_unreferenced" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> prune_unreferenced : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
    
      <div class="doc">
        
      <p><code>prune_unreferenced p</code> remove all assignments to variables that
are not used in the program <code>p</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:normalize_negatives">
  <a href="index.html#/module:Std/module:Bil/val:normalize_negatives" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> normalize_negatives : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
    
      <div class="doc">
        
      <p><code>normalize_negatives p</code> transform <code>x + y</code> to <code>x - abs(y)</code> if <code>y &lt; 0</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:substitute">
  <a href="index.html#/module:Std/module:Bil/val:substitute" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> substitute : <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
    
      <div class="doc">
        
      <p><code>substitute x y p</code> substitutes each occurrence of expression <code>x</code> by
expression <code>y</code> in program <code>p</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:substitute_var">
  <a href="index.html#/module:Std/module:Bil/val:substitute_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> substitute_var : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
    
      <div class="doc">
        
      <p><code>substitute_var x y p</code> substitutes all occurences of variable <code>x</code>
by expression <code>y</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:fold_consts">
  <a href="index.html#/module:Std/module:Bil/val:fold_consts" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold_consts : <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
    
      <div class="doc">
        
      <p><code>fold_consts</code> evaluate constant expressions.
Note: this function performs only one step, and has no loops,
it is supposed to be run using a fixpoint combinator.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/class:constant_folder">
  <a href="index.html#/module:Std/module:Bil/class:constant_folder" class="anchor">#</a>
  
  <div class="class">
    <span class="keyword">class</span> constant_folder : <a href="index.html#/module:Std/module:Bil/class:mapper">mapper</a>
    
      <div class="doc">
        
      <p><code>constant_folder</code> is a class that implements the <code>fold_consts</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:fixpoint">
  <a href="index.html#/module:Std/module:Bil/val:fixpoint" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fixpoint : (<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list
    
      <div class="doc">
        
      <p><code>fixpoint f</code> applies transformation <code>f</code> until fixpoint is
reached. If the transformation orbit contains non-trivial cycles,
then the transformation will stop at an arbitrary point of a
cycle.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Trie">
  <a href="index.html#/module:Std/module:Bil/module:Trie" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Trie : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Tries on BIL.</p>
      
      <p>Bil provides two prefix tries trees.</p>
      
      <p>The default one is not normalized and will compare bil statements
literally. This means that comparison is sensitive to variable
names and immediate values. Depending on your context it may be
find or not. For example, two <code>SP</code> variables may compare as different
if one of them was obtained from different compilation (and met
the other one through some persistant storage, e.g., file on hard
disk). Moreover, BIL obtained from different lifters will have
different names for the same registers. All this issues are
addressed in normalized <code>Trie</code>.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Bil/module:Trie/type:normalized_bil">
  <a href="index.html#/module:Std/module:Bil/module:Trie/type:normalized_bil" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> normalized_bil
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Trie/val:normalize">
  <a href="index.html#/module:Std/module:Bil/module:Trie/val:normalize" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> normalize : ?subst:(<a href="index.html#/module:Std/module:Bil/type:exp">exp</a> * <a href="index.html#/module:Std/module:Bil/type:exp">exp</a>) list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/module:Trie/type:normalized_bil">normalized_bil</a>
    
      <div class="doc">
        
      <p><code>normalize ?subst bil</code> normalize BIL. If <code>subst</code> is provided,
then substitute each occurence of the fst expression to the
snd expression before the normalization. The effect of
normalization is the following:</p>
      
      <p>1. All immediate values are compared equal
2. All variables are compared nominally
3. BIL is simplified to reduce the syntactic differences
(but the comparison is still syntactic, and (x + 2) will
be compared differently to (2 + x).</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/module:Trie/module:Normalized">
  <a href="index.html#/module:Std/module:Bil/module:Trie/module:Normalized" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Normalized : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Bil/module:Trie/type:normalized_bil">normalized_bil</a></div>
      
      
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a> list 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Bil/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Bil/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Bil/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:compare">
  <a href="index.html#/module:Std/module:Bil/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Bil/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bin_t">
  <a href="index.html#/module:Std/module:Bil/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Bil/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bin_read_t">
  <a href="index.html#/module:Std/module:Bil/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Bil/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Bil/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Bil/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Bil/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Bil/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bin_size_t">
  <a href="index.html#/module:Std/module:Bil/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Bil/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bin_write_t">
  <a href="index.html#/module:Std/module:Bil/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Bil/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Bil/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Bil/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Bil/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Exp">
  <a href="index.html#/module:Std/module:Exp" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Exp : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p><code>Regular</code> interface for BIL expressions</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Exp/type:t">
  <a href="index.html#/module:Std/module:Exp/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/module:Bil">Bil</a>.<a href="index.html#/module:Std/module:Bil/type:exp">exp</a>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Exp/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Exp/val:pp_adt">
  <a href="index.html#/module:Std/module:Exp/val:pp_adt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pp_adt : <a href="index.html#/module:Std/module:Exp/type:t">t</a> <a href="index.html#/module:Std/type:printer">printer</a>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Stmt">
  <a href="index.html#/module:Std/module:Stmt" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Stmt : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p><code>Regular</code> interface for BIL statements</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Stmt/type:t">
  <a href="index.html#/module:Std/module:Stmt/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/module:Bil">Bil</a>.<a href="index.html#/module:Std/module:Bil/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Stmt/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Stmt/val:pp_adt">
  <a href="index.html#/module:Std/module:Stmt/val:pp_adt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pp_adt : <a href="index.html#/module:Std/module:Stmt/type:t">t</a> <a href="index.html#/module:Std/type:printer">printer</a>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:arch">
  <a href="index.html#/module:Std/label:arch" class="anchor">#</a>
  
    <h2 class="section level_2">A type to represent target architecture</h2>
    
  </div>
  
        
      </div>
    
  <div class="region" id="/module:Std/module:Arch">
  <a href="index.html#/module:Std/module:Arch" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Arch : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Architecture</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Arch/type:x86">
  <a href="index.html#/module:Std/module:Arch/type:x86" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> x86 = [ <div class="cons">| `x86</div><div class="cons">| `x86_64</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_x86">
  <a href="index.html#/module:Std/module:Arch/val:all_of_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:arm">
  <a href="index.html#/module:Std/module:Arch/type:arm" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> arm = [ <div class="cons">| `arm</div><div class="cons">| `armeb</div><div class="cons">| `armv4</div><div class="cons">| `armv4t</div><div class="cons">| `armv5</div><div class="cons">| `armv6</div><div class="cons">| `armv7</div><div class="cons">| `thumb</div><div class="cons">| `thumbeb</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_arm">
  <a href="index.html#/module:Std/module:Arch/val:all_of_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:aarch64">
  <a href="index.html#/module:Std/module:Arch/type:aarch64" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> aarch64 = [ <div class="cons">| `aarch64</div><div class="cons">| `aarch64_be</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:all_of_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:ppc">
  <a href="index.html#/module:Std/module:Arch/type:ppc" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> ppc = [ <div class="cons">| `ppc</div><div class="cons">| `ppc64</div><div class="cons">| `ppc64le</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_ppc">
  <a href="index.html#/module:Std/module:Arch/val:all_of_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:mips">
  <a href="index.html#/module:Std/module:Arch/type:mips" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> mips = [ <div class="cons">| `mips</div><div class="cons">| `mipsel</div><div class="cons">| `mips64</div><div class="cons">| `mips64el</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_mips">
  <a href="index.html#/module:Std/module:Arch/val:all_of_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:sparc">
  <a href="index.html#/module:Std/module:Arch/type:sparc" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> sparc = [ <div class="cons">| `sparc</div><div class="cons">| `sparcv9</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_sparc">
  <a href="index.html#/module:Std/module:Arch/val:all_of_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:nvptx">
  <a href="index.html#/module:Std/module:Arch/type:nvptx" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> nvptx = [ <div class="cons">| `nvptx</div><div class="cons">| `nvptx64</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:all_of_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:hexagon">
  <a href="index.html#/module:Std/module:Arch/type:hexagon" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> hexagon = [ <div class="cons">| `hexagon</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:all_of_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:r600">
  <a href="index.html#/module:Std/module:Arch/type:r600" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> r600 = [ <div class="cons">| `r600</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_r600">
  <a href="index.html#/module:Std/module:Arch/val:all_of_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:systemz">
  <a href="index.html#/module:Std/module:Arch/type:systemz" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> systemz = [ <div class="cons">| `systemz</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_systemz">
  <a href="index.html#/module:Std/module:Arch/val:all_of_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:xcore">
  <a href="index.html#/module:Std/module:Arch/type:xcore" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> xcore = [ <div class="cons">| `xcore</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all_of_xcore">
  <a href="index.html#/module:Std/module:Arch/val:all_of_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/type:t">
  <a href="index.html#/module:Std/module:Arch/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = [ <div class="cons">| <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:arm">arm</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:mips">mips</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:r600">r600</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:x86">x86</a></div><div class="cons">| <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a></div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/module:Variants">
  <a href="index.html#/module:Std/module:Arch/module:Variants" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Variants : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Arch/module:Variants/val:fold">
  <a href="index.html#/module:Std/module:Arch/module:Variants/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> aarch64:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> arm:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> hexagon:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> mips:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> nvptx:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> ppc:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> r600:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> sparc:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> systemz:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> x86:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> xcore:('acc__ <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/module:Variants/val:iter">
  <a href="index.html#/module:Std/module:Arch/module:Variants/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : aarch64:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> arm:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> hexagon:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> mips:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> nvptx:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> ppc:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> r600:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> sparc:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> systemz:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> x86:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> xcore:(unit <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/module:Variants/val:map">
  <a href="index.html#/module:Std/module:Arch/module:Variants/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : <a href="index.html#/module:Std/module:Arch/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> aarch64:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> arm:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> hexagon:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> mips:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> nvptx:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> ppc:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> r600:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> sparc:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> systemz:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> x86:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> xcore:(unit <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> 'result__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/module:Variants/val:descriptions">
  <a href="index.html#/module:Std/module:Arch/module:Variants/val:descriptions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> descriptions : (string * int) list
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:all">
  <a href="index.html#/module:Std/module:Arch/val:all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all : <a href="index.html#/module:Std/module:Arch/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:of_string">
  <a href="index.html#/module:Std/module:Arch/val:of_string" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_string : string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:t">t</a> option
    
      <div class="doc">
        
      <p><code>of_string s</code> will try to be clever and to capture all
commonly known synonyms, e.g., <code>of_string &quot;i686&quot;</code> will
work</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:addr_size">
  <a href="index.html#/module:Std/module:Arch/val:addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_size : <a href="index.html#/module:Std/module:Arch/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr_size">addr_size</a>
    
      <div class="doc">
        
      <p><code>addr_size arch</code> returns an address size for a given <code>arch</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:endian">
  <a href="index.html#/module:Std/module:Arch/val:endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> endian : <a href="index.html#/module:Std/module:Arch/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a>
    
      <div class="doc">
        
      <p><code>endian arch</code> returns a word endianness of the <code>arch</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Arch/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Arch/val:x86_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:x86_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> x86_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:x86">x86</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__x86_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__x86_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __x86_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:x86">x86</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_x86">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_x86">
  <a href="index.html#/module:Std/module:Arch/val:compare_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_x86">
  <a href="index.html#/module:Std/module:Arch/val:bin_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_x86">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_x86__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_x86__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_x86__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:x86">x86</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_x86">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_x86">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_x86">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_x86">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_x86" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_x86 : <a href="index.html#/module:Std/module:Arch/type:x86">x86</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:arm_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:arm_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> arm_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:arm">arm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__arm_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__arm_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __arm_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:arm">arm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_arm">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_arm">
  <a href="index.html#/module:Std/module:Arch/val:compare_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_arm">
  <a href="index.html#/module:Std/module:Arch/val:bin_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_arm">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_arm__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_arm__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_arm__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:arm">arm</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_arm">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_arm">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_arm">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_arm">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_arm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_arm : <a href="index.html#/module:Std/module:Arch/type:arm">arm</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:aarch64_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:aarch64_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> aarch64_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__aarch64_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__aarch64_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __aarch64_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:compare_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:bin_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_aarch64__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_aarch64__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_aarch64__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_aarch64">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_aarch64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_aarch64 : <a href="index.html#/module:Std/module:Arch/type:aarch64">aarch64</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:ppc_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:ppc_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ppc_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__ppc_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__ppc_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __ppc_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_ppc">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_ppc">
  <a href="index.html#/module:Std/module:Arch/val:compare_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_ppc">
  <a href="index.html#/module:Std/module:Arch/val:bin_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_ppc">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_ppc__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_ppc__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_ppc__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_ppc">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_ppc">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_ppc">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_ppc">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_ppc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_ppc : <a href="index.html#/module:Std/module:Arch/type:ppc">ppc</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:mips_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:mips_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mips_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:mips">mips</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__mips_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__mips_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __mips_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:mips">mips</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_mips">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_mips">
  <a href="index.html#/module:Std/module:Arch/val:compare_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_mips">
  <a href="index.html#/module:Std/module:Arch/val:bin_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_mips">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_mips__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_mips__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_mips__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:mips">mips</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_mips">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_mips">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_mips">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_mips">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_mips" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_mips : <a href="index.html#/module:Std/module:Arch/type:mips">mips</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sparc_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:sparc_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sparc_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__sparc_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__sparc_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __sparc_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_sparc">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_sparc">
  <a href="index.html#/module:Std/module:Arch/val:compare_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_sparc">
  <a href="index.html#/module:Std/module:Arch/val:bin_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_sparc">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_sparc__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_sparc__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_sparc__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_sparc">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_sparc">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_sparc">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_sparc">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_sparc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_sparc : <a href="index.html#/module:Std/module:Arch/type:sparc">sparc</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:nvptx_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:nvptx_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> nvptx_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__nvptx_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__nvptx_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __nvptx_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:compare_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:bin_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_nvptx__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_nvptx__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_nvptx__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_nvptx">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_nvptx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_nvptx : <a href="index.html#/module:Std/module:Arch/type:nvptx">nvptx</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:hexagon_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:hexagon_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> hexagon_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__hexagon_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__hexagon_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __hexagon_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:compare_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:bin_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_hexagon__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_hexagon__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_hexagon__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_hexagon">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_hexagon" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_hexagon : <a href="index.html#/module:Std/module:Arch/type:hexagon">hexagon</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:r600_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:r600_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r600_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:r600">r600</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__r600_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__r600_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __r600_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:r600">r600</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_r600">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_r600">
  <a href="index.html#/module:Std/module:Arch/val:compare_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_r600">
  <a href="index.html#/module:Std/module:Arch/val:bin_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_r600">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_r600__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_r600__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_r600__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:r600">r600</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_r600">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_r600">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_r600">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_r600">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_r600" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_r600 : <a href="index.html#/module:Std/module:Arch/type:r600">r600</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:systemz_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:systemz_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> systemz_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__systemz_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__systemz_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __systemz_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_systemz">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_systemz">
  <a href="index.html#/module:Std/module:Arch/val:compare_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_systemz">
  <a href="index.html#/module:Std/module:Arch/val:bin_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_systemz">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_systemz__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_systemz__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_systemz__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_systemz">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_systemz">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_systemz">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_systemz">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_systemz" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_systemz : <a href="index.html#/module:Std/module:Arch/type:systemz">systemz</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:xcore_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:xcore_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> xcore_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__xcore_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__xcore_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __xcore_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_xcore">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare_xcore">
  <a href="index.html#/module:Std/module:Arch/val:compare_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_xcore">
  <a href="index.html#/module:Std/module:Arch/val:bin_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_xcore">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_xcore__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_xcore__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_xcore__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_xcore">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_xcore">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_xcore">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_xcore">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_xcore" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_xcore : <a href="index.html#/module:Std/module:Arch/type:xcore">xcore</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Arch/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__t_of_sexp__">
  <a href="index.html#/module:Std/module:Arch/val:__t_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __t_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Arch/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Arch/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:compare">
  <a href="index.html#/module:Std/module:Arch/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Arch/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_t">
  <a href="index.html#/module:Std/module:Arch/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Arch/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_read_t">
  <a href="index.html#/module:Std/module:Arch/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Arch/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Arch/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Arch/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Arch/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Arch/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_size_t">
  <a href="index.html#/module:Std/module:Arch/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Arch/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_write_t">
  <a href="index.html#/module:Std/module:Arch/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Arch/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Arch/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Arch/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Arch/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:arch">
  <a href="index.html#/module:Std/type:arch" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> arch = <a href="index.html#/module:Std/module:Arch">Arch</a>.<a href="index.html#/module:Std/module:Arch/type:t">t</a>
    
      <div class="doc">
        
      <p>architecture</p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:tag">
  <a href="index.html#/module:Std/label:tag" class="anchor">#</a>
  
    <h2 class="section level_2">Extensible variants</h2>
    
  </div>
  
      <p>This module creates an extensible variant type, that resembles
extensible variant types, introduced in 4.02, but even more safe.</p>
      
      <p>To extend variant type with a new constructor, use</p>
      
      <p><code>Tag.register constructor_name sexp_of_constructor</code>, where</p>
      
      <p>constructor name can be any name, and can even clash with previous
definitions it is guaranteed, that you will receive a new
representation of the constructor, every time you're calling this
function even if parameters are the same. The returned value is
supposed to be exposed in a module, for later use in other
modules, c.f., <code>Image</code> module defines three constructors:
</p>
      <ul><li><code>Image.symbol</code> for Image symbols, that basically can be seen as
<code>Image.Symbol of sym</code></li><li><code>Image.section</code> for image sections;</li><li><code>Image.region</code> for other named image memory regions.</li></ul>
        
      </div>
    
  <div class="region" id="/module:Std/module:Tag">
  <a href="index.html#/module:Std/module:Tag" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Tag : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Tag module</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Tag/type:t">
  <a href="index.html#/module:Std/module:Tag/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a t
    
      <div class="doc">
        
      <p>Tag constructor of type <code>'a</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Tag/type:value">
  <a href="index.html#/module:Std/module:Tag/type:value" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> value
    
      <div class="doc">
        
      <p>a value injected into extensible variant</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Tag/val:register">
  <a href="index.html#/module:Std/module:Tag/val:register" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> register : string <span class="rarr"><span>-&gt;</span></span> ('a <span class="rarr"><span>-&gt;</span></span> Core_kernel.Std.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Tag/type:t">t</a>
    
      <div class="doc">
        
      <p><code>register name sexp</code> creates a new variant constructor, i.e.,
a new branch in a variant type. This function has no side-effects,
it just returns a witness of a new constructor, that can be later
used for storing into <code>value</code> and extracting from it. This
witness should be shared between user and creator of the value</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Tag/val:create">
  <a href="index.html#/module:Std/module:Tag/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : 'a <a href="index.html#/module:Std/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Tag/type:value">value</a>
    
      <div class="doc">
        
      <p><code>create cons x</code> creates a value using constructor <code>cons</code> and
argument <code>x</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Tag/val:value">
  <a href="index.html#/module:Std/module:Tag/val:value" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> value : 'a <a href="index.html#/module:Std/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Tag/type:value">value</a> <span class="rarr"><span>-&gt;</span></span> 'a option
    
      <div class="doc">
        
      <p><code>value cons</code> extracts a value associated with a constructor <code>cons</code>
(Essentially, performs a pattern match on the specified variant
branch)</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Tag/val:is">
  <a href="index.html#/module:Std/module:Tag/val:is" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is : 'a <a href="index.html#/module:Std/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Tag/type:value">value</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is cons v</code> true if value <code>v</code> was constructed with constructor
<code>cons</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Tag/val:tagname">
  <a href="index.html#/module:Std/module:Tag/val:tagname" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> tagname : <a href="index.html#/module:Std/module:Tag/type:value">value</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p><code>tagname value</code> returns a constructor name of the <code>value</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Tag/val:name">
  <a href="index.html#/module:Std/module:Tag/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : 'a <a href="index.html#/module:Std/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p><code>name cons</code> returns a name of a constructor.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Printable">Printable</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> := <a href="index.html#/module:Std/module:Tag/type:value">value</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Tag/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Tag/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : ('a <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Tag/val:sexp_of_value">
  <a href="index.html#/module:Std/module:Tag/val:sexp_of_value" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_value : <a href="index.html#/module:Std/module:Tag/type:value">value</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Seq">
  <a href="index.html#/module:Std/module:Seq" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Seq : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Lazy sequence</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Seq/type:t">
  <a href="index.html#/module:Std/module:Seq/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a t = 'a Core_kernel.Std.Sequence.t
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <span class="keyword">module type of</span> Core_kernel.Std.Sequence <span class="keyword">with</span> <span class="keyword">type</span> 'a t := 'a <a href="index.html#/module:Std/module:Seq/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Seq/val:of_array">
  <a href="index.html#/module:Std/module:Seq/val:of_array" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_array : 'a array <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Seq/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Seq/val:cons">
  <a href="index.html#/module:Std/module:Seq/val:cons" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> cons : 'a <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Seq/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Seq/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Seq/val:is_empty">
  <a href="index.html#/module:Std/module:Seq/val:is_empty" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_empty : 'a <a href="index.html#/module:Std/module:Seq/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:seq">
  <a href="index.html#/module:Std/type:seq" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a seq = 'a <a href="index.html#/module:Std/module:Seq">Seq</a>.<a href="index.html#/module:Std/module:Seq/type:t">t</a>
    
      <div class="doc">
        
      <p>type abbreviation for <code>'a Sequence.t</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:(^::)">
  <a href="index.html#/module:Std/val:(%5E::)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (^::) : 'a <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/type:seq">seq</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>x ^:: xs</code> is a consing operator for sequences</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Config">
  <a href="index.html#/module:Std/module:Config" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Config : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Access to BAP configuration variables</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Config/val:pkg_version">
  <a href="index.html#/module:Std/module:Config/val:pkg_version" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pkg_version : string
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:bil">
  <a href="index.html#/module:Std/type:bil" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> bil = <a href="index.html#/module:Std/module:Bil">Bil</a>.<a href="index.html#/module:Std/module:Bil/type:t">t</a>
    
      <div class="doc">
        
  <div class="region" id="/module:Std/label:type_abbr">
  <a href="index.html#/module:Std/label:type_abbr" class="anchor">#</a>
  
    <h1 class="section level_1">Type abbreviations</h1>
    
  </div>
  
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:binop">
  <a href="index.html#/module:Std/type:binop" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> binop = <a href="index.html#/module:Std/module:Bil">Bil</a>.<a href="index.html#/module:Std/module:Bil/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:cast">
  <a href="index.html#/module:Std/type:cast" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> cast = <a href="index.html#/module:Std/module:Bil">Bil</a>.<a href="index.html#/module:Std/module:Bil/type:cast">cast</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:exp">
  <a href="index.html#/module:Std/type:exp" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> exp = <a href="index.html#/module:Std/module:Exp">Exp</a>.<a href="index.html#/module:Std/module:Exp/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:stmt">
  <a href="index.html#/module:Std/type:stmt" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> stmt = <a href="index.html#/module:Std/module:Stmt">Stmt</a>.<a href="index.html#/module:Std/module:Stmt/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:unop">
  <a href="index.html#/module:Std/type:unop" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> unop = <a href="index.html#/module:Std/module:Bil">Bil</a>.<a href="index.html#/module:Std/module:Bil/type:unop">unop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:value">
  <a href="index.html#/module:Std/type:value" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> value = <a href="index.html#/module:Std/module:Tag">Tag</a>.<a href="index.html#/module:Std/module:Tag/type:value">value</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:tag">
  <a href="index.html#/module:Std/type:tag" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a tag = 'a <a href="index.html#/module:Std/module:Tag">Tag</a>.<a href="index.html#/module:Std/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:image">
  <a href="index.html#/module:Std/label:image" class="anchor">#</a>
  
    <h1 class="section level_1">Memory model</h1>
    
  </div>
  
      <p>This library provides types that represents program as a memory
object. This includes:</p>
      <ul><li><code>mem</code> - a contiguous array of bytes, indexed with absolute
addresses.</li><li><code>table</code> - a mapping from a memory region to arbitrary entities.</li><li><code>image</code> - a program loaded to memory, as it is viewed by
system loader and OS.</li><li><code>symbol</code> - some named (not strictly contiguous) part of the
image</li><li><code>section</code> - some contiguous part of the <code>image</code> that has
specific access flags.</li></ul>
        
      </div>
    
  <div class="region" id="/module:Std/type:image">
  <a href="index.html#/module:Std/type:image" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> image
    
      <div class="doc">
        
      <p>an image loaded into memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:mem">
  <a href="index.html#/module:Std/type:mem" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> mem
    
      <div class="doc">
        
      <p>opaque memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:table">
  <a href="index.html#/module:Std/type:table" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a table
    
      <div class="doc">
        
      <p>a table from memory to <code>'a</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:memmap">
  <a href="index.html#/module:Std/type:memmap" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a memmap
    
      <div class="doc">
        
      <p>interval trees from memory regions to <code>'a</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators">
  <a href="index.html#/module:Std/modtype:Memory_iterators" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Memory_iterators = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Iterators lifted into monad</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:Memory_iterators/type:t">
  <a href="index.html#/module:Std/modtype:Memory_iterators/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/type:m">
  <a href="index.html#/module:Std/modtype:Memory_iterators/type:m" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a m
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:fold">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'b <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> 'b <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:iter">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> unit <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> unit <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:foldi">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:foldi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> foldi : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'b <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> 'b <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:iteri">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:iteri" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iteri : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> unit <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> unit <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:exists">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:exists" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exists : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> bool <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> bool <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:for_all">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:for_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> for_all : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> bool <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> bool <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:count">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:count" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> count : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> bool <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> int <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:find_if">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:find_if" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find_if : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> bool <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> option <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Memory_iterators/val:find_map">
  <a href="index.html#/module:Std/modtype:Memory_iterators/val:find_map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find_map : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> 'a option <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>) <span class="rarr"><span>-&gt;</span></span> 'a option <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:memory">
  <a href="index.html#/module:Std/label:memory" class="anchor">#</a>
  
    <h2 class="section level_2">Access to memory regions</h2>
    
  </div>
  
        
      </div>
    
  <div class="region" id="/module:Std/module:Memory">
  <a href="index.html#/module:Std/module:Memory" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Memory : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Interface to <code>mem</code> type</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Memory/type:t">
  <a href="index.html#/module:Std/module:Memory/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:mem">mem</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:create">
  <a href="index.html#/module:Std/module:Memory/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : ?pos:int <span class="rarr"><span>-&gt;</span></span> ?len:int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> Core_kernel.Std.Bigstring.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:of_file">
  <a href="index.html#/module:Std/module:Memory/val:of_file" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_file : <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:view">
  <a href="index.html#/module:Std/module:Memory/val:view" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> view : ?word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> ?from:<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> ?words:int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>view word_size ~from ~words mem</code> returns a new memory
that represents the specified region of memory <code>mem</code>. <code>copy</code>
function performs deep copy.</p>
      
        
  <div class="tag param">
    <span class="label">addr</span> defaults <code>min_addr mem</code>
  </div>
  
  <div class="tag param">
    <span class="label">words</span> defaults to the end of the memory region.
  </div>
  
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:range">
  <a href="index.html#/module:Std/module:Memory/val:range" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> range : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>range mem a0 a1</code> returns a view on <code>mem</code> starting from
address <code>a0</code> and ending at <code>a1</code>, bounds inclusive</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:merge">
  <a href="index.html#/module:Std/module:Memory/val:merge" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> merge : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>merge m1 m2</code> takes two memory regions, that either intersects or
share edges (i.e., difference between <code>min_addr</code> of one of the
blocks and <code>max_addr</code> of another is less then or equal to one, and
returns memory blocks that spans memory starting from the address
</p>
      <pre><code>min (min_addr m1) (min_addr m2)</code></pre>
      <p> and ending with address
</p>
      <pre><code>max (max_addr m1) (max_addr m2)</code></pre>
      <p>.</p>
      
      <p>Will return an error, if either the above state precondition
doesn't hold, or if this two memory blocks doesn't share the same
underlying memory (i.e., bases), or if they have different
endianness.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:first_byte">
  <a href="index.html#/module:Std/module:Memory/val:first_byte" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> first_byte : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a>
    
      <div class="doc">
        
      <p><code>first_byte m</code> returns first byte of <code>m</code> as a memory</p>
      
      <p><code>last_byte m</code> returns last byte of <code>m</code> as a memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:last_byte">
  <a href="index.html#/module:Std/module:Memory/val:last_byte" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> last_byte : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:endian">
  <a href="index.html#/module:Std/module:Memory/val:endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> endian : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a>
    
      <div class="doc">
        
      <p>returns the order of bytes in a word</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:get">
  <a href="index.html#/module:Std/module:Memory/val:get" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> get : ?disp:int <span class="rarr"><span>-&gt;</span></span> ?index:int <span class="rarr"><span>-&gt;</span></span> ?scale:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> ?addr:<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>get word_size mem addr</code> reads memory value from the specified
address. <code>word_size</code> default to <code>`r8</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:(^)">
  <a href="index.html#/module:Std/module:Memory/val:(%5E)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (^) : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>m^n</code> dereferences a byte at address <code>n</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:(^!)">
  <a href="index.html#/module:Std/module:Memory/val:(%5E!)" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> (^!) : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a>
    
      <div class="doc">
        
      <p><code>m^.n</code> dereferences a byte at address <code>n</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:max_addr">
  <a href="index.html#/module:Std/module:Memory/val:max_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> max_addr : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
      <div class="doc">
        
      <p><code>{max,min}_addr</code> function specify upper and lower bounds of the memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:min_addr">
  <a href="index.html#/module:Std/module:Memory/val:min_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> min_addr : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:length">
  <a href="index.html#/module:Std/module:Memory/val:length" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> length : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p><code>length</code> returns the length of the memory in bytes</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:contains">
  <a href="index.html#/module:Std/module:Memory/val:contains" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> contains : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>contains mem addr</code> returns true if <code>mem</code> contains address <code>addr</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:compare_with">
  <a href="index.html#/module:Std/module:Memory/val:compare_with" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_with : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> [ <div class="cons">| `addr_is_inside</div><div class="cons">| `addr_is_below</div><div class="cons">| `addr_is_above</div> ]
    
      <div class="doc">
        
      <p><code>compare_with mem addr</code> compares memory with <code>addr</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Input">
  <a href="index.html#/module:Std/module:Memory/module:Input" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Input : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>A set of low level input operations.
Note: it is more effective to use above head iterators, instead
of this low level interface, since iterators do not need to check
every memory access.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Memory/module:Input/type:reader">
  <a href="index.html#/module:Std/module:Memory/module:Input/type:reader" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a reader = <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> pos_ref:<a href="index.html#/module:Std/type:addr">addr</a> <a href="../../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html">Pervasives</a>.<a href="../../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html#/type:ref">ref</a> <span class="rarr"><span>-&gt;</span></span> 'a Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>reader mem ~pos_ref</code> defines a set of functions with a
common interface. Each function accepts a memory <code>mem</code> and a
<code>pos_ref</code> - a reference to a address that should be read. This
reference will be updated for the amount of bytes that was
actually read.</p>
      
        
  <div class="tag return">
    <span class="label">Returns</span> a word lifted into a monad.
  </div>
  
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Input/val:word">
  <a href="index.html#/module:Std/module:Memory/module:Input/val:word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> word : word_size:<a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <a href="index.html#/module:Std/module:Memory/module:Input/type:reader">reader</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Input/val:int8">
  <a href="index.html#/module:Std/module:Memory/module:Input/val:int8" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> int8 : <a href="index.html#/module:Std/type:word">word</a> <a href="index.html#/module:Std/module:Memory/module:Input/type:reader">reader</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Input/val:uint8">
  <a href="index.html#/module:Std/module:Memory/module:Input/val:uint8" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> uint8 : <a href="index.html#/module:Std/type:word">word</a> <a href="index.html#/module:Std/module:Memory/module:Input/type:reader">reader</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Input/val:int16">
  <a href="index.html#/module:Std/module:Memory/module:Input/val:int16" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> int16 : <a href="index.html#/module:Std/type:word">word</a> <a href="index.html#/module:Std/module:Memory/module:Input/type:reader">reader</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Input/val:uint16">
  <a href="index.html#/module:Std/module:Memory/module:Input/val:uint16" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> uint16 : <a href="index.html#/module:Std/type:word">word</a> <a href="index.html#/module:Std/module:Memory/module:Input/type:reader">reader</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Input/val:int32">
  <a href="index.html#/module:Std/module:Memory/module:Input/val:int32" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> int32 : <a href="index.html#/module:Std/type:word">word</a> <a href="index.html#/module:Std/module:Memory/module:Input/type:reader">reader</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Input/val:int64">
  <a href="index.html#/module:Std/module:Memory/module:Input/val:int64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> int64 : <a href="index.html#/module:Std/type:word">word</a> <a href="index.html#/module:Std/module:Memory/module:Input/type:reader">reader</a>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Printing and outputing</h6>
    </div>
        
      </div>
    
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Printable">Printable</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> := <a href="index.html#/module:Std/module:Memory/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Memory/val:hexdump">
  <a href="index.html#/module:Std/module:Memory/val:hexdump" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> hexdump : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p><code>hexdump t out</code> outputs hexdump (as per <code>hexdump -C</code>) of the
memory to formatter <code>out</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Memory_iterators">Memory_iterators</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> := <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> 'a <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a> = 'a 
    </div>
  
  <div class="region" id="/module:Std/module:Memory/module:With_error">
  <a href="index.html#/module:Std/module:Memory/module:With_error" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> With_error : <a href="index.html#/module:Std/modtype:Memory_iterators">Memory_iterators</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> := <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> 'a <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a> = 'a Core_kernel.Std.Or_error.t</div>
      
      <div class="doc">
        
      <p>iterators lifter to the Or_error monad</p>
      
        
      </div>
    
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Make_iterators">
  <a href="index.html#/module:Std/module:Memory/module:Make_iterators" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Make_iterators : <span class="keyword">functor</span> (M : Core_kernel.Std.Monad.S) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Memory_iterators">Memory_iterators</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Memory_iterators/type:t">t</a> := <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> 'a <a href="index.html#/module:Std/modtype:Memory_iterators/type:m">m</a> = 'a <a href="index.html#/module:Std/module:Memory/module:Make_iterators/modarg:1:M">M</a>.t</div>
      
      <div class="doc">
        
      <p>lifts iterators to monad <code>M</code></p>
      
        
      </div>
    
      
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Interfacing with C</h6>
    </div>
      <p>The following interfaces is supposed to be used only for the
purposes of exposing memory to c programs.</p>
      
        
      </div>
    
  <div class="region" id="/module:Std/module:Memory/val:to_buffer">
  <a href="index.html#/module:Std/module:Memory/val:to_buffer" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_buffer : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Core_kernel.Std.Bigsubstring.t
    
      <div class="doc">
        
      <p><code>to_buffers mem</code> creates a buffer representing the memory <code>mem</code>.
It is not specified whether the returned buffer has some sharing
with underlying implementation. In other words the returned buffer
shouldn't be modified.</p>
      
      <p>Since it is not guaranteed that memory is contiguous, a sequence of
buffers is returned, with each buffer representing a contiguous
part of memory.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Trie">
  <a href="index.html#/module:Std/module:Memory/module:Trie" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Trie : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Tries over memory</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Memory/module:Trie/module:R8">
  <a href="index.html#/module:Std/module:Memory/module:Trie/module:R8" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> R8 : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Memory/type:t">t</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Trie/module:R16">
  <a href="index.html#/module:Std/module:Memory/module:Trie/module:R16" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> R16 : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Memory/type:t">t</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Trie/module:R32">
  <a href="index.html#/module:Std/module:Memory/module:Trie/module:R32" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> R32 : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Memory/type:t">t</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/module:Trie/module:R64">
  <a href="index.html#/module:Std/module:Memory/module:Trie/module:R64" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> R64 : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Memory/type:t">t</a></div>
      
      
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memory/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Memory/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Memory/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table">
  <a href="index.html#/module:Std/module:Table" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Table : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Table.</p>
      
      <p>Tables are used to partition memory region into a set of
non-intersecting areas. Each area is assosiated with arbitrary
value of type <code>'a</code> bound to the type of the table.</p>
      
      <p>All operations over tables are purely applicative, i.e. there is
no observable side-effects. Although, they employ some kind of
caching underneath the hood, so that they perform better if
they're build once and used many times.</p>
      
      <p>Tables can be also linked. For example, if you have two tables
mapping the same memory region to a different sets of values, you
can create a mapping from one set of values to another. See <code>link</code>
function for mode details.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Table/type:t">
  <a href="index.html#/module:Std/module:Table/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a t = 'a <a href="index.html#/module:Std/type:table">table</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/type:hashable">
  <a href="index.html#/module:Std/module:Table/type:hashable" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a hashable = 'a Core_kernel.Std.Hashtbl.Hashable.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:empty">
  <a href="index.html#/module:Std/module:Table/val:empty" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> empty : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a>
    
      <div class="doc">
        
      <p>creates an empty table</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:singleton">
  <a href="index.html#/module:Std/module:Table/val:singleton" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> singleton : <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a>
    
      <div class="doc">
        
      <p>creates a table containing one bindins</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:add">
  <a href="index.html#/module:Std/module:Table/val:add" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> add : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>add table mem v</code> returns a new table with added mapping from a
mem region <code>mem</code> to a data value <code>v</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:remove">
  <a href="index.html#/module:Std/module:Table/val:remove" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> remove : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a>
    
      <div class="doc">
        
      <p>returns a new table with all mappings from the mem region
<code>mem</code> removed</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:change">
  <a href="index.html#/module:Std/module:Table/val:change" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> change : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> f:((<a href="index.html#/module:Std/type:mem">mem</a> * 'a) <a href="index.html#/module:Std/type:seq">seq</a> <span class="rarr"><span>-&gt;</span></span> [ <div class="cons">| `rebind <span class="keyword">of</span> <a href="index.html#/module:Std/type:mem">mem</a> * 'a</div><div class="cons">| `update <span class="keyword">of</span> <a href="index.html#/module:Std/type:mem">mem</a> * 'a <span class="rarr"><span>-&gt;</span></span> 'a</div><div class="cons">| `remove</div><div class="cons">| `ignore</div> ]) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a>
    
      <div class="doc">
        
      <p><code>change tab mem ~f</code> function <code>f</code> is applied to a set of all memory
regions that intersects with <code>mem</code>. If function <code>f</code> evaluates to
<code>`remap (new_mem,y)</code> then all memory regions that have had
intersections with <code>mem</code> will be removed from the new map and
memory region <code>new_mem</code> will be mapped to <code>y</code>. If <code>f</code> evaluates to
<code>`remove</code>, then the regions will be removed, and nothing will be
added. If it evaluates to <code>`skip</code> then the table will be returned
unchanged. Intersections are passed sorted in an ascending order.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:length">
  <a href="index.html#/module:Std/module:Table/val:length" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> length : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p><code>length table</code> returns a number of entries in the table</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:find">
  <a href="index.html#/module:Std/module:Table/val:find" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a option
    
      <div class="doc">
        
      <p><code>find table mem</code> finds an element mapped to the memory region <code>mem</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:find_addr">
  <a href="index.html#/module:Std/module:Table/val:find_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find_addr : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) option
    
      <div class="doc">
        
      <p><code>find_addr tab addr</code> finds a memory region that contains a
specified <code>addr</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:intersections">
  <a href="index.html#/module:Std/module:Table/val:intersections" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> intersections : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>intersections table mem</code> returns all mappings in a <code>table</code> that
have intersections with <code>mem</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:fold_intersections">
  <a href="index.html#/module:Std/module:Table/val:fold_intersections" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold_intersections : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> init:'b <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'b <span class="rarr"><span>-&gt;</span></span> 'b) <span class="rarr"><span>-&gt;</span></span> 'b
    
      <div class="doc">
        
      <p><code>fold_intersections table mem</code> folds over all regions
intersecting with <code>mem</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:has_intersections">
  <a href="index.html#/module:Std/module:Table/val:has_intersections" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> has_intersections : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>has_intersections tab mem</code> is true iff some portion of <code>mem</code> is
is already mapped in <code>tab</code>.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:mem">
  <a href="index.html#/module:Std/module:Table/val:mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mem : _ <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>mem table mem</code> is true if table contains mem region <code>mem</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:next">
  <a href="index.html#/module:Std/module:Table/val:next" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> next : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) option
    
      <div class="doc">
        
      <p><code>next table elt</code> returns element next to <code>elt</code>, if any</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:prev">
  <a href="index.html#/module:Std/module:Table/val:prev" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> prev : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) option
    
      <div class="doc">
        
      <p><code>next table elt</code> returns element preceding to <code>elt</code>, if any</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:min">
  <a href="index.html#/module:Std/module:Table/val:min" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> min : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) option
    
      <div class="doc">
        
      <p><code>min tab</code> return the lowest binding</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:max">
  <a href="index.html#/module:Std/module:Table/val:max" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> max : 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) option
    
      <div class="doc">
        
      <p><code>max tab</code> return the highest binding</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/type:r">
  <a href="index.html#/module:Std/module:Table/type:r" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> ('a, 'm) r
    
      <div class="doc">
        
      <p>Relation multiplicity.
For a given type <code>'a</code> creates type <code>'m</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Table relations</h4>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Table/val:many">
  <a href="index.html#/module:Std/module:Table/val:many" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> many : ('a, 'a <a href="index.html#/module:Std/type:seq">seq</a>) <a href="index.html#/module:Std/module:Table/type:r">r</a>
    
      <div class="doc">
        
      <p><code>0..*</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:at_least_one">
  <a href="index.html#/module:Std/module:Table/val:at_least_one" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> at_least_one : ('a, 'a * 'a <a href="index.html#/module:Std/type:seq">seq</a>) <a href="index.html#/module:Std/module:Table/type:r">r</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:one">
  <a href="index.html#/module:Std/module:Table/val:one" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> one : ('a, 'a) <a href="index.html#/module:Std/module:Table/type:r">r</a>
    
      <div class="doc">
        
      <p><code>1..1</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:maybe_one">
  <a href="index.html#/module:Std/module:Table/val:maybe_one" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> maybe_one : ('a, 'a option) <a href="index.html#/module:Std/module:Table/type:r">r</a>
    
      <div class="doc">
        
      <p><code>0..1</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
      <p><code>link relation t t1 t2</code> takes two tables and returns a mapping
from elements of one table to elements of other table.</p>
      
      <p>Parameter <code>t</code> specifies a <code>hashable</code> typeclass of the type <code>'a</code>. If
type <code>'a</code> implements <code>Hashable</code> interface, then you can obtain it
with <code>hashable</code> function, e.g. <code>Int.hashable</code> with return the
appropriate type class. If <code>'a</code> doesn't implement <code>Hashable</code>, then
it can be implemented manually.</p>
      
      <p>Relation specifies the multiplicity of the relation between
entities from table <code>t1</code> to entities from table <code>t2</code>, and is
summarized below:</p>
      <ul><li><code>one_to_many</code> means that a particular region from table <code>t1</code> can
span several memory regions from table <code>t2</code>. Example: segments
to symbols relation.</li></ul><ul><li><code>one_to_one</code> means that for each value of type <code>'a</code> there is
exactly one value of type <code>'b</code>. This relation should be used with
caution, since it is quantified over _all_ values of type
<code>'a</code>. Indeed, it should be used only for cases, when it can be
guaranteed, that it is impossible to create such value of type
<code>'b</code>, that has no correspondence in table <code>t2</code>. Otherwise,
<code>one_to_maybe_one</code> relation should be used. Example: llvm
machine code to assembly string relation.</li></ul><ul><li><code>one_to_maybe_one</code> means that for each value in table <code>t1</code> there
exists at most one value in table <code>t2</code>. Example: function to
symbol relation.</li></ul><div class="region">
    <h5 class="section level_5">Examples</h5>
    </div>
      <p>
</p>
      <pre><code>          let mc_of_insn  = link one_to:one Insn.hashable insns mcs
          let syms_of_sec = link one_to:many Sec.hashable  secs syms</code></pre>
        
      </div>
    
  <div class="region" id="/module:Std/module:Table/val:link">
  <a href="index.html#/module:Std/module:Table/val:link" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> link : one_to:('b, 'r) <a href="index.html#/module:Std/module:Table/type:r">r</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:hashable">hashable</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'r
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:rev_map">
  <a href="index.html#/module:Std/module:Table/val:rev_map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rev_map : one_to:(<a href="index.html#/module:Std/type:mem">mem</a>, 'r) <a href="index.html#/module:Std/module:Table/type:r">r</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:hashable">hashable</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> ('a <span class="rarr"><span>-&gt;</span></span> 'r) Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>rev_map arity t tab</code> creates a reverse mapping from values of
typeclass <code>t</code> stored in table <code>tab</code> to memory regions.</p>
      
      <p>Note. not every mapping is reversable, for example, trying to obtain
a reverse of surjective mapping as a one-to-one mapping will
result in an error. But surjective mappings can be reversed
using <code>~one_to:many</code> mapping. A particular example of surjective
mapping is <code>symbol</code> tables, in a case when functions can occupy
several non-contiguous regions of memory.</p>
      <div class="region">
    <h5 class="section level_5">Examples</h5>
    </div>
      <p>To create a mapping from a function symbol to sequence of memory
regions with it code:</p>
      <pre><code>rev_map one_to:many Sym.hashable tab</code></pre>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/type:ranged">
  <a href="index.html#/module:Std/module:Table/type:ranged" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a ranged = ?start:<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> ?until:<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a
    
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Iterators</h3>
    </div>
      <p>This section provides a common set of iterators. Note: name
iterator is used in a functional meaning, i.e., an iterator is a
function that takes a data structure and another function, and
applies it to all elements in some manner.</p>
      
      <p>All iterators share some common part of interface that was lifted
to a <code>'a ranged</code> type. When you see</p>
      
      <p><code>('a t -&gt; f:('a -&gt; bool) -&gt; bool) ranged</code></p>
      
      <p>just mentally substitute it with:</p>
      
      <p><code>?start -&gt; ?until -&gt; 'a t -&gt; f:('a -&gt; bool) -&gt; bool</code>.</p>
      
      <p>In other words <code>'f ranged</code> just prepends <code>?start -&gt; ?until -&gt;</code> to
function with type <code>'f</code> (do not forget that <code>'f</code> can be an arrow
type).</p>
      
      <p><code>start</code> and <code>until</code> parameters allows to narrow iteration to some
subset of table. If they are unspecified then iteration would be
performed on all table entries in an ascending order of
addresses. If they are specified, then if <code>start &lt;= until</code>, then
iteration will be performed in the same order but on a specified
subset. In the case, when <code>start &gt; until</code>, iteration will be
performed in a decreasing order.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:exists">
  <a href="index.html#/module:Std/module:Table/val:exists" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exists : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:for_all">
  <a href="index.html#/module:Std/module:Table/val:for_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> for_all : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:exists">
  <a href="index.html#/module:Std/module:Table/val:exists" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exists : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:for_all">
  <a href="index.html#/module:Std/module:Table/val:for_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> for_all : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:count">
  <a href="index.html#/module:Std/module:Table/val:count" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> count : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> int) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:find_if">
  <a href="index.html#/module:Std/module:Table/val:find_if" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find_if : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> 'a option) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:find_map">
  <a href="index.html#/module:Std/module:Table/val:find_map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find_map : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> 'b option) <span class="rarr"><span>-&gt;</span></span> 'b option) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:fold">
  <a href="index.html#/module:Std/module:Table/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'b <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> 'b <span class="rarr"><span>-&gt;</span></span> 'b) <span class="rarr"><span>-&gt;</span></span> 'b) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:iter">
  <a href="index.html#/module:Std/module:Table/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:find_mapi">
  <a href="index.html#/module:Std/module:Table/val:find_mapi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find_mapi : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'b option) <span class="rarr"><span>-&gt;</span></span> 'b option) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:foldi">
  <a href="index.html#/module:Std/module:Table/val:foldi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> foldi : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'b <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'b <span class="rarr"><span>-&gt;</span></span> 'b) <span class="rarr"><span>-&gt;</span></span> 'b) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:iteri">
  <a href="index.html#/module:Std/module:Table/val:iteri" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iteri : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:map">
  <a href="index.html#/module:Std/module:Table/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> 'b) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Table/type:t">t</a>) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:mapi">
  <a href="index.html#/module:Std/module:Table/val:mapi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mapi : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'b) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Table/type:t">t</a>) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:filter">
  <a href="index.html#/module:Std/module:Table/val:filter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> filter : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a>) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
      <div class="doc">
        
      <p>removes all mappings that do not satisfy the predicate</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:filter_map">
  <a href="index.html#/module:Std/module:Table/val:filter_map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> filter_map : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> 'b option) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Table/type:t">t</a>) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:filteri">
  <a href="index.html#/module:Std/module:Table/val:filteri" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> filteri : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a>) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:filter_mapi">
  <a href="index.html#/module:Std/module:Table/val:filter_mapi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> filter_mapi : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'b option) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Table/type:t">t</a>) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:to_sequence">
  <a href="index.html#/module:Std/module:Table/val:to_sequence" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_sequence : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) Core_kernel.Std.Sequence.t) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
      <div class="doc">
        
      <p><code>to_sequence tab</code> converts the table <code>t</code> to a
sequence of key-value pairs.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:regions">
  <a href="index.html#/module:Std/module:Table/val:regions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> regions : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <a href="index.html#/module:Std/type:seq">seq</a>) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
      <div class="doc">
        
      <p><code>regions table</code> returns in an ascending order of addresses all
memory regions mapped in a <code>table</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:elements">
  <a href="index.html#/module:Std/module:Table/val:elements" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> elements : ('a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/type:seq">seq</a>) <a href="index.html#/module:Std/module:Table/type:ranged">ranged</a>
    
      <div class="doc">
        
      <p><code>regions table</code> returns in an ascending order of addresses all
elements mapped in a <code>table</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Table/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Table/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : ('a <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Table/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location">
  <a href="index.html#/module:Std/module:Location" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Location : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>A locations of a chunk of memory</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Location/type:t">
  <a href="index.html#/module:Std/module:Location/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = {<table>
    <tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Location/type:t/field:addr">
  <a href="index.html#/module:Std/module:Location/type:t/field:addr" class="anchor">#</a>
  addr
  </div>
  </td><td>: <a href="index.html#/module:Std/type:addr">addr</a></td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Location/type:t/field:len">
  <a href="index.html#/module:Std/module:Location/type:t/field:len" class="anchor">#</a>
  len
  </div>
  </td><td>: int</td><td>;</td><td></td><td></td><td></td>
  </tr>
    </table>}
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:len">
  <a href="index.html#/module:Std/module:Location/val:len" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> len : <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:addr">
  <a href="index.html#/module:Std/module:Location/val:addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr : <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields">
  <a href="index.html#/module:Std/module:Location/module:Fields" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Fields : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Location/module:Fields/val:names">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:names" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> names : string list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:len">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:len" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> len : (<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:addr">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr : (<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:fold">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> addr:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> len:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:make_creator">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:make_creator" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> make_creator : addr:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> len:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> int) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a>) * 'compile_acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:create">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : addr:<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> len:int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:map">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : addr:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>) <span class="rarr"><span>-&gt;</span></span> len:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> int) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:iter">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : addr:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> len:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:for_all">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:for_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> for_all : addr:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> len:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:exists">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:exists" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exists : addr:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> len:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:to_list">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:to_list" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_list : addr:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> len:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> 'elem__ list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/val:map_poly">
  <a href="index.html#/module:Std/module:Location/module:Fields/val:map_poly" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map_poly : ([&lt; <div class="cons">| `Read</div><div class="cons">| `Set_and_create</div> ], <a href="index.html#/module:Std/module:Location/type:t">t</a>, 'x0) Fieldslib.Field.user <span class="rarr"><span>-&gt;</span></span> 'x0 list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/module:Direct">
  <a href="index.html#/module:Std/module:Location/module:Fields/module:Direct" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Direct : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Location/module:Fields/module:Direct/val:iter">
  <a href="index.html#/module:Std/module:Location/module:Fields/module:Direct/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> addr:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> len:((<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/module:Fields/module:Direct/val:fold">
  <a href="index.html#/module:Std/module:Location/module:Fields/module:Direct/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'acc__ <span class="rarr"><span>-&gt;</span></span> addr:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Location/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> len:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Location/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Location/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Location/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:compare">
  <a href="index.html#/module:Std/module:Location/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:bin_t">
  <a href="index.html#/module:Std/module:Location/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Location/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:bin_read_t">
  <a href="index.html#/module:Std/module:Location/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Location/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Location/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Location/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Location/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Location/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:bin_size_t">
  <a href="index.html#/module:Std/module:Location/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Location/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:bin_write_t">
  <a href="index.html#/module:Std/module:Location/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Location/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Location/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Location/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Location/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:location">
  <a href="index.html#/module:Std/type:location" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> location = <a href="index.html#/module:Std/module:Location">Location</a>.<a href="index.html#/module:Std/module:Location/type:t">t</a>
    
      <div class="doc">
        
      <p>memory location</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend">
  <a href="index.html#/module:Std/module:Backend" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Backend : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>A backend interface.</p>
      
      <p>This interface must be implemented by a backend plugin, and
registered with <code>Image.register</code> function in order to be
accessible for loading images.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/type:perm">
  <a href="index.html#/module:Std/module:Backend/type:perm" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> perm = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Backend/type:perm/cons:R">
  <a href="index.html#/module:Std/module:Backend/type:perm/cons:R" class="anchor">#</a>
  | R
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Backend/type:perm/cons:W">
  <a href="index.html#/module:Std/module:Backend/type:perm/cons:W" class="anchor">#</a>
  | W
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Backend/type:perm/cons:X">
  <a href="index.html#/module:Std/module:Backend/type:perm/cons:X" class="anchor">#</a>
  | X
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Backend/type:perm/cons:Or">
  <a href="index.html#/module:Std/module:Backend/type:perm/cons:Or" class="anchor">#</a>
  | Or <span class="keyword">of</span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> * <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
      <div class="doc">
        
      <p>memory access permissions</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section">
  <a href="index.html#/module:Std/module:Backend/module:Section" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Section : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>A named contiguous part of file with permissions.
Also, known as segment in ELF.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Section/type:t">
  <a href="index.html#/module:Std/module:Backend/module:Section/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = {<table>
    <tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Section/type:t/field:name">
  <a href="index.html#/module:Std/module:Backend/module:Section/type:t/field:name" class="anchor">#</a>
  name
  </div>
  </td><td>: string</td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Section/type:t/field:perm">
  <a href="index.html#/module:Std/module:Backend/module:Section/type:t/field:perm" class="anchor">#</a>
  perm
  </div>
  </td><td>: <a href="index.html#/module:Std/module:Backend/type:perm">perm</a></td><td>;</td><td>(*</td><td class="doc">section's permissions</td><td>*)</td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Section/type:t/field:off">
  <a href="index.html#/module:Std/module:Backend/module:Section/type:t/field:off" class="anchor">#</a>
  off
  </div>
  </td><td>: int</td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Section/type:t/field:location">
  <a href="index.html#/module:Std/module:Backend/module:Section/type:t/field:location" class="anchor">#</a>
  location
  </div>
  </td><td>: <a href="index.html#/module:Std/type:location">location</a></td><td>;</td><td></td><td></td><td></td>
  </tr>
    </table>}
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:location">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> location : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:off">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:off" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> off : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:perm">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> perm : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:name">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Fields : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:names">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:names" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> names : string list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:location">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> location : (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:off">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:off" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> off : (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:perm">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> perm : (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:name">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:fold">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> name:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> perm:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> off:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> location:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:make_creator">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:make_creator" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> make_creator : name:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> string) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> perm:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> off:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> int) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a>) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>) * 'compile_acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:create">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : name:string <span class="rarr"><span>-&gt;</span></span> perm:<a href="index.html#/module:Std/module:Backend/type:perm">perm</a> <span class="rarr"><span>-&gt;</span></span> off:int <span class="rarr"><span>-&gt;</span></span> location:<a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:map">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : name:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> string) <span class="rarr"><span>-&gt;</span></span> perm:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) <span class="rarr"><span>-&gt;</span></span> off:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> int) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a>) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:iter">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : name:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> perm:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> off:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:for_all">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:for_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> for_all : name:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> perm:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> off:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:exists">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:exists" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exists : name:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> perm:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> off:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:to_list">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:to_list" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_list : name:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> perm:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> off:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> 'elem__ list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/val:map_poly">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/val:map_poly" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map_poly : ([&lt; <div class="cons">| `Read</div><div class="cons">| `Set_and_create</div> ], <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, 'x0) Fieldslib.Field.user <span class="rarr"><span>-&gt;</span></span> 'x0 list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/module:Direct">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/module:Direct" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Direct : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/module:Direct/val:iter">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/module:Direct/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> name:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> perm:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> off:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/module:Fields/module:Direct/val:fold">
  <a href="index.html#/module:Std/module:Backend/module:Section/module:Fields/module:Direct/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'acc__ <span class="rarr"><span>-&gt;</span></span> name:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> perm:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> off:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, int) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> location:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:compare">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:bin_t">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:bin_read_t">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:bin_size_t">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:bin_write_t">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Section/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Backend/module:Section/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym">
  <a href="index.html#/module:Std/module:Backend/module:Sym" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Sym : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Symbol definition, that can span several non-contiguous parts of
memory</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Sym/type:t">
  <a href="index.html#/module:Std/module:Backend/module:Sym/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = {<table>
    <tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Sym/type:t/field:name">
  <a href="index.html#/module:Std/module:Backend/module:Sym/type:t/field:name" class="anchor">#</a>
  name
  </div>
  </td><td>: string</td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Sym/type:t/field:is_function">
  <a href="index.html#/module:Std/module:Backend/module:Sym/type:t/field:is_function" class="anchor">#</a>
  is_function
  </div>
  </td><td>: bool</td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Sym/type:t/field:is_debug">
  <a href="index.html#/module:Std/module:Backend/module:Sym/type:t/field:is_debug" class="anchor">#</a>
  is_debug
  </div>
  </td><td>: bool</td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Sym/type:t/field:locations">
  <a href="index.html#/module:Std/module:Backend/module:Sym/type:t/field:locations" class="anchor">#</a>
  locations
  </div>
  </td><td>: <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list</td><td>;</td><td></td><td></td><td></td>
  </tr>
    </table>}
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:locations">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:locations" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> locations : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:is_debug">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:is_debug" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_debug : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:is_function">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:is_function" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_function : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:name">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Fields : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:names">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:names" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> names : string list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:locations">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:locations" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> locations : (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:is_debug">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:is_debug" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_debug : (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:is_function">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:is_function" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_function : (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:name">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:fold">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> name:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> is_function:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> is_debug:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> locations:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:make_creator">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:make_creator" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> make_creator : name:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> string) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> is_function:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> bool) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> is_debug:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> bool) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> locations:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>) * 'compile_acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:create">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : name:string <span class="rarr"><span>-&gt;</span></span> is_function:bool <span class="rarr"><span>-&gt;</span></span> is_debug:bool <span class="rarr"><span>-&gt;</span></span> locations:<a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:map">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : name:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> string) <span class="rarr"><span>-&gt;</span></span> is_function:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> is_debug:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> locations:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:iter">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : name:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> is_function:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> is_debug:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> locations:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:for_all">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:for_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> for_all : name:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> is_function:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> is_debug:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> locations:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:exists">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:exists" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exists : name:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> is_function:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> is_debug:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> locations:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:to_list">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:to_list" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_list : name:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> is_function:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> is_debug:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> locations:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> 'elem__ list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/val:map_poly">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/val:map_poly" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map_poly : ([&lt; <div class="cons">| `Read</div><div class="cons">| `Set_and_create</div> ], <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, 'x0) Fieldslib.Field.user <span class="rarr"><span>-&gt;</span></span> 'x0 list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/module:Direct">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/module:Direct" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Direct : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/module:Direct/val:iter">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/module:Direct/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> name:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> is_function:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> is_debug:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> locations:((<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/module:Fields/module:Direct/val:fold">
  <a href="index.html#/module:Std/module:Backend/module:Sym/module:Fields/module:Direct/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'acc__ <span class="rarr"><span>-&gt;</span></span> name:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> is_function:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> is_debug:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, bool) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> locations:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> * <a href="index.html#/module:Std/type:location">location</a> list <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:compare">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:bin_t">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:bin_read_t">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:bin_size_t">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:bin_write_t">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Sym/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Backend/module:Sym/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region">
  <a href="index.html#/module:Std/module:Backend/module:Region" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Region : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Just a named region of memory. (Known as section in ELF)</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Region/type:t">
  <a href="index.html#/module:Std/module:Backend/module:Region/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = {<table>
    <tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Region/type:t/field:name">
  <a href="index.html#/module:Std/module:Backend/module:Region/type:t/field:name" class="anchor">#</a>
  name
  </div>
  </td><td>: string</td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Region/type:t/field:location">
  <a href="index.html#/module:Std/module:Backend/module:Region/type:t/field:location" class="anchor">#</a>
  location
  </div>
  </td><td>: <a href="index.html#/module:Std/type:location">location</a></td><td>;</td><td></td><td></td><td></td>
  </tr>
    </table>}
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:location">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> location : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:name">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Fields : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:names">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:names" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> names : string list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:location">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> location : (<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:name">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : (<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:fold">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> name:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> location:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:make_creator">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:make_creator" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> make_creator : name:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> string) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a>) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>) * 'compile_acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:create">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : name:string <span class="rarr"><span>-&gt;</span></span> location:<a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:map">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : name:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> string) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a>) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:iter">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : name:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:for_all">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:for_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> for_all : name:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:exists">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:exists" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exists : name:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:to_list">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:to_list" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_list : name:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> 'elem__ list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/val:map_poly">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/val:map_poly" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map_poly : ([&lt; <div class="cons">| `Read</div><div class="cons">| `Set_and_create</div> ], <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, 'x0) Fieldslib.Field.user <span class="rarr"><span>-&gt;</span></span> 'x0 list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/module:Direct">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/module:Direct" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Direct : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/module:Direct/val:iter">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/module:Direct/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> name:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> location:((<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/module:Fields/module:Direct/val:fold">
  <a href="index.html#/module:Std/module:Backend/module:Region/module:Fields/module:Direct/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'acc__ <span class="rarr"><span>-&gt;</span></span> name:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, string) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> location:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>, <a href="index.html#/module:Std/type:location">location</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:compare">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:bin_t">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:bin_read_t">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:bin_size_t">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:bin_write_t">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Region/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Backend/module:Region/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img">
  <a href="index.html#/module:Std/module:Backend/module:Img" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Img : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>A Img from a backend perspective.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Img/type:t">
  <a href="index.html#/module:Std/module:Backend/module:Img/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = {<table>
    <tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Img/type:t/field:arch">
  <a href="index.html#/module:Std/module:Backend/module:Img/type:t/field:arch" class="anchor">#</a>
  arch
  </div>
  </td><td>: <a href="index.html#/module:Std/type:arch">arch</a></td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Img/type:t/field:entry">
  <a href="index.html#/module:Std/module:Backend/module:Img/type:t/field:entry" class="anchor">#</a>
  entry
  </div>
  </td><td>: <a href="index.html#/module:Std/type:addr">addr</a></td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Img/type:t/field:sections">
  <a href="index.html#/module:Std/module:Backend/module:Img/type:t/field:sections" class="anchor">#</a>
  sections
  </div>
  </td><td>: <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list</td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Img/type:t/field:symbols">
  <a href="index.html#/module:Std/module:Backend/module:Img/type:t/field:symbols" class="anchor">#</a>
  symbols
  </div>
  </td><td>: <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list</td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Backend/module:Img/type:t/field:regions">
  <a href="index.html#/module:Std/module:Backend/module:Img/type:t/field:regions" class="anchor">#</a>
  regions
  </div>
  </td><td>: <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list</td><td>;</td><td></td><td></td><td></td>
  </tr>
    </table>}
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:regions">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:regions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> regions : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:symbols">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:symbols" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> symbols : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:sections">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:sections" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sections : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:entry">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:entry" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> entry : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:arch">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> arch : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Fields : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:names">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:names" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> names : string list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:regions">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:regions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> regions : (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:symbols">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:symbols" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> symbols : (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:sections">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:sections" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sections : (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:entry">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:entry" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> entry : (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:arch">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> arch : (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:fold">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> arch:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> entry:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> sections:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> symbols:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> regions:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:make_creator">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:make_creator" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> make_creator : arch:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a>) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> entry:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> sections:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> symbols:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> regions:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) * 'compile_acc__) <span class="rarr"><span>-&gt;</span></span> 'compile_acc__ <span class="rarr"><span>-&gt;</span></span> ('input__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>) * 'compile_acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:create">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : arch:<a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> entry:<a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> sections:<a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> symbols:<a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> regions:<a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:map">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : arch:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a>) <span class="rarr"><span>-&gt;</span></span> entry:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>) <span class="rarr"><span>-&gt;</span></span> sections:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) <span class="rarr"><span>-&gt;</span></span> symbols:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) <span class="rarr"><span>-&gt;</span></span> regions:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:iter">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : arch:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> entry:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> sections:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> symbols:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> regions:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:for_all">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:for_all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> for_all : arch:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> entry:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> sections:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> symbols:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> regions:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:exists">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:exists" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exists : arch:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> entry:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> sections:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> symbols:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> regions:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:to_list">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:to_list" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_list : arch:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> entry:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> sections:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> symbols:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> regions:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> 'elem__) <span class="rarr"><span>-&gt;</span></span> 'elem__ list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/val:map_poly">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/val:map_poly" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map_poly : ([&lt; <div class="cons">| `Read</div><div class="cons">| `Set_and_create</div> ], <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, 'x0) Fieldslib.Field.user <span class="rarr"><span>-&gt;</span></span> 'x0 list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/module:Direct">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/module:Direct" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Direct : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/module:Direct/val:iter">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/module:Direct/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> arch:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> entry:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> sections:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> symbols:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> regions:((<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/module:Fields/module:Direct/val:fold">
  <a href="index.html#/module:Std/module:Backend/module:Img/module:Fields/module:Direct/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> init:'acc__ <span class="rarr"><span>-&gt;</span></span> arch:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:arch">arch</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> entry:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/type:addr">addr</a>) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> sections:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> * <a href="index.html#/module:Std/module:Backend/module:Section">Section</a>.<a href="index.html#/module:Std/module:Backend/module:Section/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> symbols:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Sym">Sym</a>.<a href="index.html#/module:Std/module:Backend/module:Sym/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> regions:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>, <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list) Fieldslib.Field.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Region">Region</a>.<a href="index.html#/module:Std/module:Backend/module:Region/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:compare">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:bin_t">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:bin_read_t">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:bin_size_t">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:bin_write_t">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/module:Img/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Backend/module:Img/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/type:t">
  <a href="index.html#/module:Std/module:Backend/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = Core_kernel.Std.Bigstring.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/module:Img">Img</a>.<a href="index.html#/module:Std/module:Backend/module:Img/type:t">t</a> option
    
      <div class="doc">
        
      <p>the actual interface to be implemented</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:perm_of_sexp">
  <a href="index.html#/module:Std/module:Backend/val:perm_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> perm_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:sexp_of_perm">
  <a href="index.html#/module:Std/module:Backend/val:sexp_of_perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_perm : <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:compare_perm">
  <a href="index.html#/module:Std/module:Backend/val:compare_perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_perm : <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:bin_perm">
  <a href="index.html#/module:Std/module:Backend/val:bin_perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_perm : <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:bin_read_perm">
  <a href="index.html#/module:Std/module:Backend/val:bin_read_perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_perm : <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:__bin_read_perm__">
  <a href="index.html#/module:Std/module:Backend/val:__bin_read_perm__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_perm__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend/type:perm">perm</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:bin_reader_perm">
  <a href="index.html#/module:Std/module:Backend/val:bin_reader_perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_perm : <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:bin_size_perm">
  <a href="index.html#/module:Std/module:Backend/val:bin_size_perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_perm : <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:bin_write_perm">
  <a href="index.html#/module:Std/module:Backend/val:bin_write_perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_perm : <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Backend/val:bin_writer_perm">
  <a href="index.html#/module:Std/module:Backend/val:bin_writer_perm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_perm : <a href="index.html#/module:Std/module:Backend/type:perm">perm</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image">
  <a href="index.html#/module:Std/module:Image" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Image : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Binary Image.</p>
      
        
      </div>
    
      
    <div class="sig">
      <div class="doc">
        <div class="region">
    <h2 class="section level_2">Type definitions</h2>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Image/type:t">
  <a href="index.html#/module:Std/module:Image/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:image">image</a>
    
      <div class="doc">
        
      <p>image</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/type:sec">
  <a href="index.html#/module:Std/module:Image/type:sec" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> sec
    
      <div class="doc">
        
      <p>section</p>
      
      <p>symbol</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/type:sym">
  <a href="index.html#/module:Std/module:Image/type:sym" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> sym
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/type:path">
  <a href="index.html#/module:Std/module:Image/type:path" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> path = string
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Constructing</h6>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Image/type:result">
  <a href="index.html#/module:Std/module:Image/type:result" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> result = (<a href="index.html#/module:Std/module:Image/type:t">t</a> * Core_kernel.Std.Error.t list) Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p>constructing an image can result in actual image and a set
(hopefully empty) of errors occured in a process of decoding an
image, that do not prevent us from actually creating an image. So,
this information messages can be considered as warnings.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:create">
  <a href="index.html#/module:Std/module:Image/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : ?backend:string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:path">path</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:result">result</a>
    
      <div class="doc">
        
      <p><code>create ?backend filename</code> creates an image of the file specified
specified by the <code>filename</code>. If <code>backend</code> is equal to &quot;auto&quot;, then
all backends are tried in order. If only one backend can read this
file (i.e., there is no ambiguity), then image is returned. If
<code>backend</code> is not specifed, then the LLVM backend is used.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:of_string">
  <a href="index.html#/module:Std/module:Image/val:of_string" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_string : ?backend:string <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:result">result</a>
    
      <div class="doc">
        
      <p><code>of_string ?backend ~data</code> creates an image from the specified
<code>data</code>. See <a href="index.html#/module:Std/module:Image/val:create">create</a> for <code>backend</code> parameter.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:of_bigstring">
  <a href="index.html#/module:Std/module:Image/val:of_bigstring" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_bigstring : ?backend:string <span class="rarr"><span>-&gt;</span></span> Core_kernel.Std.Bigstring.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:result">result</a>
    
      <div class="doc">
        
      <p><code>of_bigstring ?backend ~data</code> creates an image from the specified
<code>data</code>. See <a href="index.html#/module:Std/module:Image/val:create">create</a> for <code>backend</code> parameter.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Attributes</h6>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Image/val:entry_point">
  <a href="index.html#/module:Std/module:Image/val:entry_point" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> entry_point : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:filename">
  <a href="index.html#/module:Std/module:Image/val:filename" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> filename : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string option
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:arch">
  <a href="index.html#/module:Std/module:Image/val:arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> arch : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:addr_size">
  <a href="index.html#/module:Std/module:Image/val:addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_size : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr_size">addr_size</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:endian">
  <a href="index.html#/module:Std/module:Image/val:endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> endian : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:data">
  <a href="index.html#/module:Std/module:Image/val:data" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> data : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Core_kernel.Std.Bigstring.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:words">
  <a href="index.html#/module:Std/module:Image/val:words" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> words : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <a href="index.html#/module:Std/type:table">table</a>
    
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Tables</h6>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:sections">
  <a href="index.html#/module:Std/module:Image/val:sections" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sections : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sec">sec</a> <a href="index.html#/module:Std/type:table">table</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:symbols">
  <a href="index.html#/module:Std/module:Image/val:symbols" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> symbols : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sym">sym</a> <a href="index.html#/module:Std/type:table">table</a>
    
      <div class="doc">
        
      <p></p>
      
        
  <div class="tag deprecated">
    <span class="label">Deprecated</span> : this will be removed in a next release
  </div>
  
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:section">
  <a href="index.html#/module:Std/module:Image/val:section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> section : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> <a href="index.html#/module:Std/type:tag">tag</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:symbol">
  <a href="index.html#/module:Std/module:Image/val:symbol" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> symbol : string <a href="index.html#/module:Std/type:tag">tag</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:region">
  <a href="index.html#/module:Std/module:Image/val:region" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> region : string <a href="index.html#/module:Std/type:tag">tag</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:memory">
  <a href="index.html#/module:Std/module:Image/val:memory" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> memory : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:value">value</a> <a href="index.html#/module:Std/type:memmap">memmap</a>
    
      <div class="doc">
        
      <p>returns memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:memory_of_section">
  <a href="index.html#/module:Std/module:Image/val:memory_of_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> memory_of_section : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sec">sec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a>
    
      <div class="doc">
        <div class="region">
    <h6 class="section level_6">Mappings</h6>
    </div>
      <p><code>memory_of_symbol sym</code>: returns the memory of symbol in acending order.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:memory_of_symbol">
  <a href="index.html#/module:Std/module:Image/val:memory_of_symbol" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> memory_of_symbol : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sym">sym</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/type:mem">mem</a> <a href="index.html#/module:Std/type:seq">seq</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:symbols_of_section">
  <a href="index.html#/module:Std/module:Image/val:symbols_of_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> symbols_of_section : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sec">sec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sym">sym</a> <a href="index.html#/module:Std/type:seq">seq</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:section_of_symbol">
  <a href="index.html#/module:Std/module:Image/val:section_of_symbol" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> section_of_symbol : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sym">sym</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sec">sec</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sec">
  <a href="index.html#/module:Std/module:Image/module:Sec" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Sec : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Image Section.
Section is a contiguous region of memory that has
permissions. The same as segment in ELF.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Image/module:Sec/type:t">
  <a href="index.html#/module:Std/module:Image/module:Sec/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/module:Image/type:sec">sec</a>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Image/module:Sec/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sec/val:name">
  <a href="index.html#/module:Std/module:Image/module:Sec/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Image/module:Sec/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sec/val:is_writable">
  <a href="index.html#/module:Std/module:Image/module:Sec/val:is_writable" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_writable : <a href="index.html#/module:Std/module:Image/module:Sec/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sec/val:is_readable">
  <a href="index.html#/module:Std/module:Image/module:Sec/val:is_readable" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_readable : <a href="index.html#/module:Std/module:Image/module:Sec/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sec/val:is_executable">
  <a href="index.html#/module:Std/module:Image/module:Sec/val:is_executable" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_executable : <a href="index.html#/module:Std/module:Image/module:Sec/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sym">
  <a href="index.html#/module:Std/module:Image/module:Sym" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Sym : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>An entity from symbol table</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Image/module:Sym/type:t">
  <a href="index.html#/module:Std/module:Image/module:Sym/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/module:Image/type:sym">sym</a>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Image/module:Sym/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sym/val:name">
  <a href="index.html#/module:Std/module:Image/module:Sym/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Image/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sym/val:is_function">
  <a href="index.html#/module:Std/module:Image/module:Sym/val:is_function" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_function : <a href="index.html#/module:Std/module:Image/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/module:Sym/val:is_debug">
  <a href="index.html#/module:Std/module:Image/module:Sym/val:is_debug" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_debug : <a href="index.html#/module:Std/module:Image/module:Sym/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h2 class="section level_2">Backend Interface</h2>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Image/val:register_backend">
  <a href="index.html#/module:Std/module:Image/val:register_backend" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> register_backend : name:string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Backend">Backend</a>.<a href="index.html#/module:Std/module:Backend/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> [ <div class="cons">| `Ok</div><div class="cons">| `Duplicate</div> ]
    
      <div class="doc">
        
      <p><code>register_backend ~name backend</code> tries to register backend under
the specified <code>name</code>.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Image/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Image/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:sec_of_sexp">
  <a href="index.html#/module:Std/module:Image/val:sec_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sec_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sec">sec</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:sexp_of_sec">
  <a href="index.html#/module:Std/module:Image/val:sexp_of_sec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_sec : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:compare_sec">
  <a href="index.html#/module:Std/module:Image/val:compare_sec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_sec : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sec">sec</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_sec">
  <a href="index.html#/module:Std/module:Image/val:bin_sec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_sec : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_read_sec">
  <a href="index.html#/module:Std/module:Image/val:bin_read_sec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_sec : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:__bin_read_sec__">
  <a href="index.html#/module:Std/module:Image/val:__bin_read_sec__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_sec__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sec">sec</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_reader_sec">
  <a href="index.html#/module:Std/module:Image/val:bin_reader_sec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_sec : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_size_sec">
  <a href="index.html#/module:Std/module:Image/val:bin_size_sec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_sec : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_write_sec">
  <a href="index.html#/module:Std/module:Image/val:bin_write_sec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_sec : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_writer_sec">
  <a href="index.html#/module:Std/module:Image/val:bin_writer_sec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_sec : <a href="index.html#/module:Std/module:Image/type:sec">sec</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:sym_of_sexp">
  <a href="index.html#/module:Std/module:Image/val:sym_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sym_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sym">sym</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:sexp_of_sym">
  <a href="index.html#/module:Std/module:Image/val:sexp_of_sym" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_sym : <a href="index.html#/module:Std/module:Image/type:sym">sym</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:compare_sym">
  <a href="index.html#/module:Std/module:Image/val:compare_sym" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_sym : <a href="index.html#/module:Std/module:Image/type:sym">sym</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sym">sym</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_sym">
  <a href="index.html#/module:Std/module:Image/val:bin_sym" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_sym : <a href="index.html#/module:Std/module:Image/type:sym">sym</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_read_sym">
  <a href="index.html#/module:Std/module:Image/val:bin_read_sym" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_sym : <a href="index.html#/module:Std/module:Image/type:sym">sym</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:__bin_read_sym__">
  <a href="index.html#/module:Std/module:Image/val:__bin_read_sym__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_sym__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Image/type:sym">sym</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_reader_sym">
  <a href="index.html#/module:Std/module:Image/val:bin_reader_sym" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_sym : <a href="index.html#/module:Std/module:Image/type:sym">sym</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_size_sym">
  <a href="index.html#/module:Std/module:Image/val:bin_size_sym" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_sym : <a href="index.html#/module:Std/module:Image/type:sym">sym</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_write_sym">
  <a href="index.html#/module:Std/module:Image/val:bin_write_sym" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_sym : <a href="index.html#/module:Std/module:Image/type:sym">sym</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Image/val:bin_writer_sym">
  <a href="index.html#/module:Std/module:Image/val:bin_writer_sym" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_sym : <a href="index.html#/module:Std/module:Image/type:sym">sym</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap">
  <a href="index.html#/module:Std/module:Memmap" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Memmap : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Memory maps.
Memory map is an assosiative data structure that maps memory
regions to values. Unlike in the Table, memory
regions in the Memmap can intersect in an arbitrary ways. This
data structure is also known as Interval Tree or Segmented Tree.</p>
      
      <p>Underneath the hood it is implemented using augumented AVL tree,
so that all operations are logarithmic.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Memmap/type:t">
  <a href="index.html#/module:Std/module:Memmap/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a t = 'a <a href="index.html#/module:Std/type:memmap">memmap</a>
    
      <div class="doc">
        
      <p>memory map, aka interval trees</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:empty">
  <a href="index.html#/module:Std/module:Memmap/val:empty" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> empty : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>empty</code> map</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:singleton">
  <a href="index.html#/module:Std/module:Memmap/val:singleton" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> singleton : <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>singleton</code> a memory map containing only one memory region</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:min_addr">
  <a href="index.html#/module:Std/module:Memmap/val:min_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> min_addr : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> option
    
      <div class="doc">
        
      <p><code>min_addr map</code> is a minimum addr mapped in <code>map</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:max_addr">
  <a href="index.html#/module:Std/module:Memmap/val:max_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> max_addr : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> option
    
      <div class="doc">
        
      <p><code>max_addr map</code> is a maximum addr mapped in <code>map</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:min_binding">
  <a href="index.html#/module:Std/module:Memmap/val:min_binding" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> min_binding : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) option
    
      <div class="doc">
        
      <p><code>min_binding map</code> is a minimum binding mapped in <code>map</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:max_binding">
  <a href="index.html#/module:Std/module:Memmap/val:max_binding" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> max_binding : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) option
    
      <div class="doc">
        
      <p><code>max_binding map</code> is a maximum binding mapped in <code>map</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:add">
  <a href="index.html#/module:Std/module:Memmap/val:add" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> add : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>add map mem tag</code> adds a new memory region <code>mem</code> tagged with
<code>tag</code>. If the same region was already in the <code>map</code> it will be
tagged with the <code>tag</code> again, even if it has had the same tag.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:dominators">
  <a href="index.html#/module:Std/module:Memmap/val:dominators" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> dominators : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>dominators map mem</code> an ordered sequence of all memory regions,
containing <code>mem</code>. A memory region <code>(x,y)</code> contains region <code>(p,q)</code>,
iff <code>p &gt;= x &amp;&amp; q &lt;= y</code>, where memory regions are depicted using
closed intervals.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:intersections">
  <a href="index.html#/module:Std/module:Memmap/val:intersections" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> intersections : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>intersections map mem</code> an ordered sequence of all memory regions,
that intersects with <code>mem</code>. Memory region <code>(x,y)</code> intersects with
region <code>(p,q)</code> iff there exists such <code>z</code> that</p>
      
      <p><code>z &gt;= p || z &lt;= q &amp;&amp; z &gt;= x &amp;&amp; z &lt;= y</code>.</p>
      
      <p>In other words if there exists such byte that belongs to both memory
regions.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:intersects">
  <a href="index.html#/module:Std/module:Memmap/val:intersects" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> intersects : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>intersects map mem</code> is true if <code>intersections map mem</code> is not empty</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:dominates">
  <a href="index.html#/module:Std/module:Memmap/val:dominates" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> dominates : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>dominates map mem</code> if there is a non empty set of dominators</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:contains">
  <a href="index.html#/module:Std/module:Memmap/val:contains" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> contains : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>contains map addr</code> true if there exists such memory region <code>mem</code>,
that <code>Memory.contains mem addr</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:lookup">
  <a href="index.html#/module:Std/module:Memmap/val:lookup" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lookup : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>lookup map addr</code> returns an ordered sequence of all memory
containing the <code>addr</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:map">
  <a href="index.html#/module:Std/module:Memmap/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> 'b) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>map m f</code> returns a new map with each tag mapped
with function <code>f</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:mapi">
  <a href="index.html#/module:Std/module:Memmap/val:mapi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mapi : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'b) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>mapi m f</code> the same as <code>map</code>, but <code>f</code> is called with two
arguments: <code>mem</code> and <code>tag</code>, where <code>mem</code> is a memory region,
and <code>tag</code> is a <code>tag</code> assosiated with that region.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:filter_map">
  <a href="index.html#/module:Std/module:Memmap/val:filter_map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> filter_map : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:('a <span class="rarr"><span>-&gt;</span></span> 'b option) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>filter_map m f</code> creates a new map by applying a function <code>f</code> to
each tag. If <code>f</code> returns <code>Some x</code> then this region will be mapped
to <code>x</code> in a new map, otherwise it will be dropped.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:filter_mapi">
  <a href="index.html#/module:Std/module:Memmap/val:filter_mapi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> filter_mapi : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> f:(<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'b option) <span class="rarr"><span>-&gt;</span></span> 'b <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>filter_mapi</code> is like <code>filter_map</code> but use function also accepts
would assosiated memory region</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:remove">
  <a href="index.html#/module:Std/module:Memmap/val:remove" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> remove : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>remove map mem</code> removes all bindings to <code>mem</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:remove_intersections">
  <a href="index.html#/module:Std/module:Memmap/val:remove_intersections" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> remove_intersections : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>remove_intersections map mem</code> removes all bindings that
that intersects with <code>mem</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:remove_dominators">
  <a href="index.html#/module:Std/module:Memmap/val:remove_dominators" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> remove_dominators : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a>
    
      <div class="doc">
        
      <p><code>remove_dominators map mem</code> removes all bindings that are
dominators to <code>mem</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:to_sequence">
  <a href="index.html#/module:Std/module:Memmap/val:to_sequence" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_sequence : 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * 'a) Core_kernel.Std.Sequence.t
    
      <div class="doc">
        
      <p><code>to_sequence map</code> converts the memmap <code>'a t</code> to a sequence of
key-value pairs</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Container.S1 <span class="keyword">with</span> <span class="keyword">type</span> 'a t := 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Memmap/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Memmap/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : ('a <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Memmap/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:disasm">
  <a href="index.html#/module:Std/label:disasm" class="anchor">#</a>
  
    <h1 class="section level_1">Disassembler</h1>
    
  </div>
  
      <p>Disassembler library has two interfaces. An expert interface,
that provides access to a low-level representation. And a normal
one, that hides all the complexities of the expert interface,
but is less efficient and less flexible. If unsure, use the latter.</p>
      <div class="region">
    <h2 class="section level_2">Architecture specific libraries</h2>
    </div>
      <p>Also, this library provide architecture specific libraries, that
tries to represent structurally each particular
architecture. Currently only <code>ARM</code> module, has first class
assembler, i.e., constructors for opcodes, operands, etc.
platform-specific stuff.</p>
      
        
      </div>
    
      <div class="doc">
        <div class="region">
    <h2 class="section level_2">Convenient interface to the disassembler.</h2>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/type:disasm">
  <a href="index.html#/module:Std/type:disasm" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> disasm
    
      <div class="doc">
        
      <p>value of type <code>disasm</code> is a result of the disassembling of a
memory region. To create values of this type use <code>disassemble</code>
function</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:insn">
  <a href="index.html#/module:Std/type:insn" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> insn
    
      <div class="doc">
        
      <p>values of type <code>insn</code> represents machine instructions decoded
from the given piece of memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:block">
  <a href="index.html#/module:Std/type:block" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> block
    
      <div class="doc">
        
      <p><code>block</code> is a region of memory that is believed to be a basic block
of control flow graph to the best of our knowledge.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:disassemble">
  <a href="index.html#/module:Std/val:disassemble" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> disassemble : ?roots:<a href="index.html#/module:Std/type:addr">addr</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:disasm">disasm</a>
    
      <div class="doc">
        
      <p><code>disassemble ?roots arch mem</code> disassemble provided memory region
<code>mem</code> using best available algorithm and backend for the specified
<code>arch</code>. Roots, if provided, should point to memory regions, that
are believed to contain code. At best, this should be a list of
function starts. If no roots are provided, then the starting
address of the provided memory <code>mem</code> will be used as a root.</p>
      
      <p>The returned value will contain all memory reachable from the
given set of roots, at our best knowledge.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:disassemble_image">
  <a href="index.html#/module:Std/val:disassemble_image" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> disassemble_image : ?roots:<a href="index.html#/module:Std/type:addr">addr</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:image">image</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:disasm">disasm</a>
    
      <div class="doc">
        
      <p><code>disassemble_image image</code> disassemble given image.
Will take executable sections of the image and disassemble it,
applying <code>disassemble</code> function. If no roots are specified, then
symbol table will be used as a source of roots. If file doesn't
contain one, then entry point will be used.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:disassemble_file">
  <a href="index.html#/module:Std/val:disassemble_file" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> disassemble_file : ?roots:<a href="index.html#/module:Std/type:addr">addr</a> list <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:disasm">disasm</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>disassemble_file ?roots path</code> takes a path to a binary and
disassembles it</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:disassemble_file_exn">
  <a href="index.html#/module:Std/val:disassemble_file_exn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> disassemble_file_exn : ?roots:<a href="index.html#/module:Std/type:addr">addr</a> list <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:disasm">disasm</a>
    
      <div class="doc">
        
      <p><code>disassemble_file ?roots path</code> takes a path to a binary and
disassembles it</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:linear_sweep">
  <a href="index.html#/module:Std/val:linear_sweep" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> linear_sweep : <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/type:insn">insn</a> option) list Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>linear_sweep arch mem</code> will perform a linear sweep disassembly on
the specified memory <code>mem</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:linear_sweep_exn">
  <a href="index.html#/module:Std/val:linear_sweep_exn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> linear_sweep_exn : <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/type:insn">insn</a> option) list
    
      <div class="doc">
        
      <p><code>linear_sweep_exn</code> same as <code>linear_sweep</code>, but raises an
exception, instead of returning <code>Or_error</code> monad</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm">
  <a href="index.html#/module:Std/module:Disasm" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Disasm : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Disassembled program.</p>
      
      <p>This module provides an interface for values of type <code>disasm</code>.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Disasm/type:t">
  <a href="index.html#/module:Std/module:Disasm/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:disasm">disasm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:insns">
  <a href="index.html#/module:Std/module:Disasm/val:insns" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> insns : <a href="index.html#/module:Std/module:Disasm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/type:insn">insn</a>) <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p>returns all instructions that was successfully decoded in an
ascending order of their addresses. Each instruction is
accompanied with its block of memory.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:blocks">
  <a href="index.html#/module:Std/module:Disasm/val:blocks" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> blocks : <a href="index.html#/module:Std/module:Disasm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:block">block</a> <a href="index.html#/module:Std/type:table">table</a>
    
      <div class="doc">
        
      <p>returns a mapping from memory regions to basic blocks. One may
think this as a whole program CFG that is constructed on the
fly.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:insn_at_mem">
  <a href="index.html#/module:Std/module:Disasm/val:insn_at_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> insn_at_mem : <a href="index.html#/module:Std/module:Disasm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:insn">insn</a> option
    
      <div class="doc">
        
      <p>performs lookup for an instruction that occupies exactly
the given piece of memory. If you need to find all instructions
that lies in a given region of memory, use <code>insns_of_mem</code> or
<code>insns_of_block</code> functions.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:insns_at_mem">
  <a href="index.html#/module:Std/module:Disasm/val:insns_at_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> insns_at_mem : <a href="index.html#/module:Std/module:Disasm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/type:insn">insn</a>) <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>insns_of_mem</code> returns all instructions that occupies memory
regions that have intersections with <code>mem</code>.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:mems_of_insn">
  <a href="index.html#/module:Std/module:Disasm/val:mems_of_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mems_of_insn : <a href="index.html#/module:Std/module:Disasm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p>returns a sequence of memory regions occupied by the given
instruction.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:insn_at_addr">
  <a href="index.html#/module:Std/module:Disasm/val:insn_at_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> insn_at_addr : <a href="index.html#/module:Std/module:Disasm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/type:insn">insn</a>) option
    
      <div class="doc">
        
      <p><code>insn_at_addr t addr</code> finds instruction to which the <code>addr</code>
belongs. In other words if instruction at given address is
found it doesn't mean, that it starts at this address.
Consider comparison with <code>min_addr</code> if you need to match
starting address only.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:span">
  <a href="index.html#/module:Std/module:Disasm/val:span" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> span : <a href="index.html#/module:Std/module:Disasm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p>returns a blocks of memory that was visited during the
disassembly. The regions are merged with <code>Memory.merge</code> if
possible. So it returns the least possible amount of contiguous
memory regions</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/type:error">
  <a href="index.html#/module:Std/module:Disasm/type:error" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> error = [ <div class="cons">| `Failed <span class="keyword">of</span> Core_kernel.Std.Error.t</div><div class="cons">| `Failed_to_disasm <span class="keyword">of</span> <a href="index.html#/module:Std/type:mem">mem</a></div><div class="cons">| `Failed_to_lift <span class="keyword">of</span> <a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/type:insn">insn</a> * Core_kernel.Std.Error.t</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/module:Error">
  <a href="index.html#/module:Std/module:Disasm/module:Error" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Error : <a href="index.html#/module:Std/modtype:Printable">Printable</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> := <a href="index.html#/module:Std/module:Disasm/type:error">error</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:errors">
  <a href="index.html#/module:Std/module:Disasm/val:errors" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> errors : <a href="index.html#/module:Std/module:Disasm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/module:Disasm/type:error">error</a>) <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p>returns a list of all errors and warnings that occurred during
the disassembling</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:insn">
  <a href="index.html#/module:Std/module:Disasm/val:insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> insn : <a href="index.html#/module:Std/type:insn">insn</a> <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>Tags to annotate memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:block">
  <a href="index.html#/module:Std/module:Disasm/val:block" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> block : <a href="index.html#/module:Std/type:block">block</a> <a href="index.html#/module:Std/type:tag">tag</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:error">
  <a href="index.html#/module:Std/module:Disasm/val:error" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> error : <a href="index.html#/module:Std/module:Disasm/type:error">error</a> <a href="index.html#/module:Std/type:tag">tag</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm/val:sexp_of_error">
  <a href="index.html#/module:Std/module:Disasm/val:sexp_of_error" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_error : <a href="index.html#/module:Std/module:Disasm/type:error">error</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind">
  <a href="index.html#/module:Std/module:Kind" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Kind : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Kinds of instructions</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Kind/type:branch">
  <a href="index.html#/module:Std/module:Kind/type:branch" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> branch = [ <div class="cons">| `Conditional_branch</div><div class="cons">| `Unconditional_branch</div><div class="cons">| `Indirect_branch</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:all_of_branch">
  <a href="index.html#/module:Std/module:Kind/val:all_of_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/type:affecting_control">
  <a href="index.html#/module:Std/module:Kind/type:affecting_control" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> affecting_control = [ <div class="cons">| <a href="index.html#/module:Std/module:Kind/type:branch">branch</a></div><div class="cons">| `Return</div><div class="cons">| `Call</div><div class="cons">| `Barrier</div><div class="cons">| `Terminator</div><div class="cons">| `May_affect_control_flow</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:all_of_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:all_of_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/type:having_side_effect">
  <a href="index.html#/module:Std/module:Kind/type:having_side_effect" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> having_side_effect = [ <div class="cons">| `May_load</div><div class="cons">| `May_store</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:all_of_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:all_of_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/type:t">
  <a href="index.html#/module:Std/module:Kind/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = [ <div class="cons">| <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a></div><div class="cons">| <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a></div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:all">
  <a href="index.html#/module:Std/module:Kind/val:all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all : <a href="index.html#/module:Std/module:Kind/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:branch_of_sexp">
  <a href="index.html#/module:Std/module:Kind/val:branch_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> branch_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:branch">branch</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:__branch_of_sexp__">
  <a href="index.html#/module:Std/module:Kind/val:__branch_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __branch_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:branch">branch</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:sexp_of_branch">
  <a href="index.html#/module:Std/module:Kind/val:sexp_of_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:compare_branch">
  <a href="index.html#/module:Std/module:Kind/val:compare_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_branch">
  <a href="index.html#/module:Std/module:Kind/val:bin_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_read_branch">
  <a href="index.html#/module:Std/module:Kind/val:bin_read_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:__bin_read_branch__">
  <a href="index.html#/module:Std/module:Kind/val:__bin_read_branch__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_branch__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:branch">branch</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_reader_branch">
  <a href="index.html#/module:Std/module:Kind/val:bin_reader_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_size_branch">
  <a href="index.html#/module:Std/module:Kind/val:bin_size_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_write_branch">
  <a href="index.html#/module:Std/module:Kind/val:bin_write_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_writer_branch">
  <a href="index.html#/module:Std/module:Kind/val:bin_writer_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_branch : <a href="index.html#/module:Std/module:Kind/type:branch">branch</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:affecting_control_of_sexp">
  <a href="index.html#/module:Std/module:Kind/val:affecting_control_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> affecting_control_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:__affecting_control_of_sexp__">
  <a href="index.html#/module:Std/module:Kind/val:__affecting_control_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __affecting_control_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:sexp_of_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:sexp_of_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:compare_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:compare_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:bin_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_read_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:bin_read_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:__bin_read_affecting_control__">
  <a href="index.html#/module:Std/module:Kind/val:__bin_read_affecting_control__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_affecting_control__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_reader_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:bin_reader_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_size_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:bin_size_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_write_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:bin_write_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_writer_affecting_control">
  <a href="index.html#/module:Std/module:Kind/val:bin_writer_affecting_control" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_affecting_control : <a href="index.html#/module:Std/module:Kind/type:affecting_control">affecting_control</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:having_side_effect_of_sexp">
  <a href="index.html#/module:Std/module:Kind/val:having_side_effect_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> having_side_effect_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:__having_side_effect_of_sexp__">
  <a href="index.html#/module:Std/module:Kind/val:__having_side_effect_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __having_side_effect_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:sexp_of_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:sexp_of_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:compare_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:compare_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:bin_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_read_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:bin_read_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:__bin_read_having_side_effect__">
  <a href="index.html#/module:Std/module:Kind/val:__bin_read_having_side_effect__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_having_side_effect__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_reader_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:bin_reader_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_size_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:bin_size_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_write_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:bin_write_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_writer_having_side_effect">
  <a href="index.html#/module:Std/module:Kind/val:bin_writer_having_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_having_side_effect : <a href="index.html#/module:Std/module:Kind/type:having_side_effect">having_side_effect</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Kind/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:__t_of_sexp__">
  <a href="index.html#/module:Std/module:Kind/val:__t_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __t_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Kind/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Kind/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:compare">
  <a href="index.html#/module:Std/module:Kind/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Kind/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_t">
  <a href="index.html#/module:Std/module:Kind/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Kind/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_read_t">
  <a href="index.html#/module:Std/module:Kind/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Kind/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Kind/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Kind/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Kind/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_size_t">
  <a href="index.html#/module:Std/module:Kind/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Kind/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_write_t">
  <a href="index.html#/module:Std/module:Kind/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Kind/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Kind/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Kind/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Kind/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:reg">
  <a href="index.html#/module:Std/type:reg" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> reg
    
      <div class="doc">
        
      <p>abstract and opaque register</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:imm">
  <a href="index.html#/module:Std/type:imm" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> imm
    
      <div class="doc">
        
      <p>opaque immediate value</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:fmm">
  <a href="index.html#/module:Std/type:fmm" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> fmm
    
      <div class="doc">
        
      <p>floating point value</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:kind">
  <a href="index.html#/module:Std/type:kind" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> kind = <a href="index.html#/module:Std/module:Kind">Kind</a>.<a href="index.html#/module:Std/module:Kind/type:t">t</a>
    
      <div class="doc">
        
      <p>kind of instruction</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Reg">
  <a href="index.html#/module:Std/module:Reg" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Reg : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Register.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Reg/type:t">
  <a href="index.html#/module:Std/module:Reg/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:reg">reg</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Reg/val:code">
  <a href="index.html#/module:Std/module:Reg/val:code" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> code : <a href="index.html#/module:Std/module:Reg/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p>unique number representig a register</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Reg/val:name">
  <a href="index.html#/module:Std/module:Reg/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Reg/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p>name of a register</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Reg/type:t">t</a> 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Imm">
  <a href="index.html#/module:Std/module:Imm" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Imm : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Integer immediate operand</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Imm/type:t">
  <a href="index.html#/module:Std/module:Imm/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:imm">imm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Imm/val:to_word">
  <a href="index.html#/module:Std/module:Imm/val:to_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_word : <a href="index.html#/module:Std/module:Imm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> width:int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> option
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Imm/val:to_int64">
  <a href="index.html#/module:Std/module:Imm/val:to_int64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_int64 : <a href="index.html#/module:Std/module:Imm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int64
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Imm/val:to_int">
  <a href="index.html#/module:Std/module:Imm/val:to_int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_int : <a href="index.html#/module:Std/module:Imm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int option
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Imm/type:t">t</a> 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Fmm">
  <a href="index.html#/module:Std/module:Fmm" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Fmm : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Floating point immediate operand</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Fmm/type:t">
  <a href="index.html#/module:Std/module:Fmm/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:fmm">fmm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Fmm/val:to_float">
  <a href="index.html#/module:Std/module:Fmm/val:to_float" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_float : <a href="index.html#/module:Std/module:Fmm/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> float
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Fmm/type:t">t</a> 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op">
  <a href="index.html#/module:Std/module:Op" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Op : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Operand</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Op/type:t">
  <a href="index.html#/module:Std/module:Op/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Op/type:t/cons:Reg">
  <a href="index.html#/module:Std/module:Op/type:t/cons:Reg" class="anchor">#</a>
  | Reg <span class="keyword">of</span> <a href="index.html#/module:Std/type:reg">reg</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Op/type:t/cons:Imm">
  <a href="index.html#/module:Std/module:Op/type:t/cons:Imm" class="anchor">#</a>
  | Imm <span class="keyword">of</span> <a href="index.html#/module:Std/type:imm">imm</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Op/type:t/cons:Fmm">
  <a href="index.html#/module:Std/module:Op/type:t/cons:Fmm" class="anchor">#</a>
  | Fmm <span class="keyword">of</span> <a href="index.html#/module:Std/type:fmm">fmm</a>
  </div>
  </td><td>(*</td><td class="doc">Normalized comparison.</td><td>*)</td></tr>
    </table>
    
      <div class="doc">
        
      <p>operand</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/module:Normalized">
  <a href="index.html#/module:Std/module:Op/module:Normalized" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Normalized : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Op/module:Normalized/val:compare">
  <a href="index.html#/module:Std/module:Op/module:Normalized/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/module:Normalized/val:hash">
  <a href="index.html#/module:Std/module:Op/module:Normalized/val:hash" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> hash : <a href="index.html#/module:Std/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/module:Normalized/val:compare_ops">
  <a href="index.html#/module:Std/module:Op/module:Normalized/val:compare_ops" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_ops : <a href="index.html#/module:Std/module:Op/type:t">t</a> array <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Op/type:t">t</a> array <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:pp_adt">
  <a href="index.html#/module:Std/module:Op/val:pp_adt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pp_adt : <a href="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html">Format</a>.<a href="../../../../../ocaml.4.02.1+doc/stdlib/format/index.html#/type:formatter">formatter</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Op/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Op/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Op/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Op/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Op/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:compare">
  <a href="index.html#/module:Std/module:Op/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:bin_t">
  <a href="index.html#/module:Std/module:Op/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:bin_read_t">
  <a href="index.html#/module:Std/module:Op/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Op/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Op/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Op/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:bin_size_t">
  <a href="index.html#/module:Std/module:Op/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:bin_write_t">
  <a href="index.html#/module:Std/module:Op/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Op/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Op/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:op">
  <a href="index.html#/module:Std/type:op" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> op = <a href="index.html#/module:Std/module:Op">Op</a>.<a href="index.html#/module:Std/module:Op/type:t">t</a>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Application Binary Interface</h3>
    </div>
      <p>Under this name, we're gathering several different concepts, like:</p>
      <ul><li>calling convention</li><li>stack frame organization</li><li>data representation</li><li>special functions</li></ul>
      <p>Later we may extend the ABI class to handle system calls, type
inference and other stuff.</p>
      
      <p>Each ABI object is constructed specifically to a particular
symbol using the following functional constructor, of the
following type:</p>
      
      <p><code>?image:image -&gt; ?sym:string -&gt; mem -&gt; block -&gt; abi option</code></p>
      
      <p>ABI constructors are registered in the target specific lifter,
and constructed for each symbol. Afterwards a set of most
(and equally) applicable ABIs is provided to a calling part,
to which it is left the final decision on how to disambiguate
them.</p>
      
        
      </div>
    
  <div class="region" id="/module:Std/classtype:abi">
  <a href="index.html#/module:Std/classtype:abi" class="anchor">#</a>
  
  <div class="classtype">
    <span class="keyword">class type</span> abi = 
  <div class="region" id="/module:Std/classtype:abi/method:id">
  <a href="index.html#/module:Std/classtype:abi/method:id" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> id : string list
  
      <div class="doc">
        
      <p>unique identifier of the ABI.
Used to communicate between to ABI's.</p>
      
      <p>The order of id parts should be from more specific, to less
specific, i.e. in reverse order (so that deriving classes can
easily append their own parts). The architecture shouldn't be
specified in the id, as two ABIs from different architectures
should never met.</p>
      
      <p>A good start whould be to use:
<code>specific; compiler; os; vendor</code></p>
      
      <p>Example: <code>&quot;*exit&quot;; &quot;gnueabi&quot;; &quot;linux&quot;; &quot;unknown&quot;</code></p>
      
      <p>Will encode an ABI of <code>exit</code> family of functions for ARM linux
gnueabi. The recommended printing format for the ABI is to
append the arch name and print all constituents of the name from
right to left, using &quot;-&quot; symbol as a separator.</p>
      
      <p>In any case, the meaning of the identifier is specific to a
particular family of ABIs, that are, usually inherit the same
parent or set of parents.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/classtype:abi/method:specific">
  <a href="index.html#/module:Std/classtype:abi/method:specific" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> specific : bool
  
      <div class="doc">
        
      <p><code>self#specific</code> is <code>true</code> if this ABI is specific
for the provided function. The <code>specific</code> ABI is always more
preferrable to non-specific one. If more than one specific
ABIs is applicable for the provided symbol, than the normal
resolution process will be used (see method <code>choose</code>)</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/classtype:abi/method:choose">
  <a href="index.html#/module:Std/classtype:abi/method:choose" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> choose : <a href="index.html#/module:Std/classtype:abi">abi</a> <span class="rarr"><span>-&gt;</span></span> int
  
      <div class="doc">
        
      <p><code>self#choose other</code> used to sort a set of applicable ABI.</p>
      
      <p>Must return:
</p>
      <ul><li><code>0</code> if <code>other</code> abi is not known or is considered equaly
applicable for the given context.</li><li><code>1</code> if <code>other</code> abi is known, and <code>self</code> is preferrable
to <code>other</code></li><li><code>-1</code> if <code>other</code> abi is more preferrable. This value can
be even returned when the other abi is not known to <code>self</code>.</li></ul>
      <p>In case of inconsistency the solving mechanism will consider
inconsistent abi's as equal. The examples of inconsistent
comparison results are: both abis preferred each other, or
both abis claimed that they are preferrable.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/classtype:abi/method:return_value">
  <a href="index.html#/module:Std/classtype:abi/method:return_value" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> return_value : <a href="index.html#/module:Std/type:exp">exp</a> option
  
      <div class="doc">
        
      <p><code>return_value</code> returns an expression, that can be used to return
a value from a function. Use <code>Bil.concat</code> to represent return
value that doesn't fit into one register</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/classtype:abi/method:args">
  <a href="index.html#/module:Std/classtype:abi/method:args" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> args : (string option * <a href="index.html#/module:Std/type:exp">exp</a>) list
  
      <div class="doc">
        
      <p><code>args</code> returns a list of expressions that represents
arguments of the given function. Each expression can be
annotated with suggested name</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/classtype:abi/method:vars">
  <a href="index.html#/module:Std/classtype:abi/method:vars" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> vars : (string option * <a href="index.html#/module:Std/type:exp">exp</a>) list
  
      <div class="doc">
        
      <p><code>vars</code> returns a list of expressions, that represents
local variables of the function</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/classtype:abi/method:records">
  <a href="index.html#/module:Std/classtype:abi/method:records" class="anchor">#</a>
  
  <div class="method">
  <span class="keyword">method</span> records : (string option * <a href="index.html#/module:Std/type:exp">exp</a>) list list
  
      <div class="doc">
        
      <p><code>records</code> returns a list of records, found in the symbol.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    
      <div class="doc">
        
      <p>ABI interface.
Each ABI object must implement this interface.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:abi_constructor">
  <a href="index.html#/module:Std/type:abi_constructor" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> abi_constructor = ?image:<a href="index.html#/module:Std/type:image">image</a> <span class="rarr"><span>-&gt;</span></span> ?sym:string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:block">block</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/classtype:abi">abi</a>
    
      <div class="doc">
        
      <p>symbol name may be provided if known. Also an access
to the whole binary image is provided if there is one.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">A BIL model of CPU</h3>
    </div>
      <p>In general this is a model of a processor architecture, involving
ALU, processing unit, registers and memory.</p>
      
        
      </div>
    
  <div class="region" id="/module:Std/modtype:CPU">
  <a href="index.html#/module:Std/modtype:CPU" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> CPU = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Abstract interface to CPU</p>
      
        
      </div>
    
    
    <div class="sig">
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Minimum set of required definitions</h3>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/modtype:CPU/val:gpr">
  <a href="index.html#/module:Std/modtype:CPU/val:gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> gpr : <a href="index.html#/module:Std/module:Var">Var</a>.Set.t
    
      <div class="doc">
        
      <p>A set of general purpose registers</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:mem">
  <a href="index.html#/module:Std/modtype:CPU/val:mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mem : <a href="index.html#/module:Std/type:var">var</a>
    
      <div class="doc">
        
      <p>Memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:pc">
  <a href="index.html#/module:Std/modtype:CPU/val:pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pc : <a href="index.html#/module:Std/type:var">var</a>
    
      <div class="doc">
        
      <p>Program counter</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:sp">
  <a href="index.html#/module:Std/modtype:CPU/val:sp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sp : <a href="index.html#/module:Std/type:var">var</a>
    
      <div class="doc">
        
      <p>Stack pointer</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:zf">
  <a href="index.html#/module:Std/modtype:CPU/val:zf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> zf : <a href="index.html#/module:Std/type:var">var</a>
    
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Flag registers</h4>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:cf">
  <a href="index.html#/module:Std/modtype:CPU/val:cf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> cf : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:vf">
  <a href="index.html#/module:Std/modtype:CPU/val:vf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> vf : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:nf">
  <a href="index.html#/module:Std/modtype:CPU/val:nf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> nf : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:addr_of_pc">
  <a href="index.html#/module:Std/modtype:CPU/val:addr_of_pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_of_pc : <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_reg">
  <a href="index.html#/module:Std/modtype:CPU/val:is_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_reg : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Predicates</h3>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_flag">
  <a href="index.html#/module:Std/modtype:CPU/val:is_flag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_flag : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_sp">
  <a href="index.html#/module:Std/modtype:CPU/val:is_sp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_sp : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_bp">
  <a href="index.html#/module:Std/modtype:CPU/val:is_bp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_bp : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_pc">
  <a href="index.html#/module:Std/modtype:CPU/val:is_pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_pc : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_zf">
  <a href="index.html#/module:Std/modtype:CPU/val:is_zf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_zf : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_cf">
  <a href="index.html#/module:Std/modtype:CPU/val:is_cf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_cf : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_vf">
  <a href="index.html#/module:Std/modtype:CPU/val:is_vf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_vf : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_nf">
  <a href="index.html#/module:Std/modtype:CPU/val:is_nf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_nf : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:CPU/val:is_mem">
  <a href="index.html#/module:Std/modtype:CPU/val:is_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_mem : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:ABI">
  <a href="index.html#/module:Std/modtype:ABI" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> ABI = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Abstract interface for ABI.</p>
      
      <p>Each lifted architecture provides an ABI module, that implements
a superset of this interface.</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:ABI/val:create">
  <a href="index.html#/module:Std/modtype:ABI/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : ?merge:(<a href="index.html#/module:Std/classtype:abi">abi</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/classtype:abi">abi</a>) <span class="rarr"><span>-&gt;</span></span> ?image:<a href="index.html#/module:Std/type:image">image</a> <span class="rarr"><span>-&gt;</span></span> ?sym:string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:block">block</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/classtype:abi">abi</a>
    
      <div class="doc">
        
      <p>creates a set of ABI for the provided symbol.
Until <code>all</code> parameter is set to true the ABI will be
disambiguated, using <code>choose</code> method. Only equally
valid ABI are returned.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:ABI/val:merge">
  <a href="index.html#/module:Std/modtype:ABI/val:merge" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> merge : <a href="index.html#/module:Std/classtype:abi">abi</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/classtype:abi">abi</a>
    
      <div class="doc">
        
      <p><code>merge abis</code> create an abi that tries to take best from all
provided abi. If the input list is empty, then the stub abi
will be returned.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:ABI/val:merge_id">
  <a href="index.html#/module:Std/modtype:ABI/val:merge_id" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> merge_id : string list <span class="rarr"><span>-&gt;</span></span> string list <span class="rarr"><span>-&gt;</span></span> string list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:ABI/class:stub">
  <a href="index.html#/module:Std/modtype:ABI/class:stub" class="anchor">#</a>
  
  <div class="class">
    <span class="keyword">class</span> stub : <a href="index.html#/module:Std/classtype:abi">abi</a>
    
      <div class="doc">
        
      <p>ABI that understands nothing. All methods are dump stubs.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:ABI/val:to_string">
  <a href="index.html#/module:Std/modtype:ABI/val:to_string" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_string : <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> string list <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p>registers given ABI under the given target</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:ABI/val:register">
  <a href="index.html#/module:Std/modtype:ABI/val:register" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> register : <a href="index.html#/module:Std/type:abi_constructor">abi_constructor</a> <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Navigating through CFG</h3>
    </div>
      <p>On a disassembly level CFG is represented as a linked set of
basic blocks. Each basic block has a sequence of successors
and predecessors. To get a set of block use <code>Disasm.blocks</code>
function. To navigate through use any combinations of the
following methods:</p>
      <ul><li>recurse through successors and predecessors, taking care
of possible loops;</li><li>use <code>Block.dfs</code> to search in depth-first execution order;</li><li>use <code>ocamlgraph</code> library and <code>to_graph</code> helper functions.</li></ul>
        
      </div>
    
  <div class="region" id="/module:Std/type:jump">
  <a href="index.html#/module:Std/type:jump" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> jump = [ <div class="cons">| `Jump</div><div class="cons">| `Cond</div> ]
    
      <div class="doc">
        
      <p>a jump kind.
A jump to another block can be conditional or unconditional.</p>
      
      <p>This type defines a relation between two basic blocks.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/type:edge">
  <a href="index.html#/module:Std/type:edge" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> edge = [ <div class="cons">| <a href="index.html#/module:Std/type:jump">jump</a></div><div class="cons">| `Fall</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors">
  <a href="index.html#/module:Std/modtype:Block_accessors" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Block_accessors = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Access to block attributes.
This interface provides only access to block attributes, but
doesn't allow to navigate to other blocks.</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:Block_accessors/type:t">
  <a href="index.html#/module:Std/modtype:Block_accessors/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors/type:insn">
  <a href="index.html#/module:Std/modtype:Block_accessors/type:insn" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> insn
    
      <div class="doc">
        
      <p><code>addr block</code> address of the first instruction</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors/val:addr">
  <a href="index.html#/module:Std/modtype:Block_accessors/val:addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr : <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors/val:memory">
  <a href="index.html#/module:Std/modtype:Block_accessors/val:memory" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> memory : <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a>
    
      <div class="doc">
        
      <p><code>memory blk</code> memory region, occupied by a block</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors/val:leader">
  <a href="index.html#/module:Std/modtype:Block_accessors/val:leader" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> leader : <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Block_accessors/type:insn">insn</a>
    
      <div class="doc">
        
      <p><code>leader blk</code> the first instruction</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors/val:terminator">
  <a href="index.html#/module:Std/modtype:Block_accessors/val:terminator" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> terminator : <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Block_accessors/type:insn">insn</a>
    
      <div class="doc">
        
      <p><code>terminator blk</code> last instruction of the block</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors/val:insns">
  <a href="index.html#/module:Std/modtype:Block_accessors/val:insns" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> insns : <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/modtype:Block_accessors/type:insn">insn</a>) list
    
      <div class="doc">
        
      <p><code>insns blk</code> returns a list of block instructions</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Comparable <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Hashable <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Printable">Printable</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Printable/type:t">t</a> := <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors/val:sexp_of_t">
  <a href="index.html#/module:Std/modtype:Block_accessors/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_accessors/val:compare">
  <a href="index.html#/module:Std/modtype:Block_accessors/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_traverse">
  <a href="index.html#/module:Std/modtype:Block_traverse" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Block_traverse = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Navigate to neighborhood blocks.</p>
      
      <p>The following functions allows you to navigate through blocks
without explicitly using graphs. Each neighborhood function
returns closest neighbors as a lazy sequence. Please, be cautious,
since this can contain loops, i.e. block can contain itself as a
predecessor.</p>
      
      <p>You can use <code>Block.compare</code> or <code>compare_block</code> functions, to safely
compare blocks with each other, without a risk of non-termination.</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:Block_traverse/type:t">
  <a href="index.html#/module:Std/modtype:Block_traverse/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
      <div class="doc">
        
      <p>block type</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_traverse/type:dest">
  <a href="index.html#/module:Std/modtype:Block_traverse/type:dest" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> dest = [ <div class="cons">| `Block <span class="keyword">of</span> <a href="index.html#/module:Std/modtype:Block_traverse/type:t">t</a> * <a href="index.html#/module:Std/type:edge">edge</a></div><div class="cons">| `Unresolved <span class="keyword">of</span> <a href="index.html#/module:Std/type:jump">jump</a></div> ]
    
      <div class="doc">
        
      <p><code>dest</code> type also handles indirect jumps.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_traverse/val:dests">
  <a href="index.html#/module:Std/modtype:Block_traverse/val:dests" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> dests : <a href="index.html#/module:Std/modtype:Block_traverse/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Block_traverse/type:dest">dest</a> <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>dests blk</code> block immediate destinations including unresolved
one. Successors are returned in the order of execution, e.g.,
taken branch comes before the implicit one.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_traverse/val:succs">
  <a href="index.html#/module:Std/modtype:Block_traverse/val:succs" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> succs : <a href="index.html#/module:Std/modtype:Block_traverse/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Block_traverse/type:t">t</a> <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>succs blk</code> block immediate successors in the order of
execution, .</p>
      
      <p><code>preds blk</code> block immediate predecessors in unspecified order.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_traverse/val:preds">
  <a href="index.html#/module:Std/modtype:Block_traverse/val:preds" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> preds : <a href="index.html#/module:Std/modtype:Block_traverse/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Block_traverse/type:t">t</a> <a href="index.html#/module:Std/type:seq">seq</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_traverse/val:sexp_of_dest">
  <a href="index.html#/module:Std/modtype:Block_traverse/val:sexp_of_dest" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_dest : <a href="index.html#/module:Std/modtype:Block_traverse/type:dest">dest</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Block_traverse/val:compare_dest">
  <a href="index.html#/module:Std/modtype:Block_traverse/val:compare_dest" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_dest : <a href="index.html#/module:Std/modtype:Block_traverse/type:dest">dest</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/modtype:Block_traverse/type:dest">dest</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert">
  <a href="index.html#/module:Std/module:Disasm_expert" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Disasm_expert : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Expert interface to disassembler.</p>
      
      <p>This interface is rather complicated, and is built around two
implementations of the disassembler <code>Basic</code> and <code>Recursive</code>.
<code>Basic</code> provides an efficient (and very lazy) linear sweep,
driven in a continuation passing style. On top of the <code>Basic</code>
the <code>Recursive</code> disassembler is built, that reconstructs the
control flow graph, and represents the latter as a table of
blocks.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Basic : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Basic disassembler.</p>
      
      <p>This is a target agnostic basic low-level disassembler.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:pred">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:pred" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> pred = [ <div class="cons">| `Valid</div><div class="cons">| <a href="index.html#/module:Std/module:Kind">Kind</a>.<a href="index.html#/module:Std/module:Kind/type:t">t</a></div> ]
    
      <div class="doc">
        
      <p>predicate to drive the disassembler</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> reg
    
      <div class="doc">
        <div class="region">
    <h2 class="section level_2">Basic types</h2>
    </div>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> imm
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> fmm
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:insn">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> (+'a, +'k) insn
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:insns">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insns" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> (+'a, +'k) insns = (<a href="index.html#/module:Std/type:mem">mem</a> * ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a> option) list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:empty">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:empty" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> empty
    
      <div class="doc">
        
      <p>set when information is not stored</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:asm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:asm" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> asm
    
      <div class="doc">
        
      <p>set when assembler information is stored</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:kinds">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:kinds" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> kinds
    
      <div class="doc">
        
      <p>set when instruction kind information is stored</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:full_insn">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:full_insn" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> full_insn = (<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:asm">asm</a>, <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:kinds">kinds</a>) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:t">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> ('a, 'k) t
    
      <div class="doc">
        
      <p>Disassembler.</p>
      
      <p><code>'a</code> and <code>'k</code> type variables specify disassembler modes of
operation. In a process of disassembly it can store extra
information that might be useful. Although, since storing it
takes extra time and space, it is disabled by default.</p>
      
      <p>The first type variable specifies whether storing assembly strings
is enabled. It can be switched using <code>store_asm</code>, <code>drop_asm</code>
functions. When it is enabled, then this type variable will be set
to <code>asm</code>, and it will give an access to functions that returns
this information. Otherwise, this type variable will be set to
<code>empty</code>, thus stopping you from accessing assembler information.</p>
      
      <p>The second type variable stands for <code>kinds</code>, i.e. to store or not to
store extra information about instruction kind.</p>
      
      <p>Note: at some points you can have an access to this information
even if you don't enable it explicitly.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/type:state">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> (+'a, +'k, 's, 'r) state
    
      <div class="doc">
        
      <p>Disassembler state.</p>
      
      <p>Words of precautions: this state is valid only inside handlers
functions of the <code>run</code> function. It shouldn't be stored
anywhere.
First two type variables are bound correspondingly to two
variables of the disassmbler <code>('a,'k) t</code> type. Third type variable,
is for user data type, that can be used to pass extra information</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:create">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : ?debug_level:int <span class="rarr"><span>-&gt;</span></span> ?cpu:string <span class="rarr"><span>-&gt;</span></span> backend:string <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:empty">empty</a>, <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:empty">empty</a>) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>create ?debug_level ?cpu ~backend target</code> creates a disassembler
for the specified <code>target</code>. All parameters are backend specific,
consult the concrete backend for more information. In general,
the greater <code>debug_level</code> is, the more debug information will be
outputed by a backend. To silent backend set it <code>0</code>. This is a
default value. Example:</p>
      
      <p><code>create ~debug_level:3 ~backend:&quot;llvm&quot; &quot;x86_64&quot;</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:store_asm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:store_asm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> store_asm : (_, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:asm">asm</a>, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:t">t</a>
    
      <div class="doc">
        
      <p>enables storing assembler information</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:store_kinds">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:store_kinds" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> store_kinds : ('a, _) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> ('a, <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:kinds">kinds</a>) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:t">t</a>
    
      <div class="doc">
        
      <p>enables storing instruction kinds information</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:run">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:run" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> run : ?stop_on:<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:pred">pred</a> list <span class="rarr"><span>-&gt;</span></span> ?invalid:(('a, 'k, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 's <span class="rarr"><span>-&gt;</span></span> 'r) <span class="rarr"><span>-&gt;</span></span> ?stopped:(('a, 'k, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> 's <span class="rarr"><span>-&gt;</span></span> 'r) <span class="rarr"><span>-&gt;</span></span> ?hit:(('a, 'k, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:asm">asm</a>, <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:kinds">kinds</a>) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> 's <span class="rarr"><span>-&gt;</span></span> 'r) <span class="rarr"><span>-&gt;</span></span> ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> return:('s <span class="rarr"><span>-&gt;</span></span> 'r) <span class="rarr"><span>-&gt;</span></span> init:'s <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 'r
    
      <div class="doc">
        
      <p><code>run ?stop_on ?invalid ?stopped dis mem ~init ~return ~hit</code>
performs recursive disassembly of specified memory <code>mem</code>. The
process of disassembly can be driven using <code>stop</code>, <code>step</code>, <code>back</code>
and <code>jump</code> functions, described later.</p>
      
        
  <div class="tag param">
    <span class="label">stop_on</span> defines a set of predicates that will be checked
on each step to decide whether it should stop here and call a
user-provided <code>hit</code> function, or it should continue. The descision
is made acording to the rule: <code>if exists stop_on then stop</code>, i.e.,
it there exists such predicate in a set of predicates, that
evaluates to true, then stop the disassembly and pass the control
to the user function <code>hit</code>. A few notes: only valid instructions
can match predicates, and if the set is empty, then it always
evaluates to false.
  </div>
  
  <div class="tag param">
    <span class="label">init</span> initial value of user data, that can be passed
through handlers (cf., <code>fold</code>)
  </div>
  
  <div class="tag param">
    <span class="label">return</span> a function that lifts user data type <code>'s</code> to type
<code>'r</code>. It is useful when you need to perform disassembly in some
monad, like <code>Or_error</code>, or <code>Lwt</code>. Otherwise, just use <code>ident</code>
function and assume that <code>'s == 'r</code>.<br/>In a process of disassembly user provided callbacks are invoked by
the engine. To each callback at least two parameters are passed:
<code>state</code> and <code>user_data</code>. <code>user_data</code> is arbitrary data of type <code>'s</code>
with which the folding over the memory is actually
performed. <code>state</code> incapsulates the current state of the
disassembler, and provides continuation functions, namely <code>stop</code>,
<code>next</code> and <code>back</code>, that drives the process of disassembly. This
functions are used to pass control back to the disassembler.<br/><code>stopped state user_data</code> is called when there is no more data to
disassemble. This handler is optional and defaults to <code>stop</code>.<br/><code>invalid state user_data</code> is an optional handler that is called on
each invalid instruction (i.e., a portion of data that is not a
valid instruction), it defaults to <code>step</code>, i.e., to skipping.<br/><code>hit state mem insn data</code> is called when one of the predicates
specifed by a user was hit. <code>insn</code> is actually the instruction
that satisfies the predicate. <code>mem</code> is a memory region spanned by
the instruction. <code>data</code> is a user data. <code>insn</code> can be queried for
assembly string and kinds even if the corresponding modes are
disabled.
  </div>
  
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:insn_of_mem">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:insn_of_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> insn_of_mem : (_, _) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/type:mem">mem</a> * (<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:asm">asm</a>, <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:kinds">kinds</a>) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a> option * [ <div class="cons">| `left <span class="keyword">of</span> <a href="index.html#/module:Std/type:mem">mem</a></div><div class="cons">| `finished</div> ]) Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>insn_of_mem dis mem</code> performes a disassembly of one instruction
from the given memory region <code>mem</code>. Returns a tuple
<code>imem,insn,`left over</code> where <code>imem</code> stands for a piece of memory
consumed in a process of disassembly, <code>insn</code> can be <code>Some ins</code> if
disassembly was successful, and <code>None</code> otherwise. <code>`left over</code>
complements <code>imem</code> to original <code>mem</code>.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:addr">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr : (_, _, _, _) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
      <div class="doc">
        
      <p>current position of the disassembler</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:preds">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:preds" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> preds : (_, _, _, _) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:pred">pred</a> list
    
      <div class="doc">
        
      <p>current set of predicates</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:with_preds">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:with_preds" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> with_preds : ('a, 'k, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:pred">pred</a> list <span class="rarr"><span>-&gt;</span></span> ('a, 'k, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a>
    
      <div class="doc">
        
      <p>updates the set of predicates, that rules the stop condition.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:insns">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:insns" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> insns : ('a, 'k, _, _) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insns">insns</a>
    
      <div class="doc">
        
      <p>a queue of instructions disassembled in this step</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:last">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:last" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> last : ('a, 'k, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insns">insns</a>
    
      <div class="doc">
        
      <p><code>last s n</code> returns last <code>n</code> instructions disassembled in this
step. If there are less then <code>n</code> instructions, then returns a
smaller list</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:memory">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:memory" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> memory : (_, _, _, _) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a>
    
      <div class="doc">
        
      <p>the memory region we're currently working on</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:stop">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:stop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> stop : (_, _, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> 's <span class="rarr"><span>-&gt;</span></span> 'r
    
      <div class="doc">
        
      <p>stop the disassembly and return the provided value.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:step">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:step" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> step : (_, _, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> 's <span class="rarr"><span>-&gt;</span></span> 'r
    
      <div class="doc">
        
      <p>continue disassembling from the current point. You can change a
a set of predicates, before stepping next. If you want to continue
from a different address, use <code>jump</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:jump">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:jump" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> jump : (_, _, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> 's <span class="rarr"><span>-&gt;</span></span> 'r
    
      <div class="doc">
        
      <p>jump to the specified memory and continue disassembly in it.</p>
      
      <p>For example, if you want to jump to a specified address, and
you're working in a <code>Or_error</code> monad, then you can:</p>
      
      <p><code>view ~from:addr (mem state) &gt;&gt;= fun mem -&gt; jump mem data</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:back">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:back" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> back : (_, _, 's, 'r) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> 's <span class="rarr"><span>-&gt;</span></span> 'r
    
      <div class="doc">
        
      <p>restarts last step.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Insn : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Basic instruction.
This instruction is an opaque pointer into C-backend, thus
it is protected with phantom types.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> ('a, 'k) t = ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Core_kernel.Std.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:compare">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:code">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:code" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> code : ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:name">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:kinds">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:kinds" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> kinds : ('a, <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:kinds">kinds</a>) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind">Kind</a>.<a href="index.html#/module:Std/module:Kind/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:is">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:is" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is : ('a, <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:kinds">kinds</a>) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Kind">Kind</a>.<a href="index.html#/module:Std/module:Kind/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:asm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:asm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> asm : (<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:asm">asm</a>, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:ops">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/val:ops" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ops : ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:op">op</a> array
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Trie">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Trie" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Trie : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Trie maps over instructions</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Trie/type:key">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Trie/type:key" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> key
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Trie/val:key_of_first_insns">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Trie/val:key_of_first_insns" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> key_of_first_insns : (_, _, _, _) <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:state">state</a> <span class="rarr"><span>-&gt;</span></span> len:int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Trie/type:key">key</a> option
    
      <div class="doc">
        
      <p><code>key_of_first_insns state ~len:n</code> creates a key from first <code>n</code>
instructions stored in the state if state contains such
amount of instructions</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/module:Trie/module:Normalized">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Trie/module:Normalized" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Normalized : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Trie/type:key">key</a></div>
      
      
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> := <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/module:Trie/type:key">key</a> 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:pred_of_sexp">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:pred_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pred_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:pred">pred</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:__pred_of_sexp__">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:__pred_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __pred_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:pred">pred</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_pred">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_pred" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_pred : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:pred">pred</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:reg_of_sexp">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:reg_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> reg_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_reg : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:compare_reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:compare_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_reg : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reg : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_read_reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_read_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_reg : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:__bin_read_reg__">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:__bin_read_reg__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_reg__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_reader_reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_reader_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_reg : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_size_reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_size_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_reg : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_write_reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_write_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_reg : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_writer_reg">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_writer_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_reg : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:imm_of_sexp">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:imm_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> imm_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_imm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:compare_imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:compare_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_imm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_imm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_read_imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_read_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_imm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:__bin_read_imm__">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:__bin_read_imm__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_imm__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_reader_imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_reader_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_imm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_size_imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_size_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_imm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_write_imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_write_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_imm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_writer_imm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_writer_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_imm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:imm">imm</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:fmm_of_sexp">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:fmm_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fmm_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_fmm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:compare_fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:compare_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_fmm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_fmm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_read_fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_read_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_fmm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:__bin_read_fmm__">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:__bin_read_fmm__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_fmm__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_reader_fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_reader_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_fmm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_size_fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_size_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_fmm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_write_fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_write_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_fmm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:bin_writer_fmm">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:bin_writer_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_fmm : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_full_insn">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:sexp_of_full_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_full_insn : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:full_insn">full_insn</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Basic/val:compare_full_insn">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/val:compare_full_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_full_insn : <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:full_insn">full_insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:full_insn">full_insn</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Recursive : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Recursive Descent Disassembler.
This disassembler is built on top of <code>Basic</code> disassembler. It
uses work list algorithm to implement recursive descent
disassembly and lazily reconstructs the whole program CFG.</p>
      
      <p>This is an expert-level module, and it is suggested to use
high-level <code>Disasm</code> interface, that is built ontop of this
module.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/type:t">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/type:block">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:block" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> block
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/type:lifter">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:lifter" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> lifter = <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:full_insn">full_insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/type:maybe_insn">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:maybe_insn" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> maybe_insn = <a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:full_insn">full_insn</a> option * <a href="index.html#/module:Std/type:bil">bil</a> option
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/type:decoded">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:decoded" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> decoded = <a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:maybe_insn">maybe_insn</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/type:error">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:error" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> error = [ <div class="cons">| `Failed_to_disasm <span class="keyword">of</span> <a href="index.html#/module:Std/type:mem">mem</a></div><div class="cons">| `Failed_to_lift <span class="keyword">of</span> <a href="index.html#/module:Std/type:mem">mem</a> * <a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:full_insn">full_insn</a> * Core_kernel.Std.Error.t</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/val:run">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/val:run" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> run : ?backend:string <span class="rarr"><span>-&gt;</span></span> ?lifter:<a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:lifter">lifter</a> <span class="rarr"><span>-&gt;</span></span> ?roots:<a href="index.html#/module:Std/type:addr">addr</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/val:blocks">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/val:blocks" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> blocks : <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:block">block</a> <a href="index.html#/module:Std/module:Table">Table</a>.<a href="index.html#/module:Std/module:Table/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/val:errors">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/val:errors" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> errors : <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:error">error</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/module:Block">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/module:Block" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Block : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Low-level opaque representation of basic block.</p>
      
        
      </div>
    
      
    <div class="sig">
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Block_accessors">Block_accessors</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> = <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:block">block</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Block_accessors/type:insn">insn</a> := <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:maybe_insn">maybe_insn</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Block_traverse">Block_traverse</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Block_traverse/type:t">t</a> := <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/module:Block/type:t">t</a> 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/val:sexp_of_block">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/val:sexp_of_block" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_block : <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:block">block</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/val:compare_block">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/val:compare_block" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_block : <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:block">block</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:block">block</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/val:sexp_of_maybe_insn">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/val:sexp_of_maybe_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_maybe_insn : <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:maybe_insn">maybe_insn</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/val:sexp_of_decoded">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/val:sexp_of_decoded" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_decoded : <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:decoded">decoded</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Disasm_expert/module:Recursive/val:sexp_of_error">
  <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/val:sexp_of_error" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_error : <a href="index.html#/module:Std/module:Disasm_expert/module:Recursive/type:error">error</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h2 class="section level_2">High-level interface</h2>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Insn">
  <a href="index.html#/module:Std/module:Insn" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Insn : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Assembly instruction.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Insn/type:t">
  <a href="index.html#/module:Std/module:Insn/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:insn">insn</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/type:op">
  <a href="index.html#/module:Std/module:Insn/type:op" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> op = <a href="index.html#/module:Std/module:Op">Op</a>.<a href="index.html#/module:Std/module:Op/type:t">t</a>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:Insn/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Insn/val:name">
  <a href="index.html#/module:Std/module:Insn/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p>returns backend specific name of instruction</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:asm">
  <a href="index.html#/module:Std/module:Insn/val:asm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> asm : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string
    
      <div class="doc">
        
      <p>target-specific assembler string representing the instruction</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bil">
  <a href="index.html#/module:Std/module:Insn/val:bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bil : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:bil">bil</a>
    
      <div class="doc">
        
      <p>returns BIL program specifying instruction semantics</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:ops">
  <a href="index.html#/module:Std/module:Insn/val:ops" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ops : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/type:op">op</a> array
    
      <div class="doc">
        
      <p>instruction operands</p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Instruction predicates</h3>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Insn/val:is_jump">
  <a href="index.html#/module:Std/module:Insn/val:is_jump" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_jump : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_jump</code> <code>true</code> for all jumps</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:is_conditional_jump">
  <a href="index.html#/module:Std/module:Insn/val:is_conditional_jump" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_conditional_jump : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_conditional</code> <code>true</code> for conditional jumps</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:is_unconditional_jump">
  <a href="index.html#/module:Std/module:Insn/val:is_unconditional_jump" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_unconditional_jump : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_unconditional</code> iff <code>is_jump &amp;&amp; not is_conditional_jump</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:is_indirect_jump">
  <a href="index.html#/module:Std/module:Insn/val:is_indirect_jump" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_indirect_jump : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_indirect_jump</code> <code>true</code> if it is indirect</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:is_call">
  <a href="index.html#/module:Std/module:Insn/val:is_call" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_call : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_call</code> is <code>true</code> for all call instructions</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:is_return">
  <a href="index.html#/module:Std/module:Insn/val:is_return" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> is_return : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>is_return</code> <code>true</code> for returns</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:may_affect_control_flow">
  <a href="index.html#/module:Std/module:Insn/val:may_affect_control_flow" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> may_affect_control_flow : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>may_affect_control_flow</code> is true if it may affect control flow.
«may» stays for the fact, that it «may not» affect.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:has_side_effect">
  <a href="index.html#/module:Std/module:Insn/val:has_side_effect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> has_side_effect : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>has_side_effect</code> is <code>true</code> if instruction may load or store</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:may_load">
  <a href="index.html#/module:Std/module:Insn/val:may_load" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> may_load : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>may_load</code> is true if instruction may load data from memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:may_store">
  <a href="index.html#/module:Std/module:Insn/val:may_store" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> may_store : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> bool
    
      <div class="doc">
        
      <p><code>may_store</code> is true if instruction may store data to memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:pp_adt">
  <a href="index.html#/module:Std/module:Insn/val:pp_adt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pp_adt : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <a href="index.html#/module:Std/type:printer">printer</a>
    
      <div class="doc">
        
      <p><code>pp_adt</code> prints instruction in ADT format, suitable for reading
by evaluating in many languages, e.g. Python, Js, etc</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/module:Trie">
  <a href="index.html#/module:Std/module:Insn/module:Trie" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Trie : <span class="keyword">sig</span></div>
      
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Prefix Tree</h3>
    </div>
      <p>
This module provides a trie data structure where a sequence of
instructions is used as a key (and an individual instruction
as a token). Two implementations are provided, a regular, where
insns are compared as-is, and normalized, where instructions are
compared using normalized comparison.</p>
      
      <p>In normalized comparison concerete immediate values are ignored,
and if instructions have different number of operands, then only
then excess operands are excluded from the comparison.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Insn/module:Trie/type:key">
  <a href="index.html#/module:Std/module:Insn/module:Trie/type:key" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> key
    
      <div class="doc">
        
      <p>Trie requires 0(1) get operation</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/module:Trie/val:key_of_insns">
  <a href="index.html#/module:Std/module:Insn/module:Trie/val:key_of_insns" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> key_of_insns : <a href="index.html#/module:Std/module:Insn/type:t">t</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/module:Trie/type:key">key</a>
    
      <div class="doc">
        
      <p><code>key_of_insns insns</code> takes a list of instructions and transforms
it to <code>key</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/module:Trie/module:Normalized">
  <a href="index.html#/module:Std/module:Insn/module:Trie/module:Normalized" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Normalized : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Insn/module:Trie/type:key">key</a></div>
      
      
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> := <a href="index.html#/module:Std/module:Insn/module:Trie/type:key">key</a> 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:of_basic">
  <a href="index.html#/module:Std/module:Insn/val:of_basic" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_basic : ?bil:<a href="index.html#/module:Std/type:bil">bil</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Disasm_expert">Disasm_expert</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:full_insn">full_insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/type:t">t</a>
    
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Creating</h3>
    </div>
      <p>
The following functions will create <code>insn</code> instances from a lower
level representation.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Insn/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Insn/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:compare">
  <a href="index.html#/module:Std/module:Insn/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_t">
  <a href="index.html#/module:Std/module:Insn/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_read_t">
  <a href="index.html#/module:Std/module:Insn/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Insn/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Insn/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_size_t">
  <a href="index.html#/module:Std/module:Insn/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_write_t">
  <a href="index.html#/module:Std/module:Insn/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Insn/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:op_of_sexp">
  <a href="index.html#/module:Std/module:Insn/val:op_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> op_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/type:op">op</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:sexp_of_op">
  <a href="index.html#/module:Std/module:Insn/val:sexp_of_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_op : <a href="index.html#/module:Std/module:Insn/type:op">op</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:compare_op">
  <a href="index.html#/module:Std/module:Insn/val:compare_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_op : <a href="index.html#/module:Std/module:Insn/type:op">op</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/type:op">op</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_op">
  <a href="index.html#/module:Std/module:Insn/val:bin_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_op : <a href="index.html#/module:Std/module:Insn/type:op">op</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_read_op">
  <a href="index.html#/module:Std/module:Insn/val:bin_read_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_op : <a href="index.html#/module:Std/module:Insn/type:op">op</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:__bin_read_op__">
  <a href="index.html#/module:Std/module:Insn/val:__bin_read_op__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_op__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Insn/type:op">op</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_reader_op">
  <a href="index.html#/module:Std/module:Insn/val:bin_reader_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_op : <a href="index.html#/module:Std/module:Insn/type:op">op</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_size_op">
  <a href="index.html#/module:Std/module:Insn/val:bin_size_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_op : <a href="index.html#/module:Std/module:Insn/type:op">op</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_write_op">
  <a href="index.html#/module:Std/module:Insn/val:bin_write_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_op : <a href="index.html#/module:Std/module:Insn/type:op">op</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Insn/val:bin_writer_op">
  <a href="index.html#/module:Std/module:Insn/val:bin_writer_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_op : <a href="index.html#/module:Std/module:Insn/type:op">op</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Block">
  <a href="index.html#/module:Std/module:Block" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Block : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Basic block of assembly instructions.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Block/type:t">
  <a href="index.html#/module:Std/module:Block/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/type:block">block</a>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Block_accessors">Block_accessors</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> := <a href="index.html#/module:Std/module:Block/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Block_accessors/type:insn">insn</a> := <a href="index.html#/module:Std/type:insn">insn</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Block_traverse">Block_traverse</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Block_traverse/type:t">t</a> := <a href="index.html#/module:Std/module:Block/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Block/val:dfs">
  <a href="index.html#/module:Std/module:Block/val:dfs" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> dfs : ?order:[ <div class="cons">| `post</div><div class="cons">| `pre</div> ] <span class="rarr"><span>-&gt;</span></span> ?next:(<a href="index.html#/module:Std/module:Block/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Block/type:t">t</a> <a href="index.html#/module:Std/type:seq">seq</a>) <span class="rarr"><span>-&gt;</span></span> ?bound:<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Block/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Block/type:t">t</a> <a href="index.html#/module:Std/type:seq">seq</a>
    
      <div class="doc">
        
      <p><code>dfs ?next ?bound blk</code> searches from the <code>blk</code> using DFS.</p>
      
      <p>Search can be bound with <code>bound</code>, i.e., the search will not continue
on block that has no intersections with the specified bound. By
default the search is unbound. Search direction can be also
specified by the <code>next</code> parameter. By default search is performed
in a forward direction, using <code>succs</code> function. To search in a
reverse direction, use <code>preds</code> function. The search result is
returned as a lazy sequence. Destinations of the block are visited
in the order of execution, e.g., taken branch is visited before
non taken. No such guarantee is made for the predecessors or any
other function provided as a <code>next</code> arguments, since it is a
property of a <code>next</code> function, not the algorithm itsef.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Block/module:Cfg">
  <a href="index.html#/module:Std/module:Block/module:Cfg" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Cfg : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>A classic control flow graph using OCamlgraph library.
Graph vertices are made abstract, but the implement
<code>Block_accessors</code> interface, including hash tables, maps, hash
sets etc.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Block/module:Cfg/module:Block">
  <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Block : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Block/module:Cfg/module:Block/type:t">
  <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Block_accessors">Block_accessors</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Block_accessors/type:t">t</a> := <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Block_accessors/type:insn">insn</a> := <a href="index.html#/module:Std/type:insn">insn</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Block/module:Cfg/module:Block/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Block/module:Cfg/module:Imperative">
  <a href="index.html#/module:Std/module:Block/module:Cfg/module:Imperative" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Imperative : Graph.Sig.I <span class="keyword">with</span> <span class="keyword">type</span> V.t = <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> V.label = <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> E.t = <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> * <a href="index.html#/module:Std/type:edge">edge</a> * <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> E.label = <a href="index.html#/module:Std/type:edge">edge</a></div>
      
      <div class="doc">
        
      <p>Imperative graph</p>
      
        
      </div>
    
      
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> Graph.Sig.P <span class="keyword">with</span> <span class="keyword">type</span> V.t = <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> V.label = <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> E.t = <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> * <a href="index.html#/module:Std/type:edge">edge</a> * <a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> <span class="keyword">and</span> <span class="keyword">type</span> E.label = <a href="index.html#/module:Std/type:edge">edge</a> 
    </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Block/val:to_graph">
  <a href="index.html#/module:Std/module:Block/val:to_graph" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_graph : ?bound:<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Block/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Block/module:Cfg">Cfg</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> * <a href="index.html#/module:Std/module:Block/module:Cfg">Cfg</a>.t
    
      <div class="doc">
        
      <p><code>to_graph ?bound entry</code> builds a graph starting with <code>entry</code> and
spanning all reachable blocks that are bounded by a memory region
<code>bound</code>.</p>
      
        
  <div class="tag param">
    <span class="label">bound</span> defaults to infinite memory region.
  </div>
  
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Block/val:to_imperative_graph">
  <a href="index.html#/module:Std/module:Block/val:to_imperative_graph" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_imperative_graph : ?bound:<a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Block/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Block/module:Cfg">Cfg</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block">Block</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Block/type:t">t</a> * <a href="index.html#/module:Std/module:Block/module:Cfg">Cfg</a>.<a href="index.html#/module:Std/module:Block/module:Cfg/module:Imperative">Imperative</a>.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Block/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Block/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Block/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Block/val:compare">
  <a href="index.html#/module:Std/module:Block/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Block/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Block/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:targets">
  <a href="index.html#/module:Std/label:targets" class="anchor">#</a>
  
    <h1 class="section level_1">Targets</h1>
    
  </div>
  
        
      </div>
    
  <div class="region" id="/module:Std/modtype:Target">
  <a href="index.html#/module:Std/modtype:Target" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Target = <span class="keyword">sig</span>
    </div>
    
      <div class="doc">
        
      <p>Abstract interface for all targets.</p>
      
      <p>Each target supported by BAP implements this interface. To get access
to the implementation use <code>target_of_arch</code> function. Code
written using this interface is cross-platfrom, i.e., target
agnostic. If you want to write target-specific code, then use
directly corresponding modules: <code>ARM</code>, <code>IA32</code>, <code>AMD64</code>.</p>
      
        
      </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/modtype:Target/module:CPU">
  <a href="index.html#/module:Std/modtype:Target/module:CPU" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> CPU : <a href="index.html#/module:Std/modtype:CPU">CPU</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Target/module:ABI">
  <a href="index.html#/module:Std/modtype:Target/module:ABI" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> ABI : <a href="index.html#/module:Std/modtype:ABI">ABI</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/modtype:Target/val:lift">
  <a href="index.html#/module:Std/modtype:Target/val:lift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lift : <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert">Disasm_expert</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>lift mem insn</code> lifts provided instruction to BIL.
Usually you do not need to call this function directly, as
<code>disassemble</code> function will do the lifting.</p>
      
        
      </div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:target_of_arch">
  <a href="index.html#/module:Std/val:target_of_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> target_of_arch : <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> (<span class="keyword">module</span> <a href="index.html#/module:Std/modtype:Target">Target</a>)
    
      <div class="doc">
        
      <p><code>target_of_arch arch</code> creates a module for the given <code>arch</code>, if
<code>arch</code> is not lifted, the stub module is returned.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h2 class="section level_2">Lifted targets</h2>
    </div>
      <p>
All targets implement at least <code>Target</code> interface.</p>
      
        
      </div>
    
  <div class="region" id="/module:Std/module:ARM">
  <a href="index.html#/module:Std/module:ARM" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> ARM : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>ARM architecture</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:ARM/val:lift">
  <a href="index.html#/module:Std/module:ARM/val:lift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lift : <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert">Disasm_expert</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:ABI">
  <a href="index.html#/module:Std/module:ARM/module:ABI" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> ABI : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:ABI">ABI</a> 
    </div>
  
  <div class="region" id="/module:Std/module:ARM/module:ABI/class:gnueabi">
  <a href="index.html#/module:Std/module:ARM/module:ABI/class:gnueabi" class="anchor">#</a>
  
  <div class="class">
    <span class="keyword">class</span> gnueabi : 
    ?image:<a href="index.html#/module:Std/type:image">image</a> option
    <span class="rarr"><span>-&gt;</span></span>
    
    ?sym:string option
    <span class="rarr"><span>-&gt;</span></span>
    
    <a href="index.html#/module:Std/type:mem">mem</a>
    <span class="rarr"><span>-&gt;</span></span>
    
    <a href="index.html#/module:Std/type:block">block</a>
    <span class="rarr"><span>-&gt;</span></span>
    <a href="index.html#/module:Std/classtype:abi">abi</a>
    
    
    
    
    
      <div class="doc">
        
      <p><code>gnueabi</code> ABI</p>
      
        
      </div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU">
  <a href="index.html#/module:Std/module:ARM/module:CPU" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> CPU : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>ARM CPU.
Other than common CPU interface, this module also exposes ARM
specific registers and flags.</p>
      
        
      </div>
    
      
    <div class="sig">
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:CPU">CPU</a> 
    </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:spsr">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:spsr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> spsr : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:cpsr">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:cpsr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> cpsr : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:nf">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:nf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> nf : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:zf">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:zf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> zf : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:cf">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:cf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> cf : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:vf">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:vf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> vf : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:qf">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:qf" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> qf : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:ge">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:ge" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ge : <a href="index.html#/module:Std/type:var">var</a> array
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:itstate">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:itstate" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> itstate : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:lr">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:lr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lr : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:pc">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pc : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:sp">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:sp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sp : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r0">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r0" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r0 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r1">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r1 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r2">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r2" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r2 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r3">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r3" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r3 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r4">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r4" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r4 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r5">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r5" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r5 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r6">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r6" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r6 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r7">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r7" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r7 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r8">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r8" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r8 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r9">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r9" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r9 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r10">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r10" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r10 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r11">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r11" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r11 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:CPU/val:r12">
  <a href="index.html#/module:Std/module:ARM/module:CPU/val:r12" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r12 : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn">
  <a href="index.html#/module:Std/module:ARM/module:Insn" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Insn : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Arm Instruction Set.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:ARM/module:Insn/type:move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/type:move" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> move = [ <div class="cons">| `ADCri</div><div class="cons">| `ADCrr</div><div class="cons">| `ADCrsi</div><div class="cons">| `ADCrsr</div><div class="cons">| `ADDri</div><div class="cons">| `ADDrr</div><div class="cons">| `ADDrsi</div><div class="cons">| `ADDrsr</div><div class="cons">| `ANDri</div><div class="cons">| `ANDrr</div><div class="cons">| `ANDrsi</div><div class="cons">| `ANDrsr</div><div class="cons">| `BICri</div><div class="cons">| `BICrr</div><div class="cons">| `BICrsi</div><div class="cons">| `BICrsr</div><div class="cons">| `CMNri</div><div class="cons">| `CMNzrr</div><div class="cons">| `CMNzrsi</div><div class="cons">| `CMNzrsr</div><div class="cons">| `CMPri</div><div class="cons">| `CMPrr</div><div class="cons">| `CMPrsi</div><div class="cons">| `CMPrsr</div><div class="cons">| `EORri</div><div class="cons">| `EORrr</div><div class="cons">| `EORrsi</div><div class="cons">| `EORrsr</div><div class="cons">| `MOVTi16</div><div class="cons">| `MOVi</div><div class="cons">| `MOVi16</div><div class="cons">| `MOVr</div><div class="cons">| `MOVsi</div><div class="cons">| `MOVsr</div><div class="cons">| `MVNi</div><div class="cons">| `MVNr</div><div class="cons">| `MVNsi</div><div class="cons">| `MVNsr</div><div class="cons">| `ORRri</div><div class="cons">| `ORRrr</div><div class="cons">| `ORRrsi</div><div class="cons">| `ORRrsr</div><div class="cons">| `RSBri</div><div class="cons">| `RSBrr</div><div class="cons">| `RSBrsi</div><div class="cons">| `RSBrsr</div><div class="cons">| `RSCri</div><div class="cons">| `RSCrr</div><div class="cons">| `RSCrsi</div><div class="cons">| `RSCrsr</div><div class="cons">| `SBCri</div><div class="cons">| `SBCrr</div><div class="cons">| `SBCrsi</div><div class="cons">| `SBCrsr</div><div class="cons">| `SUBri</div><div class="cons">| `SUBrr</div><div class="cons">| `SUBrsi</div><div class="cons">| `SUBrsr</div><div class="cons">| `TEQri</div><div class="cons">| `TEQrr</div><div class="cons">| `TEQrsi</div><div class="cons">| `TEQrsr</div><div class="cons">| `TSTri</div><div class="cons">| `TSTrr</div><div class="cons">| `TSTrsi</div><div class="cons">| `TSTrsr</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:all_of_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:all_of_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/type:bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> bits = [ <div class="cons">| `BFC</div><div class="cons">| `BFI</div><div class="cons">| `PKHTB</div><div class="cons">| `RBIT</div><div class="cons">| `SBFX</div><div class="cons">| `SWPB</div><div class="cons">| `SXTAB</div><div class="cons">| `SXTAH</div><div class="cons">| `SXTB</div><div class="cons">| `SXTH</div><div class="cons">| `UBFX</div><div class="cons">| `UXTAB</div><div class="cons">| `UXTAH</div><div class="cons">| `UXTB</div><div class="cons">| `UXTH</div><div class="cons">| `REV</div><div class="cons">| `REV16</div><div class="cons">| `CLZ</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:all_of_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:all_of_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/type:mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> mult = [ <div class="cons">| `MLA</div><div class="cons">| `MLS</div><div class="cons">| `MUL</div><div class="cons">| `SMLABB</div><div class="cons">| `SMLAD</div><div class="cons">| `SMLAL</div><div class="cons">| `SMLALBT</div><div class="cons">| `SMLAWB</div><div class="cons">| `SMUAD</div><div class="cons">| `SMULBB</div><div class="cons">| `SMULL</div><div class="cons">| `SMULTB</div><div class="cons">| `UMLAL</div><div class="cons">| `UMULL</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:all_of_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:all_of_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/type:mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> mem_multi = [ <div class="cons">| `LDMDA</div><div class="cons">| `LDMDA_UPD</div><div class="cons">| `LDMDB</div><div class="cons">| `LDMDB_UPD</div><div class="cons">| `LDMIA</div><div class="cons">| `LDMIA_UPD</div><div class="cons">| `LDMIB</div><div class="cons">| `LDMIB_UPD</div><div class="cons">| `STMDA</div><div class="cons">| `STMDA_UPD</div><div class="cons">| `STMDB</div><div class="cons">| `STMDB_UPD</div><div class="cons">| `STMIA</div><div class="cons">| `STMIA_UPD</div><div class="cons">| `STMIB</div><div class="cons">| `STMIB_UPD</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:all_of_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:all_of_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/type:mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> mem = [ <div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a></div><div class="cons">| `LDRBT_POST_IMM</div><div class="cons">| `LDRBT_POST_REG</div><div class="cons">| `LDRB_POST_IMM</div><div class="cons">| `LDRB_POST_REG</div><div class="cons">| `LDRB_PRE_IMM</div><div class="cons">| `LDRB_PRE_REG</div><div class="cons">| `LDRBi12</div><div class="cons">| `LDRBrs</div><div class="cons">| `LDRD</div><div class="cons">| `LDRD_POST</div><div class="cons">| `LDRD_PRE</div><div class="cons">| `LDREX</div><div class="cons">| `LDREXB</div><div class="cons">| `LDREXD</div><div class="cons">| `LDREXH</div><div class="cons">| `LDRH</div><div class="cons">| `LDRHTr</div><div class="cons">| `LDRH_POST</div><div class="cons">| `LDRH_PRE</div><div class="cons">| `LDRSB</div><div class="cons">| `LDRSBTr</div><div class="cons">| `LDRSB_POST</div><div class="cons">| `LDRSB_PRE</div><div class="cons">| `LDRSH</div><div class="cons">| `LDRSHTi</div><div class="cons">| `LDRSHTr</div><div class="cons">| `LDRSH_POST</div><div class="cons">| `LDRSH_PRE</div><div class="cons">| `LDRT_POST_REG</div><div class="cons">| `LDR_POST_IMM</div><div class="cons">| `LDR_POST_REG</div><div class="cons">| `LDR_PRE_IMM</div><div class="cons">| `LDR_PRE_REG</div><div class="cons">| `LDRi12</div><div class="cons">| `LDRrs</div><div class="cons">| `STRBT_POST_IMM</div><div class="cons">| `STRBT_POST_REG</div><div class="cons">| `STRB_POST_IMM</div><div class="cons">| `STRB_POST_REG</div><div class="cons">| `STRB_PRE_IMM</div><div class="cons">| `STRB_PRE_REG</div><div class="cons">| `STRBi12</div><div class="cons">| `STRBrs</div><div class="cons">| `STRD</div><div class="cons">| `STRD_POST</div><div class="cons">| `STRD_PRE</div><div class="cons">| `STREX</div><div class="cons">| `STREXB</div><div class="cons">| `STREXD</div><div class="cons">| `STREXH</div><div class="cons">| `STRH</div><div class="cons">| `STRHTr</div><div class="cons">| `STRH_POST</div><div class="cons">| `STRH_PRE</div><div class="cons">| `STRT_POST_REG</div><div class="cons">| `STR_POST_IMM</div><div class="cons">| `STR_POST_REG</div><div class="cons">| `STR_PRE_IMM</div><div class="cons">| `STR_PRE_REG</div><div class="cons">| `STRi12</div><div class="cons">| `STRrs</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:all_of_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:all_of_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/type:branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> branch = [ <div class="cons">| `BL</div><div class="cons">| `BLX</div><div class="cons">| `BLX_pred</div><div class="cons">| `BLXi</div><div class="cons">| `BL_pred</div><div class="cons">| `BX</div><div class="cons">| `BX_RET</div><div class="cons">| `BX_pred</div><div class="cons">| `Bcc</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:all_of_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:all_of_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/type:special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/type:special" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> special = [ <div class="cons">| `CPS2p</div><div class="cons">| `DMB</div><div class="cons">| `DSB</div><div class="cons">| `HINT</div><div class="cons">| `MRS</div><div class="cons">| `MSR</div><div class="cons">| `PLDi12</div><div class="cons">| `SVC</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:all_of_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:all_of_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/type:t">
  <a href="index.html#/module:Std/module:ARM/module:Insn/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = [ <div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a></div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:all">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:create">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : ('a, 'b) <a href="index.html#/module:Std/module:Disasm_expert">Disasm_expert</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> option
    
      <div class="doc">
        
      <p><code>create basic_insn</code> lifts ARM instruction from a basic instruction</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:move_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:move_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> move_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__move_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__move_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __move_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:sexp_of_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:sexp_of_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:compare_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:compare_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_read_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_read_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bin_read_move__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bin_read_move__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_move__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_reader_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_reader_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_size_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_size_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_write_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_write_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_writer_move">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_writer_move" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_move : <a href="index.html#/module:Std/module:ARM/module:Insn/type:move">move</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bits_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bits_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bits_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bits_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bits_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bits_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:sexp_of_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:sexp_of_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:compare_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:compare_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_read_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_read_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bin_read_bits__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bin_read_bits__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_bits__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_reader_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_reader_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_size_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_size_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_write_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_write_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_writer_bits">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_writer_bits" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_bits : <a href="index.html#/module:Std/module:ARM/module:Insn/type:bits">bits</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:mult_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:mult_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mult_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__mult_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__mult_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __mult_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:sexp_of_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:sexp_of_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:compare_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:compare_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_read_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_read_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bin_read_mult__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bin_read_mult__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_mult__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_reader_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_reader_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_size_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_size_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_write_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_write_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_writer_mult">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_writer_mult" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_mult : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mult">mult</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:mem_multi_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:mem_multi_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mem_multi_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__mem_multi_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__mem_multi_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __mem_multi_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:sexp_of_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:sexp_of_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:compare_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:compare_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_read_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_read_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bin_read_mem_multi__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bin_read_mem_multi__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_mem_multi__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_reader_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_reader_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_size_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_size_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_write_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_write_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_writer_mem_multi">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_writer_mem_multi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_mem_multi : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem_multi">mem_multi</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:mem_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:mem_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mem_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__mem_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__mem_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __mem_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:sexp_of_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:sexp_of_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:compare_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:compare_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_read_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_read_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bin_read_mem__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bin_read_mem__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_mem__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_reader_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_reader_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_size_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_size_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_write_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_write_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_writer_mem">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_writer_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_mem : <a href="index.html#/module:Std/module:ARM/module:Insn/type:mem">mem</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:branch_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:branch_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> branch_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__branch_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__branch_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __branch_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:sexp_of_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:sexp_of_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:compare_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:compare_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_read_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_read_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bin_read_branch__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bin_read_branch__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_branch__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_reader_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_reader_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_size_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_size_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_write_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_write_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_writer_branch">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_writer_branch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_branch : <a href="index.html#/module:Std/module:ARM/module:Insn/type:branch">branch</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:special_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:special_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> special_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__special_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__special_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __special_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:sexp_of_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:sexp_of_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:compare_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:compare_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_read_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_read_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bin_read_special__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bin_read_special__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_special__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_reader_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_reader_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_size_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_size_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_write_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_write_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_writer_special">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_writer_special" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_special : <a href="index.html#/module:Std/module:ARM/module:Insn/type:special">special</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:t_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__t_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__t_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __t_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:sexp_of_t">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:compare">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_t">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_read_t">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_reader_t">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_size_t">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_write_t">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Insn/val:bin_writer_t">
  <a href="index.html#/module:Std/module:ARM/module:Insn/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:ARM/module:Insn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg">
  <a href="index.html#/module:Std/module:ARM/module:Reg" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Reg : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>ARM Registers.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:ARM/module:Reg/type:nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> nil = [ <div class="cons">| `Nil</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:all_of_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:all_of_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/type:gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> gpr = [ <div class="cons">| `R0</div><div class="cons">| `R1</div><div class="cons">| `R2</div><div class="cons">| `R3</div><div class="cons">| `R4</div><div class="cons">| `R5</div><div class="cons">| `R6</div><div class="cons">| `R7</div><div class="cons">| `R8</div><div class="cons">| `R9</div><div class="cons">| `R10</div><div class="cons">| `R11</div><div class="cons">| `R12</div><div class="cons">| `LR</div><div class="cons">| `PC</div><div class="cons">| `SP</div> ]
    
      <div class="doc">
        
      <p>General purpose registers</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:all_of_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:all_of_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/type:gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> gpr_or_nil = [ <div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a></div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:all_of_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:all_of_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/type:ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> ccr = [ <div class="cons">| `CPSR</div><div class="cons">| `SPSR</div><div class="cons">| `ITSTATE</div> ]
    
      <div class="doc">
        
      <p>conditition code registers</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:all_of_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:all_of_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/type:ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> ccr_or_nil = [ <div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a></div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:all_of_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:all_of_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/type:non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> non_nil = [ <div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a></div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:all_of_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:all_of_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all_of_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/type:t">
  <a href="index.html#/module:Std/module:ARM/module:Reg/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = [ <div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a></div><div class="cons">| <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a></div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:all">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:create">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : <a href="index.html#/module:Std/module:Disasm_expert">Disasm_expert</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:reg">reg</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> option
    
      <div class="doc">
        
      <p>lifts basic register to a ARM one</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:nil_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:nil_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> nil_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__nil_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__nil_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __nil_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:sexp_of_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:sexp_of_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:compare_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:compare_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_read_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_read_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__bin_read_nil__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__bin_read_nil__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_nil__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_reader_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_reader_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_size_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_size_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_write_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_write_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_writer_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_writer_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:nil">nil</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:gpr_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:gpr_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> gpr_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__gpr_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__gpr_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __gpr_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:sexp_of_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:sexp_of_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:compare_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:compare_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_read_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_read_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__bin_read_gpr__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__bin_read_gpr__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_gpr__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_reader_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_reader_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_size_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_size_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_write_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_write_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_writer_gpr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_writer_gpr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_gpr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr">gpr</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:gpr_or_nil_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:gpr_or_nil_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> gpr_or_nil_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__gpr_or_nil_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__gpr_or_nil_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __gpr_or_nil_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:sexp_of_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:sexp_of_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:compare_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:compare_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_read_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_read_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__bin_read_gpr_or_nil__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__bin_read_gpr_or_nil__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_gpr_or_nil__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_reader_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_reader_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_size_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_size_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_write_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_write_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_writer_gpr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_writer_gpr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_gpr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:gpr_or_nil">gpr_or_nil</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:ccr_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:ccr_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ccr_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__ccr_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__ccr_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __ccr_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:sexp_of_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:sexp_of_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:compare_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:compare_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_read_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_read_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__bin_read_ccr__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__bin_read_ccr__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_ccr__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_reader_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_reader_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_size_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_size_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_write_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_write_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_writer_ccr">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_writer_ccr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_ccr : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr">ccr</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:ccr_or_nil_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:ccr_or_nil_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ccr_or_nil_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__ccr_or_nil_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__ccr_or_nil_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __ccr_or_nil_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:sexp_of_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:sexp_of_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:compare_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:compare_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_read_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_read_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__bin_read_ccr_or_nil__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__bin_read_ccr_or_nil__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_ccr_or_nil__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_reader_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_reader_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_size_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_size_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_write_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_write_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_writer_ccr_or_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_writer_ccr_or_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_ccr_or_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:ccr_or_nil">ccr_or_nil</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:non_nil_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:non_nil_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> non_nil_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__non_nil_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__non_nil_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __non_nil_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:sexp_of_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:sexp_of_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:compare_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:compare_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_read_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_read_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__bin_read_non_nil__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__bin_read_non_nil__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_non_nil__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_reader_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_reader_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_size_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_size_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_write_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_write_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_writer_non_nil">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_writer_non_nil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_non_nil : <a href="index.html#/module:Std/module:ARM/module:Reg/type:non_nil">non_nil</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:t_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__t_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__t_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __t_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:sexp_of_t">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:compare">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_t">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_read_t">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_reader_t">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_size_t">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_write_t">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Reg/val:bin_writer_t">
  <a href="index.html#/module:Std/module:ARM/module:Reg/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op">
  <a href="index.html#/module:Std/module:ARM/module:Op" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Op : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>ARM instruction operands</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:ARM/module:Op/type:t">
  <a href="index.html#/module:Std/module:ARM/module:Op/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:ARM/module:Op/type:t/cons:Reg">
  <a href="index.html#/module:Std/module:ARM/module:Op/type:t/cons:Reg" class="anchor">#</a>
  | Reg <span class="keyword">of</span> <a href="index.html#/module:Std/module:ARM/module:Reg">Reg</a>.<a href="index.html#/module:Std/module:ARM/module:Reg/type:t">t</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:ARM/module:Op/type:t/cons:Imm">
  <a href="index.html#/module:Std/module:ARM/module:Op/type:t/cons:Imm" class="anchor">#</a>
  | Imm <span class="keyword">of</span> <a href="index.html#/module:Std/type:word">word</a>
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:create">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : <a href="index.html#/module:Std/type:op">op</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> option
    
      <div class="doc">
        
      <p>lifts operand from a basic one</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:t_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:sexp_of_t">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:compare">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:bin_t">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:bin_read_t">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:bin_reader_t">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:bin_size_t">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:bin_write_t">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Op/val:bin_writer_t">
  <a href="index.html#/module:Std/module:ARM/module:Op/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:ARM/module:Op/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond">
  <a href="index.html#/module:Std/module:ARM/module:Cond" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Cond : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Condition prefixes.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:ARM/module:Cond/type:t">
  <a href="index.html#/module:Std/module:ARM/module:Cond/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = [ <div class="cons">| `EQ</div><div class="cons">| `NE</div><div class="cons">| `CS</div><div class="cons">| `CC</div><div class="cons">| `MI</div><div class="cons">| `PL</div><div class="cons">| `VS</div><div class="cons">| `VC</div><div class="cons">| `HI</div><div class="cons">| `LS</div><div class="cons">| `GE</div><div class="cons">| `LT</div><div class="cons">| `GT</div><div class="cons">| `LE</div><div class="cons">| `AL</div> ]
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:all">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:all" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> all : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> list
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:create">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p>decodes condition value from a word</p>
      
        
      </div>
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:Regular">Regular</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Regular/type:t">t</a> := <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:t_of_sexp">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:__t_of_sexp__">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:__t_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __t_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:sexp_of_t">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:compare">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:bin_t">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:bin_read_t">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:bin_reader_t">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:bin_size_t">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:bin_write_t">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:ARM/module:Cond/val:bin_writer_t">
  <a href="index.html#/module:Std/module:ARM/module:Cond/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:ARM/module:Cond/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32">
  <a href="index.html#/module:Std/module:IA32" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> IA32 : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p><code>x86</code> architecture</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:IA32/val:lift">
  <a href="index.html#/module:Std/module:IA32/val:lift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lift : <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert">Disasm_expert</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:stmt">stmt</a> list Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:ABI">
  <a href="index.html#/module:Std/module:IA32/module:ABI" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> ABI : <a href="index.html#/module:Std/modtype:ABI">ABI</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU">
  <a href="index.html#/module:Std/module:IA32/module:CPU" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> CPU : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:CPU">CPU</a> 
    </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rbp">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rbp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rbp : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rsp">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rsp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rsp : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rsi">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rsi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rsi : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rdi">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rdi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rdi : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rip">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rip" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rip : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rax">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rax" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rax : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rbx">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rbx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rbx : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rcx">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rcx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rcx : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:rdx">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:rdx" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> rdx : <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:IA32/module:CPU/val:r">
  <a href="index.html#/module:Std/module:IA32/module:CPU/val:r" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r : <a href="index.html#/module:Std/type:var">var</a> array
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:AMD64">
  <a href="index.html#/module:Std/module:AMD64" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> AMD64 : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p><code>x86-64</code> architecture</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:AMD64/val:lift">
  <a href="index.html#/module:Std/module:AMD64/val:lift" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lift : <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> ('a, 'k) <a href="index.html#/module:Std/module:Disasm_expert">Disasm_expert</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic">Basic</a>.<a href="index.html#/module:Std/module:Disasm_expert/module:Basic/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:stmt">stmt</a> list Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:AMD64/module:CPU">
  <a href="index.html#/module:Std/module:AMD64/module:CPU" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> CPU : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/modtype:CPU">CPU</a> 
    </div>
  
    <div class="include">
    <span class="keyword">include</span> <span class="keyword">module type of</span> <a href="index.html#/module:Std/module:IA32">IA32</a>.<a href="index.html#/module:Std/module:IA32/module:CPU">CPU</a> 
    </div>
  
  <div class="region" id="/module:Std/module:AMD64/module:CPU/val:r">
  <a href="index.html#/module:Std/module:AMD64/module:CPU/val:r" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> r : <a href="index.html#/module:Std/type:var">var</a> array
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:AMD64/module:ABI">
  <a href="index.html#/module:Std/module:AMD64/module:ABI" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> ABI : <a href="index.html#/module:Std/modtype:ABI">ABI</a></div>
      
      
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h3 class="section level_3">Sematic analysis</h3>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Symtab">
  <a href="index.html#/module:Std/module:Symtab" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Symtab : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p></p>
      
        
  <div class="tag deprecated">
    <span class="label">Deprecated</span> will be removed soon
  </div>
  
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Symtab/type:t">
  <a href="index.html#/module:Std/module:Symtab/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = string <a href="index.html#/module:Std/type:table">table</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Symtab/val:create">
  <a href="index.html#/module:Std/module:Symtab/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : <a href="index.html#/module:Std/type:addr">addr</a> list <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:block">block</a> <a href="index.html#/module:Std/type:table">table</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Symtab/type:t">t</a>
    
      <div class="doc">
        
      <p><code>create roots base cfg</code>
creates a symbol table from <code>cfg</code>. If no roots are
provided, then only calls</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Symtab/module:Graph">
  <a href="index.html#/module:Std/module:Symtab/module:Graph" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Graph : Graph.Sig.P <span class="keyword">with</span> <span class="keyword">type</span> V.label = <a href="index.html#/module:Std/type:mem">mem</a> * string <span class="keyword">and</span> <span class="keyword">type</span> E.label = <a href="index.html#/module:Std/type:addr">addr</a></div>
      
      <div class="doc">
        
      <p>callsite</p>
      
        
      </div>
    
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Symtab/val:to_graph">
  <a href="index.html#/module:Std/module:Symtab/val:to_graph" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_graph : <a href="index.html#/module:Std/type:block">block</a> <a href="index.html#/module:Std/type:table">table</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Symtab/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Symtab/module:Graph">Graph</a>.t
    
      <div class="doc">
        
      <p><code>to_graph blocks syms</code> creates a callgraph. Edges of the graph
are labeled with a callsite</p>
      
        
      </div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        
  <div class="region" id="/module:Std/label:project">
  <a href="index.html#/module:Std/label:project" class="anchor">#</a>
  
    <h1 class="section level_1">Project</h1>
    
  </div>
  
      <p>
A big view on a dissassembled binary</p>
      
        
      </div>
    
      <div class="doc">
        
      <p>Interface for the BAP project.</p>
      
      <p>Project represents the results of analysis applied to a certain
binary object. It is slightly more abstract, then binary image,
thus allowing to apply analysis on arbitrary binary blobs.</p>
      
      <p>Project is also a common ground, where different plugins can meet,
talk and exchange with information. Each plugin is barely a
function of type <code>t -&gt; t</code>, i.e., it can functionally update
project, e.g., add annotations, discover new symbols, remove
incorrect and, even, change architecture and redisassemble
everything.</p>
      <div class="region">
    <h3 class="section level_3">Exchanging information</h3>
    </div>
      <p>For exchanging information in type safe manner we use universal
values. Values can be attached to a particular memory region, or to
a key of type <code>string</code>. For the first case we use `memmap` data
structure that is an interval tree containing all the memory
regions that were used during analysis. For the latter a simple
<code>String.Map</code> is used.</p>
      <div class="region">
    <h4 class="section level_4">Annotating memory</h4>
    </div>
      <p>Depending on the analysis performed and input parameters, one can
expect that memory may be annotated with the following tags:</p>
      <ul><li><code>Image.region</code> -- for regions of memory, that had some
particular name in the original binary. For example, in ELF
sections have names, that will be used to annotate corresponding
memory regions.</li></ul><ul><li><code>Image.section</code> -- if the binary data was loaded from a binary
format that contains sections (aka segments), then corresponding
memory regions would be marked. Sections gives you access to
permission information.</li></ul><ul><li><code>Image.symbol</code> -- with this tag we annotate each memory regions
that belongs to a particular symbol. Currently, the type of tag
is just a string.</li></ul>
        
      </div>
    
  <div class="region" id="/module:Std/module:Project">
  <a href="index.html#/module:Std/module:Project" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Project : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Project/type:t">
  <a href="index.html#/module:Std/module:Project/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = {<table>
    <tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Project/type:t/field:arch">
  <a href="index.html#/module:Std/module:Project/type:t/field:arch" class="anchor">#</a>
  arch
  </div>
  </td><td>: <a href="index.html#/module:Std/type:arch">arch</a></td><td>;</td><td>(*</td><td class="doc">architecture</td><td>*)</td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Project/type:t/field:disasm">
  <a href="index.html#/module:Std/module:Project/type:t/field:disasm" class="anchor">#</a>
  disasm
  </div>
  </td><td>: <a href="index.html#/module:Std/type:disasm">disasm</a></td><td>;</td><td>(*</td><td class="doc">disassembly of a program</td><td>*)</td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Project/type:t/field:memory">
  <a href="index.html#/module:Std/module:Project/type:t/field:memory" class="anchor">#</a>
  memory
  </div>
  </td><td>: <a href="index.html#/module:Std/type:value">value</a> <a href="index.html#/module:Std/type:memmap">memmap</a></td><td>;</td><td>(*</td><td class="doc">annotations</td><td>*)</td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Project/type:t/field:storage">
  <a href="index.html#/module:Std/module:Project/type:t/field:storage" class="anchor">#</a>
  storage
  </div>
  </td><td>: <a href="index.html#/module:Std/type:value">value</a> Core_kernel.Std.String.Map.t</td><td>;</td><td>(*</td><td class="doc">arbitrary data storage</td><td>*)</td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Project/type:t/field:symbols">
  <a href="index.html#/module:Std/module:Project/type:t/field:symbols" class="anchor">#</a>
  symbols
  </div>
  </td><td>: string <a href="index.html#/module:Std/type:table">table</a></td><td>;</td><td></td><td></td><td></td>
  </tr><tr class="field">
  <td>
  <div class="region" id="/module:Std/module:Project/type:t/field:base">
  <a href="index.html#/module:Std/module:Project/type:t/field:base" class="anchor">#</a>
  base
  </div>
  </td><td>: <a href="index.html#/module:Std/type:mem">mem</a></td><td>;</td><td></td><td></td><td></td>
  </tr>
    </table>}
    
      <div class="doc">
        
      <p>The result of Binary analysis.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/type:color">
  <a href="index.html#/module:Std/module:Project/type:color" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> color = [ <div class="cons">| `black</div><div class="cons">| `red</div><div class="cons">| `green</div><div class="cons">| `yellow</div><div class="cons">| `blue</div><div class="cons">| `magenta</div><div class="cons">| `cyan</div><div class="cons">| `white</div> ]
    
  </div>
  
  </div>
  
      <div class="doc">
        
      <p>all string tags supports the following substitutions:</p>
      <ul><li>$region_
    <span style="color:orange">CUSTOM(name) ,addr,min_addr,max_addr</span>
     - name of region of file
to which it belongs. For example, in ELF this name will
correspond to the section name</li></ul><ul><li>$symbol_
    <span style="color:orange">CUSTOM(name) ,addr</span>
     - name or address of the symbol to which this
memory belongs</li></ul><ul><li>$asm - assembler listing of the memory region</li></ul><ul><li>$bil - BIL code of the tagged memory region</li></ul><ul><li>$block_
    <span style="color:orange">CUSTOM(name) ,addr</span>
     - name or address of a basic block to which
this region belongs</li></ul><ul><li>$min_addr, $addr - starting address of a memory region</li></ul><ul><li>$max_addr - address of the last byte of a memory region.</li></ul>
        
      </div>
    
  <div class="region" id="/module:Std/module:Project/val:text">
  <a href="index.html#/module:Std/module:Project/val:text" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> text : string <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>an arbitrary text</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:html">
  <a href="index.html#/module:Std/module:Project/val:html" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> html : string <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>the associated data is an html markup</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:comment">
  <a href="index.html#/module:Std/module:Project/val:comment" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> comment : string <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>associate a comment string with a memory region</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:python">
  <a href="index.html#/module:Std/module:Project/val:python" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> python : string <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>to assosiate a python command with a region</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:shell">
  <a href="index.html#/module:Std/module:Project/val:shell" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> shell : string <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>to assosiate a shell command with a region</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:mark">
  <a href="index.html#/module:Std/module:Project/val:mark" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> mark : unit <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>just mark a region</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:color">
  <a href="index.html#/module:Std/module:Project/val:color" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> color : <a href="index.html#/module:Std/module:Project/type:color">color</a> <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>attach a color</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:weight">
  <a href="index.html#/module:Std/module:Project/val:weight" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> weight : float <a href="index.html#/module:Std/type:tag">tag</a>
    
      <div class="doc">
        
      <p>attach a weight to a memory</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:register_plugin">
  <a href="index.html#/module:Std/module:Project/val:register_plugin" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> register_plugin : (<a href="index.html#/module:Std/module:Project/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Project/type:t">t</a>) <span class="rarr"><span>-&gt;</span></span> unit
    
      <div class="doc">
        
      <p><code>register plugin</code> registers <code>plugin</code> in the system</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:register_plugin'">
  <a href="index.html#/module:Std/module:Project/val:register_plugin'" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> register_plugin' : (<a href="index.html#/module:Std/module:Project/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
      <div class="doc">
        
      <p><code>register' plugin</code> registers a <code>plugin</code> that will be
evaluated only for side effect.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:register_plugin_with_args">
  <a href="index.html#/module:Std/module:Project/val:register_plugin_with_args" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> register_plugin_with_args : (string array <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Project/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Project/type:t">t</a>) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:register_plugin_with_args'">
  <a href="index.html#/module:Std/module:Project/val:register_plugin_with_args'" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> register_plugin_with_args' : (string array <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Project/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:plugins">
  <a href="index.html#/module:Std/module:Project/val:plugins" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> plugins : unit <span class="rarr"><span>-&gt;</span></span> (string array <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Project/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Project/type:t">t</a>) list
    
      <div class="doc">
        
      <p>A list of registered plugins in the order of registration</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:color_of_sexp">
  <a href="index.html#/module:Std/module:Project/val:color_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> color_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Project/type:color">color</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:__color_of_sexp__">
  <a href="index.html#/module:Std/module:Project/val:__color_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __color_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Project/type:color">color</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Project/val:sexp_of_color">
  <a href="index.html#/module:Std/module:Project/val:sexp_of_color" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_color : <a href="index.html#/module:Std/module:Project/type:color">color</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h1 class="section level_1">Auxiliary libraries</h1>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Dwarf">
  <a href="index.html#/module:Std/module:Dwarf" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Dwarf : <span class="keyword">sig</span></div>
      
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Dwarf library</h4>
    </div>
      <p>
This library gives an access to debugging information stored
in a binary program.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Leb128 : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
      <div class="doc">
        
      <p>an encoded value</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/type:encoder">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:encoder" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a encoder = ?signed:bool <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a>
    
      <div class="doc">
        
      <p><code>encode ~signed v</code> encodes value <code>v</code> in a LEB128 format. If
signed is true, then uses signed encoding.</p>
      
      <p><code>decode leb</code> decodes a number from LEB128 representation.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/type:decoder">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:decoder" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a decoder = <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> 'a Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:size">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> size : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p><code>size leb</code> return size in bytes of the number stored in LEB128
encoding.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:read">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:read" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> read : ?signed:bool <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> pos_ref:int <a href="../../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html">Pervasives</a>.<a href="../../../../../ocaml.4.02.1+doc/stdlib/pervasives/index.html#/type:ref">ref</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> Core_kernel.Std.Or_error.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:write">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:write" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> write : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> pos:int <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:to_int">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:to_int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_int : int <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:decoder">decoder</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:to_int32">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:to_int32" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_int32 : int32 <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:decoder">decoder</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:to_int64">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:to_int64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> to_int64 : int64 <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:decoder">decoder</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:of_int">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:of_int" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int : int <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:encoder">encoder</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:of_int32">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:of_int32" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int32 : int32 <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:encoder">encoder</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:of_int64">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:of_int64" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> of_int64 : int64 <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:encoder">encoder</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:compare">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:bin_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:bin_read_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:bin_size_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:bin_write_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Leb128/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Leb128/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Dwarf/module:Leb128/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section">
  <a href="index.html#/module:Std/module:Dwarf/module:Section" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Section : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>File sections</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Section/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Section/type:t/cons:Info">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t/cons:Info" class="anchor">#</a>
  | Info
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Section/type:t/cons:Abbrev">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t/cons:Abbrev" class="anchor">#</a>
  | Abbrev
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Section/type:t/cons:Str">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t/cons:Str" class="anchor">#</a>
  | Str
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:str">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:str" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> str : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:abbrev">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:abbrev" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> abbrev : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:info">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:info" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> info : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/module:Variants">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/module:Variants" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Variants : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Section/module:Variants/val:str">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/module:Variants/val:str" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> str : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/module:Variants/val:abbrev">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/module:Variants/val:abbrev" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> abbrev : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/module:Variants/val:info">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/module:Variants/val:info" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> info : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/module:Variants/val:fold">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/module:Variants/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> info:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> abbrev:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> str:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/module:Variants/val:iter">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/module:Variants/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : info:(<a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> abbrev:(<a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> str:(<a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/module:Variants/val:map">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/module:Variants/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> info:(<a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> abbrev:(<a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> str:(<a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> 'result__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/module:Variants/val:descriptions">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/module:Variants/val:descriptions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> descriptions : (string * int) list
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:compare">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:bin_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:bin_read_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:bin_size_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:bin_write_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Section/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Section/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Tag : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Debug Entry Tag</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/type:t/cons:Compile_unit">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t/cons:Compile_unit" class="anchor">#</a>
  | Compile_unit
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/type:t/cons:Partial_unit">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t/cons:Partial_unit" class="anchor">#</a>
  | Partial_unit
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/type:t/cons:Subprogram">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t/cons:Subprogram" class="anchor">#</a>
  | Subprogram
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/type:t/cons:Entry_point">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t/cons:Entry_point" class="anchor">#</a>
  | Entry_point
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/type:t/cons:Inlined_subroutine">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t/cons:Inlined_subroutine" class="anchor">#</a>
  | Inlined_subroutine
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/type:t/cons:Unknown">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t/cons:Unknown" class="anchor">#</a>
  | Unknown <span class="keyword">of</span> int
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:unknown">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:unknown" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unknown : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:inlined_subroutine">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:inlined_subroutine" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> inlined_subroutine : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:entry_point">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:entry_point" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> entry_point : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:subprogram">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:subprogram" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> subprogram : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:partial_unit">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:partial_unit" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> partial_unit : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:compile_unit">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:compile_unit" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compile_unit : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Variants : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:unknown">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:unknown" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unknown : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>) Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:inlined_subroutine">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:inlined_subroutine" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> inlined_subroutine : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:entry_point">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:entry_point" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> entry_point : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:subprogram">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:subprogram" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> subprogram : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:partial_unit">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:partial_unit" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> partial_unit : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:compile_unit">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:compile_unit" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compile_unit : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:fold">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> compile_unit:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> partial_unit:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> subprogram:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> entry_point:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> inlined_subroutine:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> unknown:('acc__ <span class="rarr"><span>-&gt;</span></span> (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:iter">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : compile_unit:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> partial_unit:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> subprogram:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> entry_point:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> inlined_subroutine:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unknown:((int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:map">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> compile_unit:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> partial_unit:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> subprogram:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> entry_point:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> inlined_subroutine:(<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> unknown:((int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> 'result__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/module:Variants/val:descriptions">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/module:Variants/val:descriptions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> descriptions : (string * int) list
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:compare">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:bin_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:bin_read_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:bin_size_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:bin_write_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Tag/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Tag/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Attr : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Attribute</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/type:t/cons:Name">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t/cons:Name" class="anchor">#</a>
  | Name
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/type:t/cons:Low_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t/cons:Low_pc" class="anchor">#</a>
  | Low_pc
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/type:t/cons:High_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t/cons:High_pc" class="anchor">#</a>
  | High_pc
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/type:t/cons:Entry_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t/cons:Entry_pc" class="anchor">#</a>
  | Entry_pc
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/type:t/cons:Unknown">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t/cons:Unknown" class="anchor">#</a>
  | Unknown <span class="keyword">of</span> int
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:unknown">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:unknown" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unknown : int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:entry_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:entry_pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> entry_pc : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:high_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:high_pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> high_pc : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:low_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:low_pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> low_pc : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:name">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Variants : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:unknown">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:unknown" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unknown : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>) Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:entry_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:entry_pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> entry_pc : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:high_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:high_pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> high_pc : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:low_pc">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:low_pc" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> low_pc : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:name">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:name" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> name : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:fold">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> name:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> low_pc:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> high_pc:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> entry_pc:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> unknown:('acc__ <span class="rarr"><span>-&gt;</span></span> (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:iter">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : name:(<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> low_pc:(<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> high_pc:(<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> entry_pc:(<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unknown:((int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:map">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> name:(<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> low_pc:(<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> high_pc:(<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> entry_pc:(<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> unknown:((int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> 'result__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/module:Variants/val:descriptions">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/module:Variants/val:descriptions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> descriptions : (string * int) list
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:compare">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:bin_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:bin_read_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:bin_size_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:bin_write_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Attr/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Attr/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/type:lenspec">
  <a href="index.html#/module:Std/module:Dwarf/type:lenspec" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> lenspec = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/type:lenspec/cons:Leb128">
  <a href="index.html#/module:Std/module:Dwarf/type:lenspec/cons:Leb128" class="anchor">#</a>
  | Leb128
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/type:lenspec/cons:One">
  <a href="index.html#/module:Std/module:Dwarf/type:lenspec/cons:One" class="anchor">#</a>
  | One
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/type:lenspec/cons:Two">
  <a href="index.html#/module:Std/module:Dwarf/type:lenspec/cons:Two" class="anchor">#</a>
  | Two
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/type:lenspec/cons:Four">
  <a href="index.html#/module:Std/module:Dwarf/type:lenspec/cons:Four" class="anchor">#</a>
  | Four
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/type:lenspec/cons:Eight">
  <a href="index.html#/module:Std/module:Dwarf/type:lenspec/cons:Eight" class="anchor">#</a>
  | Eight
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form">
  <a href="index.html#/module:Std/module:Dwarf/module:Form" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Form : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Attribute form</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <table>
    <tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Addr">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Addr" class="anchor">#</a>
  | Addr
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:String">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:String" class="anchor">#</a>
  | String
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Block">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Block" class="anchor">#</a>
  | Block <span class="keyword">of</span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Const">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Const" class="anchor">#</a>
  | Const <span class="keyword">of</span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Flag_present">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Flag_present" class="anchor">#</a>
  | Flag_present
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Strp">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Strp" class="anchor">#</a>
  | Strp
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Ref">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Ref" class="anchor">#</a>
  | Ref <span class="keyword">of</span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a>
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Indirect">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Indirect" class="anchor">#</a>
  | Indirect
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Offset">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Offset" class="anchor">#</a>
  | Offset
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Expr">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Expr" class="anchor">#</a>
  | Expr
  </div>
  </td><td></td><td></td><td></td></tr><tr class="cons"><td>
  <div class="region" id="/module:Std/module:Dwarf/module:Form/type:t/cons:Sig">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t/cons:Sig" class="anchor">#</a>
  | Sig
  </div>
  </td><td></td><td></td><td></td></tr>
    </table>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:sig">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:sig" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sig : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:expr">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:expr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> expr : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:offset">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:offset" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> offset : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:indirect">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:indirect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> indirect : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:ref">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:ref" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ref : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:strp">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:strp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> strp : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:flag_present">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:flag_present" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> flag_present : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:const">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:const" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> const : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:block">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:block" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> block : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:string">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:string" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> string : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:addr">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Variants : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:sig">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:sig" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sig : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:expr">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:expr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> expr : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:offset">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:offset" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> offset : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:indirect">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:indirect" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> indirect : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:ref">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:ref" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> ref : (<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:strp">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:strp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> strp : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:flag_present">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:flag_present" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> flag_present : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:const">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:const" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> const : (<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:block">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:block" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> block : (<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:string">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:string" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> string : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:addr">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:fold">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:fold" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fold : init:'acc__ <span class="rarr"><span>-&gt;</span></span> addr:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> string:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> block:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> const:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> flag_present:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> strp:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> ref:('acc__ <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> indirect:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> offset:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> expr:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> sig:('acc__ <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'acc__) <span class="rarr"><span>-&gt;</span></span> 'acc__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:iter">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:iter" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> iter : addr:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> string:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> block:((<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> const:((<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> flag_present:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> strp:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> ref:((<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> indirect:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> offset:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> expr:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> sig:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> unit) <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:map">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:map" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> map : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> addr:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> string:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> block:((<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> const:((<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> flag_present:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> strp:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> ref:((<a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> indirect:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> offset:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> expr:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> sig:(<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Variantslib.Variant.t <span class="rarr"><span>-&gt;</span></span> 'result__) <span class="rarr"><span>-&gt;</span></span> 'result__
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/module:Variants/val:descriptions">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/module:Variants/val:descriptions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> descriptions : (string * int) list
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:compare">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:bin_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:bin_read_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:bin_size_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:bin_write_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Form/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Form/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/type:tag">
  <a href="index.html#/module:Std/module:Dwarf/type:tag" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> tag = <a href="index.html#/module:Std/module:Dwarf/module:Tag">Tag</a>.<a href="index.html#/module:Std/module:Dwarf/module:Tag/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/type:attr">
  <a href="index.html#/module:Std/module:Dwarf/type:attr" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> attr = <a href="index.html#/module:Std/module:Dwarf/module:Attr">Attr</a>.<a href="index.html#/module:Std/module:Dwarf/module:Attr/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/type:form">
  <a href="index.html#/module:Std/module:Dwarf/type:form" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> form = <a href="index.html#/module:Std/module:Dwarf/module:Form">Form</a>.<a href="index.html#/module:Std/module:Dwarf/module:Form/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/type:section">
  <a href="index.html#/module:Std/module:Dwarf/type:section" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> section = <a href="index.html#/module:Std/module:Dwarf/module:Section">Section</a>.<a href="index.html#/module:Std/module:Dwarf/module:Section/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/type:fn">
  <a href="index.html#/module:Std/module:Dwarf/type:fn" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> fn
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Fn : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Current function representation.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t = <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:pc_lo">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:pc_lo" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pc_lo : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:pc_hi">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:pc_hi" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pc_hi : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> option
    
  </div>
  
  </div>
  
    <div class="include">
    <span class="keyword">include</span> Core_kernel.Std.Identifiable.S <span class="keyword">with</span> <span class="keyword">type</span> t := <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:compare">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:compare" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:bin_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:bin_read_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:bin_size_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:bin_write_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fn/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fn/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Dwarf/module:Fn/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fbi">
  <a href="index.html#/module:Std/module:Dwarf/module:Fbi" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Fbi : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Fbi/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Fbi/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fbi/val:create">
  <a href="index.html#/module:Std/module:Dwarf/module:Fbi/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : string <a href="../../../../../bap.master/doc/dwarf_data/index.html">Dwarf_data</a>.<a href="../../../../../bap.master/doc/dwarf_data/index.html#/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/module:Fbi/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>create data</code> tries to create a DWARF reader, from
supplied <code>data</code>. May yield an error, if there wasn't sufficient
sections, or if format is not understandable.</p>
      
      <p>To provide information about functions parser needs at least this
three sections:</p>
      <ul><li>.debug_abbrev <code>Section.Abbr</code></li><li>.debug_info <code>Section.Info</code></li><li>.debug_str <code>Section.Str</code></li></ul>
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Fbi/val:functions">
  <a href="index.html#/module:Std/module:Dwarf/module:Fbi/val:functions" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> functions : <a href="index.html#/module:Std/module:Dwarf/module:Fbi/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> (string * <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a>) Core_kernel.Std.Sequence.t
    
      <div class="doc">
        
      <p><code>functions searcher</code> enumerates functions</p>
      
        
      </div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Buffer">
  <a href="index.html#/module:Std/module:Dwarf/module:Buffer" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Buffer : <span class="keyword">sig</span></div>
      
      <div class="doc">
        
      <p>Buffer is a light abstraction over <code>string</code> and <code>bigstring</code>,
that can allow one to share the same string for different sections
without explicit copying.</p>
      
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Buffer/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a t
    
      <div class="doc">
        
      <p><code>create ~pos:0</code> creates a buffer from a data</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Buffer/val:create">
  <a href="index.html#/module:Std/module:Dwarf/module:Buffer/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : ?pos:int <span class="rarr"><span>-&gt;</span></span> 'a <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Buffer/val:with_pos">
  <a href="index.html#/module:Std/module:Dwarf/module:Buffer/val:with_pos" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> with_pos : 'a <a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t">t</a>
    
      <div class="doc">
        
      <p><code>with_pos buf pos</code> creates a new buffer that shares data with
<code>buf</code>, but has different starting position</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Buffer/val:with_off">
  <a href="index.html#/module:Std/module:Dwarf/module:Buffer/val:with_off" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> with_off : 'a <a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t">t</a>
    
      <div class="doc">
        
      <p><code>with_off buf off</code> creates a new buffer that shares data with
<code>buf</code>, but has different starting position equal to <code>pos buf + off</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Buffer/val:pos">
  <a href="index.html#/module:Std/module:Dwarf/module:Buffer/val:pos" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pos : 'a <a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
      <div class="doc">
        
      <p><code>pos buf</code> starting position</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Buffer/val:data">
  <a href="index.html#/module:Std/module:Dwarf/module:Buffer/val:data" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> data : 'a <a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> 'a
    
      <div class="doc">
        
      <p><code>data pos</code> actual data.</p>
      
      <p>Note: it doesn't start from <code>pos</code>, it start from <code>0</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Data">
  <a href="index.html#/module:Std/module:Dwarf/module:Data" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Data : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Dwarf/module:Data/type:t">
  <a href="index.html#/module:Std/module:Dwarf/module:Data/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Data/type:buffer">
  <a href="index.html#/module:Std/module:Dwarf/module:Data/type:buffer" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> 'a buffer = 'a <a href="index.html#/module:Std/module:Dwarf/module:Buffer">Buffer</a>.<a href="index.html#/module:Std/module:Dwarf/module:Buffer/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Data/val:create">
  <a href="index.html#/module:Std/module:Dwarf/module:Data/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Dwarf/type:section">section</a> * 'a <a href="index.html#/module:Std/module:Dwarf/module:Data/type:buffer">buffer</a>) list <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Dwarf/module:Data/type:t">t</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>create endian sections</code> creates data representation from a assoc list
of sections. Will complain if there're repeating sections.</p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Data/val:section">
  <a href="index.html#/module:Std/module:Dwarf/module:Data/val:section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> section : 'a <a href="index.html#/module:Std/module:Dwarf/module:Data/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/module:Dwarf/module:Data/type:buffer">buffer</a> Core_kernel.Std.Or_error.t
    
      <div class="doc">
        
      <p><code>section data</code> lookups for a <code>section</code> in <code>data</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/module:Data/val:endian">
  <a href="index.html#/module:Std/module:Dwarf/module:Data/val:endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> endian : 'a <a href="index.html#/module:Std/module:Dwarf/module:Data/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a>
    
      <div class="doc">
        
      <p><code>endian data</code> the endianness of <code>data</code></p>
      
        
      </div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:compare_lenspec">
  <a href="index.html#/module:Std/module:Dwarf/val:compare_lenspec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_lenspec : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_lenspec">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_lenspec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_lenspec : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_read_lenspec">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_read_lenspec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_lenspec : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:__bin_read_lenspec__">
  <a href="index.html#/module:Std/module:Dwarf/val:__bin_read_lenspec__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_lenspec__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_reader_lenspec">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_reader_lenspec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_lenspec : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_size_lenspec">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_size_lenspec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_lenspec : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_write_lenspec">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_write_lenspec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_lenspec : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_writer_lenspec">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_writer_lenspec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_lenspec : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:lenspec_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/val:lenspec_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> lenspec_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:sexp_of_lenspec">
  <a href="index.html#/module:Std/module:Dwarf/val:sexp_of_lenspec" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_lenspec : <a href="index.html#/module:Std/module:Dwarf/type:lenspec">lenspec</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:compare_tag">
  <a href="index.html#/module:Std/module:Dwarf/val:compare_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_tag : <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_tag">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_tag : <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_read_tag">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_read_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_tag : <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:__bin_read_tag__">
  <a href="index.html#/module:Std/module:Dwarf/val:__bin_read_tag__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_tag__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_reader_tag">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_reader_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_tag : <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_size_tag">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_size_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_tag : <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_write_tag">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_write_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_tag : <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_writer_tag">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_writer_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_tag : <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:tag_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/val:tag_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> tag_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:sexp_of_tag">
  <a href="index.html#/module:Std/module:Dwarf/val:sexp_of_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_tag : <a href="index.html#/module:Std/module:Dwarf/type:tag">tag</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:compare_attr">
  <a href="index.html#/module:Std/module:Dwarf/val:compare_attr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_attr : <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_attr">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_attr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_attr : <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_read_attr">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_read_attr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_attr : <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:__bin_read_attr__">
  <a href="index.html#/module:Std/module:Dwarf/val:__bin_read_attr__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_attr__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_reader_attr">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_reader_attr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_attr : <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_size_attr">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_size_attr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_attr : <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_write_attr">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_write_attr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_attr : <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_writer_attr">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_writer_attr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_attr : <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:attr_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/val:attr_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> attr_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:sexp_of_attr">
  <a href="index.html#/module:Std/module:Dwarf/val:sexp_of_attr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_attr : <a href="index.html#/module:Std/module:Dwarf/type:attr">attr</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:compare_form">
  <a href="index.html#/module:Std/module:Dwarf/val:compare_form" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_form : <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_form">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_form" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_form : <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_read_form">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_read_form" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_form : <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:__bin_read_form__">
  <a href="index.html#/module:Std/module:Dwarf/val:__bin_read_form__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_form__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:form">form</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_reader_form">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_reader_form" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_form : <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_size_form">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_size_form" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_form : <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_write_form">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_write_form" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_form : <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_writer_form">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_writer_form" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_form : <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:form_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/val:form_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> form_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:form">form</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:sexp_of_form">
  <a href="index.html#/module:Std/module:Dwarf/val:sexp_of_form" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_form : <a href="index.html#/module:Std/module:Dwarf/type:form">form</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:compare_section">
  <a href="index.html#/module:Std/module:Dwarf/val:compare_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_section : <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_section">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_section : <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_read_section">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_read_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_section : <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:__bin_read_section__">
  <a href="index.html#/module:Std/module:Dwarf/val:__bin_read_section__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_section__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:section">section</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_reader_section">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_reader_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_section : <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_size_section">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_size_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_section : <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_write_section">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_write_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_section : <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_writer_section">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_writer_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_section : <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:section_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/val:section_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> section_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:section">section</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:sexp_of_section">
  <a href="index.html#/module:Std/module:Dwarf/val:sexp_of_section" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_section : <a href="index.html#/module:Std/module:Dwarf/type:section">section</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:fn_of_sexp">
  <a href="index.html#/module:Std/module:Dwarf/val:fn_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fn_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:sexp_of_fn">
  <a href="index.html#/module:Std/module:Dwarf/val:sexp_of_fn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_fn : <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:compare_fn">
  <a href="index.html#/module:Std/module:Dwarf/val:compare_fn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_fn : <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_fn">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_fn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_fn : <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_read_fn">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_read_fn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_fn : <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:__bin_read_fn__">
  <a href="index.html#/module:Std/module:Dwarf/val:__bin_read_fn__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_fn__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_reader_fn">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_reader_fn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_fn : <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_size_fn">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_size_fn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_fn : <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_write_fn">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_write_fn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_fn : <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Dwarf/val:bin_writer_fn">
  <a href="index.html#/module:Std/module:Dwarf/val:bin_writer_fn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_fn : <a href="index.html#/module:Std/module:Dwarf/type:fn">fn</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Signatures">
  <a href="index.html#/module:Std/module:Signatures" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Signatures : <span class="keyword">sig</span></div>
      
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Binary Signatures Storage</h4>
    </div>
        
      </div>
    
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Signatures/val:save">
  <a href="index.html#/module:Std/module:Signatures/val:save" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> save : ?comp:string <span class="rarr"><span>-&gt;</span></span> mode:string <span class="rarr"><span>-&gt;</span></span> path:string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> string <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Signatures/val:load">
  <a href="index.html#/module:Std/module:Signatures/val:load" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> load : ?comp:string <span class="rarr"><span>-&gt;</span></span> ?path:string <span class="rarr"><span>-&gt;</span></span> mode:string <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> string option
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Signatures/val:default_path">
  <a href="index.html#/module:Std/module:Signatures/val:default_path" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> default_path : string
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
      <div class="doc">
        <div class="region">
    <h4 class="section level_4">Byteweight Algorithm implementation</h4>
    </div>
        
      </div>
    
  <div class="region" id="/module:Std/module:Byteweight">
  <a href="index.html#/module:Std/module:Byteweight" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Byteweight : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
  <div class="region" id="/module:Std/module:Byteweight/modtype:Corpus">
  <a href="index.html#/module:Std/module:Byteweight/modtype:Corpus" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> Corpus = <span class="keyword">sig</span>
    </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/module:Byteweight/modtype:Corpus/type:t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:Corpus/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:Corpus/type:key">
  <a href="index.html#/module:Std/module:Byteweight/modtype:Corpus/type:key" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> key
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:Corpus/val:look">
  <a href="index.html#/module:Std/module:Byteweight/modtype:Corpus/val:look" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> look : <a href="index.html#/module:Std/module:Byteweight/modtype:Corpus/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> length:int <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Byteweight/modtype:Corpus/type:key">key</a> option
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S" class="anchor">#</a>
  
  <div class="modtype">
    <div class="intro">
      <span class="keyword">module type</span> S = <span class="keyword">sig</span>
    </div>
    
    
    <div class="sig">
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/type:t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/type:key">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:key" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> key
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/type:corpus">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:corpus" class="anchor">#</a>
  
  <div class="type">
    <span class="keyword">type</span> corpus
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:create">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:create" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> create : unit <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:train">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:train" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> train : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> max_length:int <span class="rarr"><span>-&gt;</span></span> (<a href="index.html#/module:Std/module:Byteweight/modtype:S/type:key">key</a> <span class="rarr"><span>-&gt;</span></span> bool) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:corpus">corpus</a> <span class="rarr"><span>-&gt;</span></span> unit
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:length">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:length" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> length : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:next">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:next" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> next : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> length:int <span class="rarr"><span>-&gt;</span></span> threshold:float <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:corpus">corpus</a> <span class="rarr"><span>-&gt;</span></span> int <span class="rarr"><span>-&gt;</span></span> int option
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:pp">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:pp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> pp : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> <a href="index.html#/module:Std/type:printer">printer</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:t_of_sexp">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:t_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> t_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:sexp_of_t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:sexp_of_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_t : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:bin_t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:bin_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_t : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:bin_read_t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:bin_read_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_t : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:__bin_read_t__">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:__bin_read_t__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_t__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:bin_reader_t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:bin_reader_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_t : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:bin_size_t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:bin_size_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_t : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:bin_write_t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:bin_write_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_t : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/modtype:S/val:bin_writer_t">
  <a href="index.html#/module:Std/module:Byteweight/modtype:S/val:bin_writer_t" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_t : <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:t">t</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/module:Make">
  <a href="index.html#/module:Std/module:Byteweight/module:Make" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Make : <span class="keyword">functor</span> (Corpus : <a href="index.html#/module:Std/module:Byteweight/modtype:Corpus">Corpus</a>) <span class="rarr"><span>-&gt;</span></span> <span class="keyword">functor</span> (Trie : <a href="index.html#/module:Std/modtype:Trie">Trie</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/modtype:Trie/type:key">key</a> = <a href="index.html#/module:Std/module:Byteweight/module:Make/modarg:1:Corpus">Corpus</a>.<a href="index.html#/module:Std/module:Byteweight/module:Make/modarg:1:Corpus/type:key">key</a>) <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Byteweight/modtype:S">S</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:key">key</a> = <a href="index.html#/module:Std/module:Byteweight/module:Make/modarg:1:Corpus">Corpus</a>.<a href="index.html#/module:Std/module:Byteweight/module:Make/modarg:1:Corpus/type:key">key</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:corpus">corpus</a> = <a href="index.html#/module:Std/module:Byteweight/module:Make/modarg:1:Corpus">Corpus</a>.<a href="index.html#/module:Std/module:Byteweight/module:Make/modarg:1:Corpus/type:t">t</a></div>
      
      
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/module:Byteweight/module:Bytes">
  <a href="index.html#/module:Std/module:Byteweight/module:Bytes" class="anchor">#</a>
  
  <div class="module">
      
      <div class="intro"><span class="keyword">module</span> Bytes : <span class="keyword">sig</span></div>
      
      
    <div class="sig">
    <div class="include">
    <span class="keyword">include</span> <a href="index.html#/module:Std/module:Byteweight/modtype:S">S</a> <span class="keyword">with</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:key">key</a> = <a href="index.html#/module:Std/type:mem">mem</a> <span class="keyword">and</span> <span class="keyword">type</span> <a href="index.html#/module:Std/module:Byteweight/modtype:S/type:corpus">corpus</a> = <a href="index.html#/module:Std/type:mem">mem</a> 
    </div>
  
  <div class="region" id="/module:Std/module:Byteweight/module:Bytes/val:find">
  <a href="index.html#/module:Std/module:Byteweight/module:Bytes/val:find" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> find : <a href="index.html#/module:Std/module:Byteweight/module:Bytes/type:t">t</a> <span class="rarr"><span>-&gt;</span></span> length:int <span class="rarr"><span>-&gt;</span></span> threshold:float <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/module:Byteweight/module:Bytes/type:corpus">corpus</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> list
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:word_of_sexp">
  <a href="index.html#/module:Std/val:word_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> word_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_word">
  <a href="index.html#/module:Std/val:sexp_of_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_word : <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_word">
  <a href="index.html#/module:Std/val:compare_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_word : <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_word">
  <a href="index.html#/module:Std/val:bin_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_word : <a href="index.html#/module:Std/type:word">word</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_word">
  <a href="index.html#/module:Std/val:bin_read_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_word : <a href="index.html#/module:Std/type:word">word</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_word__">
  <a href="index.html#/module:Std/val:__bin_read_word__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_word__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:word">word</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_word">
  <a href="index.html#/module:Std/val:bin_reader_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_word : <a href="index.html#/module:Std/type:word">word</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_word">
  <a href="index.html#/module:Std/val:bin_size_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_word : <a href="index.html#/module:Std/type:word">word</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_word">
  <a href="index.html#/module:Std/val:bin_write_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_word : <a href="index.html#/module:Std/type:word">word</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_word">
  <a href="index.html#/module:Std/val:bin_writer_word" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_word : <a href="index.html#/module:Std/type:word">word</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:addr_of_sexp">
  <a href="index.html#/module:Std/val:addr_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_addr">
  <a href="index.html#/module:Std/val:sexp_of_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_addr : <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_addr">
  <a href="index.html#/module:Std/val:compare_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_addr : <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_addr">
  <a href="index.html#/module:Std/val:bin_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_addr : <a href="index.html#/module:Std/type:addr">addr</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_addr">
  <a href="index.html#/module:Std/val:bin_read_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_addr : <a href="index.html#/module:Std/type:addr">addr</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_addr__">
  <a href="index.html#/module:Std/val:__bin_read_addr__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_addr__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr">addr</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_addr">
  <a href="index.html#/module:Std/val:bin_reader_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_addr : <a href="index.html#/module:Std/type:addr">addr</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_addr">
  <a href="index.html#/module:Std/val:bin_size_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_addr : <a href="index.html#/module:Std/type:addr">addr</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_addr">
  <a href="index.html#/module:Std/val:bin_write_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_addr : <a href="index.html#/module:Std/type:addr">addr</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_addr">
  <a href="index.html#/module:Std/val:bin_writer_addr" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_addr : <a href="index.html#/module:Std/type:addr">addr</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:size_of_sexp">
  <a href="index.html#/module:Std/val:size_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> size_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_size">
  <a href="index.html#/module:Std/val:sexp_of_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_size : <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_size">
  <a href="index.html#/module:Std/val:compare_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_size : <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size">
  <a href="index.html#/module:Std/val:bin_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size : <a href="index.html#/module:Std/type:size">size</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_size">
  <a href="index.html#/module:Std/val:bin_read_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_size : <a href="index.html#/module:Std/type:size">size</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_size__">
  <a href="index.html#/module:Std/val:__bin_read_size__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_size__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:size">size</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_size">
  <a href="index.html#/module:Std/val:bin_reader_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_size : <a href="index.html#/module:Std/type:size">size</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_size">
  <a href="index.html#/module:Std/val:bin_size_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_size : <a href="index.html#/module:Std/type:size">size</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_size">
  <a href="index.html#/module:Std/val:bin_write_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_size : <a href="index.html#/module:Std/type:size">size</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_size">
  <a href="index.html#/module:Std/val:bin_writer_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_size : <a href="index.html#/module:Std/type:size">size</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:addr_size_of_sexp">
  <a href="index.html#/module:Std/val:addr_size_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> addr_size_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr_size">addr_size</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_addr_size">
  <a href="index.html#/module:Std/val:sexp_of_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_addr_size : <a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_addr_size">
  <a href="index.html#/module:Std/val:compare_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_addr_size : <a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr_size">addr_size</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_addr_size">
  <a href="index.html#/module:Std/val:bin_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_addr_size : <a href="index.html#/module:Std/type:addr_size">addr_size</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_addr_size">
  <a href="index.html#/module:Std/val:bin_read_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_addr_size : <a href="index.html#/module:Std/type:addr_size">addr_size</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_addr_size__">
  <a href="index.html#/module:Std/val:__bin_read_addr_size__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_addr_size__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:addr_size">addr_size</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_addr_size">
  <a href="index.html#/module:Std/val:bin_reader_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_addr_size : <a href="index.html#/module:Std/type:addr_size">addr_size</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_addr_size">
  <a href="index.html#/module:Std/val:bin_size_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_addr_size : <a href="index.html#/module:Std/type:addr_size">addr_size</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_addr_size">
  <a href="index.html#/module:Std/val:bin_write_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_addr_size : <a href="index.html#/module:Std/type:addr_size">addr_size</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_addr_size">
  <a href="index.html#/module:Std/val:bin_writer_addr_size" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_addr_size : <a href="index.html#/module:Std/type:addr_size">addr_size</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:nat1_of_sexp">
  <a href="index.html#/module:Std/val:nat1_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> nat1_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_nat1">
  <a href="index.html#/module:Std/val:sexp_of_nat1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_nat1 : <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_nat1">
  <a href="index.html#/module:Std/val:compare_nat1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_nat1 : <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_nat1">
  <a href="index.html#/module:Std/val:bin_nat1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_nat1 : <a href="index.html#/module:Std/type:nat1">nat1</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_nat1">
  <a href="index.html#/module:Std/val:bin_read_nat1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_nat1 : <a href="index.html#/module:Std/type:nat1">nat1</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_nat1__">
  <a href="index.html#/module:Std/val:__bin_read_nat1__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_nat1__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:nat1">nat1</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_nat1">
  <a href="index.html#/module:Std/val:bin_reader_nat1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_nat1 : <a href="index.html#/module:Std/type:nat1">nat1</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_nat1">
  <a href="index.html#/module:Std/val:bin_size_nat1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_nat1 : <a href="index.html#/module:Std/type:nat1">nat1</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_nat1">
  <a href="index.html#/module:Std/val:bin_write_nat1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_nat1 : <a href="index.html#/module:Std/type:nat1">nat1</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_nat1">
  <a href="index.html#/module:Std/val:bin_writer_nat1" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_nat1 : <a href="index.html#/module:Std/type:nat1">nat1</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_endian">
  <a href="index.html#/module:Std/val:compare_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_endian : <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_endian">
  <a href="index.html#/module:Std/val:bin_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_endian : <a href="index.html#/module:Std/type:endian">endian</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_endian">
  <a href="index.html#/module:Std/val:bin_read_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_endian : <a href="index.html#/module:Std/type:endian">endian</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_endian__">
  <a href="index.html#/module:Std/val:__bin_read_endian__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_endian__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_endian">
  <a href="index.html#/module:Std/val:bin_reader_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_endian : <a href="index.html#/module:Std/type:endian">endian</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_endian">
  <a href="index.html#/module:Std/val:bin_size_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_endian : <a href="index.html#/module:Std/type:endian">endian</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_endian">
  <a href="index.html#/module:Std/val:bin_write_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_endian : <a href="index.html#/module:Std/type:endian">endian</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_endian">
  <a href="index.html#/module:Std/val:bin_writer_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_endian : <a href="index.html#/module:Std/type:endian">endian</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:endian_of_sexp">
  <a href="index.html#/module:Std/val:endian_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> endian_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:endian">endian</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_endian">
  <a href="index.html#/module:Std/val:sexp_of_endian" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_endian : <a href="index.html#/module:Std/type:endian">endian</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:typ_of_sexp">
  <a href="index.html#/module:Std/val:typ_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> typ_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_typ">
  <a href="index.html#/module:Std/val:sexp_of_typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_typ : <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_typ">
  <a href="index.html#/module:Std/val:compare_typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_typ : <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_typ">
  <a href="index.html#/module:Std/val:bin_typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_typ : <a href="index.html#/module:Std/type:typ">typ</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_typ">
  <a href="index.html#/module:Std/val:bin_read_typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_typ : <a href="index.html#/module:Std/type:typ">typ</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_typ__">
  <a href="index.html#/module:Std/val:__bin_read_typ__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_typ__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:typ">typ</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_typ">
  <a href="index.html#/module:Std/val:bin_reader_typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_typ : <a href="index.html#/module:Std/type:typ">typ</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_typ">
  <a href="index.html#/module:Std/val:bin_size_typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_typ : <a href="index.html#/module:Std/type:typ">typ</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_typ">
  <a href="index.html#/module:Std/val:bin_write_typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_typ : <a href="index.html#/module:Std/type:typ">typ</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_typ">
  <a href="index.html#/module:Std/val:bin_writer_typ" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_typ : <a href="index.html#/module:Std/type:typ">typ</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:var_of_sexp">
  <a href="index.html#/module:Std/val:var_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> var_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:var">var</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_var">
  <a href="index.html#/module:Std/val:sexp_of_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_var : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_var">
  <a href="index.html#/module:Std/val:compare_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_var : <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:var">var</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_var">
  <a href="index.html#/module:Std/val:bin_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_var : <a href="index.html#/module:Std/type:var">var</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_var">
  <a href="index.html#/module:Std/val:bin_read_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_var : <a href="index.html#/module:Std/type:var">var</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_var__">
  <a href="index.html#/module:Std/val:__bin_read_var__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_var__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:var">var</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_var">
  <a href="index.html#/module:Std/val:bin_reader_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_var : <a href="index.html#/module:Std/type:var">var</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_var">
  <a href="index.html#/module:Std/val:bin_size_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_var : <a href="index.html#/module:Std/type:var">var</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_var">
  <a href="index.html#/module:Std/val:bin_write_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_var : <a href="index.html#/module:Std/type:var">var</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_var">
  <a href="index.html#/module:Std/val:bin_writer_var" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_var : <a href="index.html#/module:Std/type:var">var</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:arch_of_sexp">
  <a href="index.html#/module:Std/val:arch_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> arch_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_arch">
  <a href="index.html#/module:Std/val:sexp_of_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_arch : <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_arch">
  <a href="index.html#/module:Std/val:compare_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_arch : <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_arch">
  <a href="index.html#/module:Std/val:bin_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_arch : <a href="index.html#/module:Std/type:arch">arch</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_arch">
  <a href="index.html#/module:Std/val:bin_read_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_arch : <a href="index.html#/module:Std/type:arch">arch</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_arch__">
  <a href="index.html#/module:Std/val:__bin_read_arch__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_arch__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:arch">arch</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_arch">
  <a href="index.html#/module:Std/val:bin_reader_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_arch : <a href="index.html#/module:Std/type:arch">arch</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_arch">
  <a href="index.html#/module:Std/val:bin_size_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_arch : <a href="index.html#/module:Std/type:arch">arch</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_arch">
  <a href="index.html#/module:Std/val:bin_write_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_arch : <a href="index.html#/module:Std/type:arch">arch</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_arch">
  <a href="index.html#/module:Std/val:bin_writer_arch" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_arch : <a href="index.html#/module:Std/type:arch">arch</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bil_of_sexp">
  <a href="index.html#/module:Std/val:bil_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bil_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:bil">bil</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_bil">
  <a href="index.html#/module:Std/val:sexp_of_bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_bil : <a href="index.html#/module:Std/type:bil">bil</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_bil">
  <a href="index.html#/module:Std/val:compare_bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_bil : <a href="index.html#/module:Std/type:bil">bil</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:bil">bil</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_bil">
  <a href="index.html#/module:Std/val:bin_bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_bil : <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_bil">
  <a href="index.html#/module:Std/val:bin_read_bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_bil : <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_bil__">
  <a href="index.html#/module:Std/val:__bin_read_bil__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_bil__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:bil">bil</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_bil">
  <a href="index.html#/module:Std/val:bin_reader_bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_bil : <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_bil">
  <a href="index.html#/module:Std/val:bin_size_bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_bil : <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_bil">
  <a href="index.html#/module:Std/val:bin_write_bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_bil : <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_bil">
  <a href="index.html#/module:Std/val:bin_writer_bil" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_bil : <a href="index.html#/module:Std/type:bil">bil</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:binop_of_sexp">
  <a href="index.html#/module:Std/val:binop_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> binop_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:binop">binop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_binop">
  <a href="index.html#/module:Std/val:sexp_of_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_binop : <a href="index.html#/module:Std/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_binop">
  <a href="index.html#/module:Std/val:compare_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_binop : <a href="index.html#/module:Std/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:binop">binop</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_binop">
  <a href="index.html#/module:Std/val:bin_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_binop : <a href="index.html#/module:Std/type:binop">binop</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_binop">
  <a href="index.html#/module:Std/val:bin_read_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_binop : <a href="index.html#/module:Std/type:binop">binop</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_binop__">
  <a href="index.html#/module:Std/val:__bin_read_binop__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_binop__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:binop">binop</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_binop">
  <a href="index.html#/module:Std/val:bin_reader_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_binop : <a href="index.html#/module:Std/type:binop">binop</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_binop">
  <a href="index.html#/module:Std/val:bin_size_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_binop : <a href="index.html#/module:Std/type:binop">binop</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_binop">
  <a href="index.html#/module:Std/val:bin_write_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_binop : <a href="index.html#/module:Std/type:binop">binop</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_binop">
  <a href="index.html#/module:Std/val:bin_writer_binop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_binop : <a href="index.html#/module:Std/type:binop">binop</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:cast_of_sexp">
  <a href="index.html#/module:Std/val:cast_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> cast_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:cast">cast</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_cast">
  <a href="index.html#/module:Std/val:sexp_of_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_cast : <a href="index.html#/module:Std/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_cast">
  <a href="index.html#/module:Std/val:compare_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_cast : <a href="index.html#/module:Std/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:cast">cast</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_cast">
  <a href="index.html#/module:Std/val:bin_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_cast : <a href="index.html#/module:Std/type:cast">cast</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_cast">
  <a href="index.html#/module:Std/val:bin_read_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_cast : <a href="index.html#/module:Std/type:cast">cast</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_cast__">
  <a href="index.html#/module:Std/val:__bin_read_cast__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_cast__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:cast">cast</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_cast">
  <a href="index.html#/module:Std/val:bin_reader_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_cast : <a href="index.html#/module:Std/type:cast">cast</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_cast">
  <a href="index.html#/module:Std/val:bin_size_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_cast : <a href="index.html#/module:Std/type:cast">cast</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_cast">
  <a href="index.html#/module:Std/val:bin_write_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_cast : <a href="index.html#/module:Std/type:cast">cast</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_cast">
  <a href="index.html#/module:Std/val:bin_writer_cast" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_cast : <a href="index.html#/module:Std/type:cast">cast</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:exp_of_sexp">
  <a href="index.html#/module:Std/val:exp_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> exp_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:exp">exp</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_exp">
  <a href="index.html#/module:Std/val:sexp_of_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_exp : <a href="index.html#/module:Std/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_exp">
  <a href="index.html#/module:Std/val:compare_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_exp : <a href="index.html#/module:Std/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:exp">exp</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_exp">
  <a href="index.html#/module:Std/val:bin_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_exp : <a href="index.html#/module:Std/type:exp">exp</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_exp">
  <a href="index.html#/module:Std/val:bin_read_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_exp : <a href="index.html#/module:Std/type:exp">exp</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_exp__">
  <a href="index.html#/module:Std/val:__bin_read_exp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_exp__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:exp">exp</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_exp">
  <a href="index.html#/module:Std/val:bin_reader_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_exp : <a href="index.html#/module:Std/type:exp">exp</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_exp">
  <a href="index.html#/module:Std/val:bin_size_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_exp : <a href="index.html#/module:Std/type:exp">exp</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_exp">
  <a href="index.html#/module:Std/val:bin_write_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_exp : <a href="index.html#/module:Std/type:exp">exp</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_exp">
  <a href="index.html#/module:Std/val:bin_writer_exp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_exp : <a href="index.html#/module:Std/type:exp">exp</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:stmt_of_sexp">
  <a href="index.html#/module:Std/val:stmt_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> stmt_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:stmt">stmt</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_stmt">
  <a href="index.html#/module:Std/val:sexp_of_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_stmt : <a href="index.html#/module:Std/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_stmt">
  <a href="index.html#/module:Std/val:compare_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_stmt : <a href="index.html#/module:Std/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:stmt">stmt</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_stmt">
  <a href="index.html#/module:Std/val:bin_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_stmt : <a href="index.html#/module:Std/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_stmt">
  <a href="index.html#/module:Std/val:bin_read_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_stmt : <a href="index.html#/module:Std/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_stmt__">
  <a href="index.html#/module:Std/val:__bin_read_stmt__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_stmt__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:stmt">stmt</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_stmt">
  <a href="index.html#/module:Std/val:bin_reader_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_stmt : <a href="index.html#/module:Std/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_stmt">
  <a href="index.html#/module:Std/val:bin_size_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_stmt : <a href="index.html#/module:Std/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_stmt">
  <a href="index.html#/module:Std/val:bin_write_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_stmt : <a href="index.html#/module:Std/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_stmt">
  <a href="index.html#/module:Std/val:bin_writer_stmt" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_stmt : <a href="index.html#/module:Std/type:stmt">stmt</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:unop_of_sexp">
  <a href="index.html#/module:Std/val:unop_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> unop_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:unop">unop</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_unop">
  <a href="index.html#/module:Std/val:sexp_of_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_unop : <a href="index.html#/module:Std/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_unop">
  <a href="index.html#/module:Std/val:compare_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_unop : <a href="index.html#/module:Std/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:unop">unop</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_unop">
  <a href="index.html#/module:Std/val:bin_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_unop : <a href="index.html#/module:Std/type:unop">unop</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_unop">
  <a href="index.html#/module:Std/val:bin_read_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_unop : <a href="index.html#/module:Std/type:unop">unop</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_unop__">
  <a href="index.html#/module:Std/val:__bin_read_unop__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_unop__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:unop">unop</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_unop">
  <a href="index.html#/module:Std/val:bin_reader_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_unop : <a href="index.html#/module:Std/type:unop">unop</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_unop">
  <a href="index.html#/module:Std/val:bin_size_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_unop : <a href="index.html#/module:Std/type:unop">unop</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_unop">
  <a href="index.html#/module:Std/val:bin_write_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_unop : <a href="index.html#/module:Std/type:unop">unop</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_unop">
  <a href="index.html#/module:Std/val:bin_writer_unop" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_unop : <a href="index.html#/module:Std/type:unop">unop</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_value">
  <a href="index.html#/module:Std/val:sexp_of_value" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_value : <a href="index.html#/module:Std/type:value">value</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_tag">
  <a href="index.html#/module:Std/val:sexp_of_tag" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_tag : ('a <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/type:tag">tag</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_mem">
  <a href="index.html#/module:Std/val:sexp_of_mem" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_mem : <a href="index.html#/module:Std/type:mem">mem</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_table">
  <a href="index.html#/module:Std/val:sexp_of_table" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_table : ('a <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/type:table">table</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_memmap">
  <a href="index.html#/module:Std/val:sexp_of_memmap" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_memmap : ('a <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t) <span class="rarr"><span>-&gt;</span></span> 'a <a href="index.html#/module:Std/type:memmap">memmap</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:location_of_sexp">
  <a href="index.html#/module:Std/val:location_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> location_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_location">
  <a href="index.html#/module:Std/val:sexp_of_location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_location : <a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_location">
  <a href="index.html#/module:Std/val:compare_location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_location : <a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_location">
  <a href="index.html#/module:Std/val:bin_location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_location : <a href="index.html#/module:Std/type:location">location</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_location">
  <a href="index.html#/module:Std/val:bin_read_location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_location : <a href="index.html#/module:Std/type:location">location</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_location__">
  <a href="index.html#/module:Std/val:__bin_read_location__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_location__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:location">location</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_location">
  <a href="index.html#/module:Std/val:bin_reader_location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_location : <a href="index.html#/module:Std/type:location">location</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_location">
  <a href="index.html#/module:Std/val:bin_size_location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_location : <a href="index.html#/module:Std/type:location">location</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_location">
  <a href="index.html#/module:Std/val:bin_write_location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_location : <a href="index.html#/module:Std/type:location">location</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_location">
  <a href="index.html#/module:Std/val:bin_writer_location" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_location : <a href="index.html#/module:Std/type:location">location</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_insn">
  <a href="index.html#/module:Std/val:sexp_of_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_insn : <a href="index.html#/module:Std/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_insn">
  <a href="index.html#/module:Std/val:compare_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_insn : <a href="index.html#/module:Std/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:insn">insn</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_insn">
  <a href="index.html#/module:Std/val:bin_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_insn : <a href="index.html#/module:Std/type:insn">insn</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_insn">
  <a href="index.html#/module:Std/val:bin_read_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_insn : <a href="index.html#/module:Std/type:insn">insn</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_insn__">
  <a href="index.html#/module:Std/val:__bin_read_insn__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_insn__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:insn">insn</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_insn">
  <a href="index.html#/module:Std/val:bin_reader_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_insn : <a href="index.html#/module:Std/type:insn">insn</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_insn">
  <a href="index.html#/module:Std/val:bin_size_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_insn : <a href="index.html#/module:Std/type:insn">insn</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_insn">
  <a href="index.html#/module:Std/val:bin_write_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_insn : <a href="index.html#/module:Std/type:insn">insn</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_insn">
  <a href="index.html#/module:Std/val:bin_writer_insn" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_insn : <a href="index.html#/module:Std/type:insn">insn</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_block">
  <a href="index.html#/module:Std/val:sexp_of_block" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_block : <a href="index.html#/module:Std/type:block">block</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_block">
  <a href="index.html#/module:Std/val:compare_block" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_block : <a href="index.html#/module:Std/type:block">block</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:block">block</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:reg_of_sexp">
  <a href="index.html#/module:Std/val:reg_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> reg_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:reg">reg</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_reg">
  <a href="index.html#/module:Std/val:sexp_of_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_reg : <a href="index.html#/module:Std/type:reg">reg</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_reg">
  <a href="index.html#/module:Std/val:compare_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_reg : <a href="index.html#/module:Std/type:reg">reg</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:reg">reg</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reg">
  <a href="index.html#/module:Std/val:bin_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reg : <a href="index.html#/module:Std/type:reg">reg</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_reg">
  <a href="index.html#/module:Std/val:bin_read_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_reg : <a href="index.html#/module:Std/type:reg">reg</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_reg__">
  <a href="index.html#/module:Std/val:__bin_read_reg__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_reg__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:reg">reg</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_reg">
  <a href="index.html#/module:Std/val:bin_reader_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_reg : <a href="index.html#/module:Std/type:reg">reg</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_reg">
  <a href="index.html#/module:Std/val:bin_size_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_reg : <a href="index.html#/module:Std/type:reg">reg</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_reg">
  <a href="index.html#/module:Std/val:bin_write_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_reg : <a href="index.html#/module:Std/type:reg">reg</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_reg">
  <a href="index.html#/module:Std/val:bin_writer_reg" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_reg : <a href="index.html#/module:Std/type:reg">reg</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:imm_of_sexp">
  <a href="index.html#/module:Std/val:imm_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> imm_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:imm">imm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_imm">
  <a href="index.html#/module:Std/val:sexp_of_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_imm : <a href="index.html#/module:Std/type:imm">imm</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_imm">
  <a href="index.html#/module:Std/val:compare_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_imm : <a href="index.html#/module:Std/type:imm">imm</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:imm">imm</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_imm">
  <a href="index.html#/module:Std/val:bin_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_imm : <a href="index.html#/module:Std/type:imm">imm</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_imm">
  <a href="index.html#/module:Std/val:bin_read_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_imm : <a href="index.html#/module:Std/type:imm">imm</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_imm__">
  <a href="index.html#/module:Std/val:__bin_read_imm__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_imm__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:imm">imm</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_imm">
  <a href="index.html#/module:Std/val:bin_reader_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_imm : <a href="index.html#/module:Std/type:imm">imm</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_imm">
  <a href="index.html#/module:Std/val:bin_size_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_imm : <a href="index.html#/module:Std/type:imm">imm</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_imm">
  <a href="index.html#/module:Std/val:bin_write_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_imm : <a href="index.html#/module:Std/type:imm">imm</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_imm">
  <a href="index.html#/module:Std/val:bin_writer_imm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_imm : <a href="index.html#/module:Std/type:imm">imm</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:fmm_of_sexp">
  <a href="index.html#/module:Std/val:fmm_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> fmm_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:fmm">fmm</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_fmm">
  <a href="index.html#/module:Std/val:sexp_of_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_fmm : <a href="index.html#/module:Std/type:fmm">fmm</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_fmm">
  <a href="index.html#/module:Std/val:compare_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_fmm : <a href="index.html#/module:Std/type:fmm">fmm</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:fmm">fmm</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_fmm">
  <a href="index.html#/module:Std/val:bin_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_fmm : <a href="index.html#/module:Std/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_fmm">
  <a href="index.html#/module:Std/val:bin_read_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_fmm : <a href="index.html#/module:Std/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_fmm__">
  <a href="index.html#/module:Std/val:__bin_read_fmm__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_fmm__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:fmm">fmm</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_fmm">
  <a href="index.html#/module:Std/val:bin_reader_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_fmm : <a href="index.html#/module:Std/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_fmm">
  <a href="index.html#/module:Std/val:bin_size_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_fmm : <a href="index.html#/module:Std/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_fmm">
  <a href="index.html#/module:Std/val:bin_write_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_fmm : <a href="index.html#/module:Std/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_fmm">
  <a href="index.html#/module:Std/val:bin_writer_fmm" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_fmm : <a href="index.html#/module:Std/type:fmm">fmm</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:kind_of_sexp">
  <a href="index.html#/module:Std/val:kind_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> kind_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:kind">kind</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_kind">
  <a href="index.html#/module:Std/val:sexp_of_kind" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_kind : <a href="index.html#/module:Std/type:kind">kind</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_kind">
  <a href="index.html#/module:Std/val:compare_kind" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_kind : <a href="index.html#/module:Std/type:kind">kind</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:kind">kind</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_kind">
  <a href="index.html#/module:Std/val:bin_kind" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_kind : <a href="index.html#/module:Std/type:kind">kind</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_kind">
  <a href="index.html#/module:Std/val:bin_read_kind" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_kind : <a href="index.html#/module:Std/type:kind">kind</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_kind__">
  <a href="index.html#/module:Std/val:__bin_read_kind__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_kind__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:kind">kind</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_kind">
  <a href="index.html#/module:Std/val:bin_reader_kind" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_kind : <a href="index.html#/module:Std/type:kind">kind</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_kind">
  <a href="index.html#/module:Std/val:bin_size_kind" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_kind : <a href="index.html#/module:Std/type:kind">kind</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_kind">
  <a href="index.html#/module:Std/val:bin_write_kind" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_kind : <a href="index.html#/module:Std/type:kind">kind</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_kind">
  <a href="index.html#/module:Std/val:bin_writer_kind" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_kind : <a href="index.html#/module:Std/type:kind">kind</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_op">
  <a href="index.html#/module:Std/val:sexp_of_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_op : <a href="index.html#/module:Std/type:op">op</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_op">
  <a href="index.html#/module:Std/val:compare_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_op : <a href="index.html#/module:Std/type:op">op</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:op">op</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_op">
  <a href="index.html#/module:Std/val:bin_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_op : <a href="index.html#/module:Std/type:op">op</a> Core_kernel.Std.Bin_prot.Type_class.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_read_op">
  <a href="index.html#/module:Std/val:bin_read_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_read_op : <a href="index.html#/module:Std/type:op">op</a> Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__bin_read_op__">
  <a href="index.html#/module:Std/val:__bin_read_op__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __bin_read_op__ : (int <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:op">op</a>) Core_kernel.Std.Bin_prot.Read.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_reader_op">
  <a href="index.html#/module:Std/val:bin_reader_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_reader_op : <a href="index.html#/module:Std/type:op">op</a> Core_kernel.Std.Bin_prot.Type_class.reader
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_size_op">
  <a href="index.html#/module:Std/val:bin_size_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_size_op : <a href="index.html#/module:Std/type:op">op</a> Core_kernel.Std.Bin_prot.Size.sizer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_write_op">
  <a href="index.html#/module:Std/val:bin_write_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_write_op : <a href="index.html#/module:Std/type:op">op</a> Core_kernel.Std.Bin_prot.Write.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:bin_writer_op">
  <a href="index.html#/module:Std/val:bin_writer_op" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> bin_writer_op : <a href="index.html#/module:Std/type:op">op</a> Core_kernel.Std.Bin_prot.Type_class.writer
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:jump_of_sexp">
  <a href="index.html#/module:Std/val:jump_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> jump_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:jump">jump</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__jump_of_sexp__">
  <a href="index.html#/module:Std/val:__jump_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __jump_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:jump">jump</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_jump">
  <a href="index.html#/module:Std/val:sexp_of_jump" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_jump : <a href="index.html#/module:Std/type:jump">jump</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_jump">
  <a href="index.html#/module:Std/val:compare_jump" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_jump : <a href="index.html#/module:Std/type:jump">jump</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:jump">jump</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:edge_of_sexp">
  <a href="index.html#/module:Std/val:edge_of_sexp" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> edge_of_sexp : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:edge">edge</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:__edge_of_sexp__">
  <a href="index.html#/module:Std/val:__edge_of_sexp__" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> __edge_of_sexp__ : Sexplib.Sexp.t <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:edge">edge</a>
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:sexp_of_edge">
  <a href="index.html#/module:Std/val:sexp_of_edge" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> sexp_of_edge : <a href="index.html#/module:Std/type:edge">edge</a> <span class="rarr"><span>-&gt;</span></span> Sexplib.Sexp.t
    
  </div>
  
  </div>
  
  <div class="region" id="/module:Std/val:compare_edge">
  <a href="index.html#/module:Std/val:compare_edge" class="anchor">#</a>
  
  <div class="val">
    <span class="keyword">val</span> compare_edge : <a href="index.html#/module:Std/type:edge">edge</a> <span class="rarr"><span>-&gt;</span></span> <a href="index.html#/module:Std/type:edge">edge</a> <span class="rarr"><span>-&gt;</span></span> int
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </div>
  </div>
    <div class="outro"><span class="keyword">end</span></div>
    
  </div>
  
  </body>
</html>